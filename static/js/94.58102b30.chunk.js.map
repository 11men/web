{"version":3,"file":"static/js/94.58102b30.chunk.js","mappings":"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","sources":["components/lab/subject/DeductionGame/ai/sandbox/AICodeValidator.ts","components/lab/subject/Tetris.tsx","components/lab/subject/DeductionGame/ai/players/BasePlayer.ts","components/lab/subject/DeductionGame/ai/players/HumanPlayer.ts","components/lab/subject/DeductionGame/ai/players/BuiltInAIPlayer.ts","components/lab/subject/DeductionGame/ai/sandbox/AICodeExecutor.ts","components/lab/subject/DeductionGame/ai/sandbox/PerformanceMonitor.ts","components/lab/subject/DeductionGame/ai/sandbox/AIExecutionHandler.ts","components/lab/subject/DeductionGame/ai/players/CustomAIPlayer.ts","components/lab/subject/DeductionGame/ai/strategies/EasyStrategy.ts","components/lab/subject/DeductionGame/ai/strategies/MediumStrategy.ts","components/lab/subject/DeductionGame/ai/strategies/HardStrategy.ts","components/lab/subject/DeductionGame/ai/PlayerFactory.ts","components/lab/subject/DeductionGame/ai/GameManager.ts","components/lab/subject/DeductionGame/DeductionGame.tsx","pages/LabDetailPage.tsx"],"sourcesContent":["export interface ValidationResult {\n  isValid: boolean;\n  errors: string[];\n  warnings?: string[];\n}\n\nexport interface ComplexityMetrics {\n  lines: number;\n  loops: number;\n  functions: number;\n  complexity: number;\n}\n\nexport class AICodeValidator {\n  private static readonly FORBIDDEN_PATTERNS: Array<{ pattern: RegExp; message: string }> = [\n    { pattern: /eval\\s*\\(/g, message: 'eval() is not allowed' },\n    { pattern: /Function\\s*\\(/g, message: 'Function constructor is not allowed' },\n    { pattern: /setTimeout/g, message: 'setTimeout is not allowed' },\n    { pattern: /setInterval/g, message: 'setInterval is not allowed' },\n    { pattern: /setImmediate/g, message: 'setImmediate is not allowed' },\n    { pattern: /fetch\\s*\\(/g, message: 'fetch() is not allowed' },\n    { pattern: /XMLHttpRequest/g, message: 'XMLHttpRequest is not allowed' },\n    { pattern: /import\\s+/g, message: 'import statements are not allowed' },\n    { pattern: /require\\s*\\(/g, message: 'require() is not allowed' },\n    { pattern: /process\\./g, message: 'process object is not allowed' },\n    { pattern: /global\\./g, message: 'global object is not allowed' },\n    { pattern: /window\\./g, message: 'window object is not allowed' },\n    { pattern: /document\\./g, message: 'document object is not allowed' },\n    { pattern: /self\\./g, message: 'self object is not allowed' },\n    { pattern: /__proto__/g, message: '__proto__ is not allowed' },\n    { pattern: /constructor\\s*\\[/g, message: 'constructor property access is not allowed' },\n    { pattern: /\\.constructor/g, message: 'constructor property is not allowed' },\n    { pattern: /new\\s+Worker/g, message: 'Worker is not allowed' },\n    { pattern: /postMessage/g, message: 'postMessage is not allowed' },\n    { pattern: /localStorage/g, message: 'localStorage is not allowed' },\n    { pattern: /sessionStorage/g, message: 'sessionStorage is not allowed' },\n    { pattern: /indexedDB/g, message: 'indexedDB is not allowed' },\n    { pattern: /crypto\\./g, message: 'crypto object is not allowed' },\n    { pattern: /WebAssembly/g, message: 'WebAssembly is not allowed' },\n    { pattern: /SharedArrayBuffer/g, message: 'SharedArrayBuffer is not allowed' },\n    { pattern: /Atomics/g, message: 'Atomics is not allowed' },\n  ];\n\n  private static readonly MAX_CODE_LENGTH = 10000;\n  private static readonly MAX_LINES = 500;\n  private static readonly MAX_LOOP_DEPTH = 5;\n  private static readonly MAX_FUNCTION_DEPTH = 10;\n\n  static validate(code: string): ValidationResult {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    // 1. Check code length\n    if (code.length > this.MAX_CODE_LENGTH) {\n      errors.push(`Code exceeds maximum length (${code.length}/${this.MAX_CODE_LENGTH} characters)`);\n    }\n\n    // 2. Check line count\n    const lines = code.split('\\n');\n    if (lines.length > this.MAX_LINES) {\n      errors.push(`Code exceeds maximum lines (${lines.length}/${this.MAX_LINES} lines)`);\n    }\n\n    // 3. Check for forbidden patterns\n    for (const { pattern, message } of this.FORBIDDEN_PATTERNS) {\n      if (pattern.test(code)) {\n        errors.push(message);\n      }\n    }\n\n    // 4. Check syntax\n    try {\n      // Use Function constructor to check syntax (in real implementation, this would be in a sandbox)\n      new Function(code);\n    } catch (e: any) {\n      errors.push(`Syntax error: ${e.message}`);\n    }\n\n    // 5. Check for makeGuess function\n    if (!code.includes('function makeGuess') && !code.includes('makeGuess =')) {\n      errors.push('makeGuess function not found');\n    }\n\n    // 6. Check for infinite loops (basic heuristic)\n    const loopPatterns = [\n      /while\\s*\\(\\s*true\\s*\\)/g,\n      /while\\s*\\(\\s*1\\s*\\)/g,\n      /for\\s*\\(\\s*;\\s*;\\s*\\)/g,\n    ];\n    \n    for (const pattern of loopPatterns) {\n      if (pattern.test(code)) {\n        warnings.push('Potential infinite loop detected');\n      }\n    }\n\n    // 7. Check complexity\n    const complexity = this.analyzeComplexity(code);\n    if (complexity.complexity > 100) {\n      warnings.push(`High code complexity detected (score: ${complexity.complexity})`);\n    }\n\n    // 8. Check for suspicious patterns\n    const suspiciousPatterns = [\n      { pattern: /\\bthis\\b/g, message: 'Use of \"this\" keyword may cause issues' },\n      { pattern: /\\barguments\\b/g, message: 'Use of \"arguments\" object is discouraged' },\n      { pattern: /\\.call\\s*\\(/g, message: 'Use of .call() is suspicious' },\n      { pattern: /\\.apply\\s*\\(/g, message: 'Use of .apply() is suspicious' },\n      { pattern: /\\.bind\\s*\\(/g, message: 'Use of .bind() may affect performance' },\n    ];\n\n    for (const { pattern, message } of suspiciousPatterns) {\n      if (pattern.test(code)) {\n        warnings.push(message);\n      }\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings: warnings.length > 0 ? warnings : undefined\n    };\n  }\n\n  private static analyzeComplexity(code: string): ComplexityMetrics {\n    const lines = code.split('\\n').length;\n    const loops = (code.match(/\\b(for|while|do)\\b/g) || []).length;\n    const functions = (code.match(/\\bfunction\\b/g) || []).length;\n    const conditionals = (code.match(/\\b(if|else|switch|case)\\b/g) || []).length;\n    \n    // Simple cyclomatic complexity estimation\n    const complexity = 1 + conditionals + loops;\n\n    return {\n      lines,\n      loops,\n      functions,\n      complexity\n    };\n  }\n\n  static preprocessCode(code: string): string {\n    // Remove comments\n    let processed = code\n      .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove block comments\n      .replace(/\\/\\/.*$/gm, ''); // Remove line comments\n\n    // Trim whitespace\n    processed = processed.trim();\n\n    // Ensure code ends with the makeGuess function being accessible\n    if (!processed.includes('return makeGuess') && processed.includes('function makeGuess')) {\n      processed += '\\n\\n// Auto-added by preprocessor\\nif (typeof makeGuess === \"function\") { makeGuess; }';\n    }\n\n    return processed;\n  }\n}","import './Tetris.css';\n\nconst Tetris = () => {\n    \n    return (\n        <div className=\"tetris-container\">\n            <div className=\"tetris-header\">\n                <h1>AI 테트리스</h1>\n                <p className=\"tetris-description\">\n                    AI로 시작한 테트리스 게임 만들기 프로젝트입니다.\n                    현재 버전에서는 기본적인 테트리스 게임플레이를 구현했습니다.\n                </p>\n            </div>\n\n            <div className=\"tetris-content\">\n                <iframe\n                    src={process.env.PUBLIC_URL + \"/lab/html/tetris.html\"}\n                    title=\"AI Tetris Game\"\n                    className=\"tetris-frame\"\n                    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                    allowFullScreen\n                />\n            </div>\n\n            <div className=\"tetris-info\">\n                <h2>프로젝트 정보</h2>\n                <div className=\"info-grid\">\n                    <div className=\"info-item\">\n                        <h3>개발 기간</h3>\n                        <p>2024.06.11 ~ 현재</p>\n                    </div>\n                    <div className=\"info-item\">\n                        <h3>사용 기술</h3>\n                        <p>HTML, CSS, JavaScript</p>\n                    </div>\n                    <div className=\"info-item\">\n                        <h3>주요 기능</h3>\n                        <ul>\n                            <li>기본 테트리스 게임플레이</li>\n                            <li>점수 시스템</li>\n                            <li>레벨 시스템</li>\n                        </ul>\n                    </div>\n                    <div className=\"info-item\">\n                        <h3>향후 계획</h3>\n                        <ul>\n                            <li>AI 학습 모델 통합</li>\n                            <li>멀티플레이어 지원</li>\n                            <li>커스텀 테마</li>\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\nexport default Tetris;\n","import { PlayerInfo, PlayerMove } from '../types/PlayerTypes';\nimport { GameStateForAI } from '../types/GameTypes';\n\nexport interface IPlayer {\n  getInfo(): PlayerInfo;\n  \n  makeGuess(gameState: GameStateForAI): Promise<number[]>;\n  \n  isReady(): boolean;\n  \n  onTurnStart?(): void;\n  \n  onTurnEnd?(move: PlayerMove): void;\n  \n  reset(): void;\n}\n\nexport abstract class BasePlayer implements IPlayer {\n  protected playerInfo: PlayerInfo;\n  protected ready: boolean = false;\n\n  constructor(playerInfo: PlayerInfo) {\n    this.playerInfo = playerInfo;\n  }\n\n  getInfo(): PlayerInfo {\n    return this.playerInfo;\n  }\n\n  isReady(): boolean {\n    return this.ready;\n  }\n\n  abstract makeGuess(gameState: GameStateForAI): Promise<number[]>;\n\n  onTurnStart(): void {\n    // Override in subclasses if needed\n  }\n\n  onTurnEnd(move: PlayerMove): void {\n    // Override in subclasses if needed\n  }\n\n  reset(): void {\n    this.ready = false;\n  }\n}","import { BasePlayer } from './BasePlayer';\nimport { PlayerInfo } from '../types/PlayerTypes';\nimport { GameStateForAI } from '../types/GameTypes';\n\nexport class HumanPlayer extends BasePlayer {\n  private resolveGuess?: (indices: number[]) => void;\n  \n  constructor(playerInfo: PlayerInfo) {\n    super(playerInfo);\n    this.ready = true;\n  }\n\n  async makeGuess(gameState: GameStateForAI): Promise<number[]> {\n    return new Promise<number[]>((resolve) => {\n      this.resolveGuess = resolve;\n    });\n  }\n\n  submitGuess(indices: number[]): void {\n    if (this.resolveGuess) {\n      this.resolveGuess(indices);\n      this.resolveGuess = undefined;\n    }\n  }\n\n  isWaitingForInput(): boolean {\n    return this.resolveGuess !== undefined;\n  }\n\n  reset(): void {\n    super.reset();\n    this.resolveGuess = undefined;\n    this.ready = true;\n  }\n}","import { BasePlayer } from './BasePlayer';\nimport { PlayerInfo } from '../types/PlayerTypes';\nimport { GameStateForAI } from '../types/GameTypes';\nimport { AIStrategy } from '../strategies/AIStrategy';\n\nexport class BuiltInAIPlayer extends BasePlayer {\n  private strategy: AIStrategy;\n  private thinkingTime: number = 2000; // 2 seconds by default\n  \n  constructor(playerInfo: PlayerInfo, strategy: AIStrategy) {\n    super(playerInfo);\n    this.strategy = strategy;\n    this.ready = true;\n  }\n\n  async makeGuess(gameState: GameStateForAI): Promise<number[]> {\n    const startTime = Date.now();\n    \n    const selectedIndices = this.strategy.selectKeywords(gameState);\n    \n    const elapsedTime = Date.now() - startTime;\n    const remainingTime = Math.max(0, this.thinkingTime - elapsedTime);\n    \n    if (remainingTime > 0) {\n      await new Promise(resolve => setTimeout(resolve, remainingTime));\n    }\n    \n    return selectedIndices;\n  }\n\n  setThinkingTime(milliseconds: number): void {\n    this.thinkingTime = Math.max(500, milliseconds);\n  }\n\n  getStrategy(): AIStrategy {\n    return this.strategy;\n  }\n\n  setStrategy(strategy: AIStrategy): void {\n    this.strategy = strategy;\n  }\n}","import { GameStateForAI } from '../types/GameTypes';\nimport { AICodeValidator } from './AICodeValidator';\n\nexport interface ExecutionResult {\n  success: boolean;\n  result?: number[];\n  error?: string;\n  executionTime?: number;\n  logs?: string[];\n}\n\nexport interface SecureGameState {\n  readonly keywords: ReadonlyArray<string>;\n  readonly myHints: ReadonlyArray<number>;\n  readonly answerCount: number;\n  readonly previousGuesses: ReadonlyArray<{\n    playerId: number;\n    guess: number[];\n    correctCount: number;\n  }>;\n  readonly revealedAnswers: ReadonlyArray<number>;\n  readonly revealedWrongAnswers: ReadonlyArray<number>;\n  readonly currentTurn: number;\n  readonly timeLimit: number;\n}\n\nexport class AICodeExecutor {\n  private static instance: AICodeExecutor;\n  private executionCounter = 0;\n  private readonly MAX_EXECUTION_TIME = 2500; // 2.5 seconds with buffer\n\n  static getInstance(): AICodeExecutor {\n    if (!AICodeExecutor.instance) {\n      AICodeExecutor.instance = new AICodeExecutor();\n    }\n    return AICodeExecutor.instance;\n  }\n\n  async executeUserAI(\n    code: string,\n    gameState: GameStateForAI,\n    playerId: number\n  ): Promise<ExecutionResult> {\n    const startTime = performance.now();\n    const logs: string[] = [];\n\n    try {\n      // Step 1: Validate code\n      const validation = AICodeValidator.validate(code);\n      if (!validation.isValid) {\n        return {\n          success: false,\n          error: `Code validation failed: ${validation.errors.join('; ')}`,\n          executionTime: performance.now() - startTime\n        };\n      }\n\n      // Log warnings if any\n      if (validation.warnings) {\n        logs.push(...validation.warnings.map(w => `Warning: ${w}`));\n      }\n\n      // Step 2: Preprocess code\n      const processedCode = AICodeValidator.preprocessCode(code);\n\n      // Step 3: Create secure game state\n      const secureGameState = this.createSecureGameState(gameState);\n\n      // Step 4: Execute in worker\n      const result = await this.executeInWorker(processedCode, secureGameState, logs);\n\n      const executionTime = performance.now() - startTime;\n\n      return {\n        success: true,\n        result,\n        executionTime,\n        logs: logs.length > 0 ? logs : undefined\n      };\n\n    } catch (error: any) {\n      const executionTime = performance.now() - startTime;\n      \n      return {\n        success: false,\n        error: error.message || 'Unknown error occurred',\n        executionTime,\n        logs: logs.length > 0 ? logs : undefined\n      };\n    }\n  }\n\n  private createSecureGameState(gameState: GameStateForAI): SecureGameState {\n    // Deep freeze arrays and objects to prevent modification\n    const deepFreeze = <T>(obj: T): T => {\n      Object.freeze(obj);\n      \n      Object.getOwnPropertyNames(obj).forEach(prop => {\n        if (obj[prop as keyof T] !== null\n            && (typeof obj[prop as keyof T] === 'object' || typeof obj[prop as keyof T] === 'function')\n            && !Object.isFrozen(obj[prop as keyof T])) {\n          deepFreeze(obj[prop as keyof T]);\n        }\n      });\n      \n      return obj;\n    };\n\n    return deepFreeze({\n      keywords: [...gameState.keywords],\n      myHints: [...gameState.myHints],\n      answerCount: gameState.answerCount,\n      previousGuesses: gameState.previousGuesses.map(g => ({\n        playerId: g.playerId,\n        guess: [...g.guess],\n        correctCount: g.correctCount\n      })),\n      revealedAnswers: [...gameState.revealedAnswers],\n      revealedWrongAnswers: [...gameState.revealedWrongAnswers],\n      currentTurn: gameState.currentTurn,\n      timeLimit: gameState.timeLimit\n    });\n  }\n\n  private executeInWorker(\n    code: string,\n    gameState: SecureGameState,\n    logs: string[]\n  ): Promise<number[]> {\n    return new Promise((resolve, reject) => {\n      const executionId = `exec_${++this.executionCounter}_${Date.now()}`;\n      \n      // Create worker\n      // Get the correct path for the worker file\n      const publicUrl = process.env.PUBLIC_URL || '';\n      let workerPath = publicUrl + '/ai-worker.js';\n      \n      // In development, if the path starts with /web, use it directly\n      if (window.location.pathname.startsWith('/web') && !workerPath.startsWith('/web')) {\n        workerPath = '/web/ai-worker.js';\n      }\n      \n      const worker = new Worker(workerPath);\n      \n      // Set timeout\n      const timeoutId = setTimeout(() => {\n        worker.terminate();\n        reject(new Error('Execution timeout exceeded (2 seconds)'));\n      }, this.MAX_EXECUTION_TIME);\n\n      // Handle messages\n      worker.onmessage = (event) => {\n        const { type, executionId: msgId, result, error, data } = event.data;\n\n        // Handle console.log messages\n        if (type === 'log' && msgId === executionId) {\n          const logMessage = data.map((arg: any) => \n            typeof arg === 'object' ? JSON.stringify(arg) : String(arg)\n          ).join(' ');\n          logs.push(logMessage);\n          return;\n        }\n\n        // Handle result or error\n        if (msgId === executionId) {\n          clearTimeout(timeoutId);\n          worker.terminate();\n\n          if (error) {\n            reject(new Error(error));\n          } else if (result) {\n            resolve(result);\n          } else {\n            reject(new Error('No result returned from AI'));\n          }\n        }\n      };\n\n      // Handle worker errors\n      worker.onerror = (error) => {\n        clearTimeout(timeoutId);\n        worker.terminate();\n        \n        // More detailed error message\n        let errorMessage = 'Worker error: ';\n        if (error.message) {\n          errorMessage += error.message;\n        } else {\n          errorMessage += 'Failed to load worker file. Make sure ai-worker.js is in the public directory.';\n        }\n        \n        console.error('Worker load error:', error);\n        console.error('Worker path attempted:', workerPath);\n        \n        reject(new Error(errorMessage));\n      };\n\n      // Send execution request\n      worker.postMessage({\n        code,\n        gameState,\n        executionId\n      });\n    });\n  }\n\n  // Helper method to validate guess format\n  static validateGuess(guess: number[], gameState: GameStateForAI): string | null {\n    if (!Array.isArray(guess)) {\n      return 'Guess must be an array';\n    }\n\n    if (guess.length !== gameState.answerCount) {\n      return `Guess must contain exactly ${gameState.answerCount} elements`;\n    }\n\n    const keywordCount = gameState.keywords.length;\n    for (let i = 0; i < guess.length; i++) {\n      const idx = guess[i];\n      \n      if (typeof idx !== 'number' || !Number.isInteger(idx)) {\n        return `Element at index ${i} must be an integer`;\n      }\n\n      if (idx < 0 || idx >= keywordCount) {\n        return `Element at index ${i} (${idx}) is out of bounds`;\n      }\n\n      if (gameState.myHints.includes(idx)) {\n        return `Element at index ${i} (${idx}) is one of your hints`;\n      }\n    }\n\n    const uniqueIndices = new Set(guess);\n    if (uniqueIndices.size !== guess.length) {\n      return 'Guess contains duplicate indices';\n    }\n\n    return null; // Valid\n  }\n}","export interface PerformanceMetrics {\n  executionTime: number;\n  memoryUsage?: number;\n  validationTime?: number;\n  workerCreationTime?: number;\n}\n\nexport interface DetailedMetrics extends PerformanceMetrics {\n  timestamp: number;\n  playerId: number;\n  success: boolean;\n  errorType?: string;\n}\n\nexport class PerformanceMonitor {\n  private static instance: PerformanceMonitor;\n  private metricsHistory: DetailedMetrics[] = [];\n  private readonly MAX_HISTORY_SIZE = 1000;\n\n  static getInstance(): PerformanceMonitor {\n    if (!PerformanceMonitor.instance) {\n      PerformanceMonitor.instance = new PerformanceMonitor();\n    }\n    return PerformanceMonitor.instance;\n  }\n\n  async measureExecution<T>(\n    executor: () => Promise<T>,\n    metadata?: { playerId?: number }\n  ): Promise<[T, PerformanceMetrics]> {\n    const startTime = performance.now();\n    const startMemory = this.getMemoryUsage();\n\n    try {\n      const result = await executor();\n      \n      const endTime = performance.now();\n      const endMemory = this.getMemoryUsage();\n\n      const metrics: PerformanceMetrics = {\n        executionTime: endTime - startTime,\n        memoryUsage: endMemory && startMemory ? endMemory - startMemory : undefined\n      };\n\n      // Record successful execution\n      if (metadata?.playerId !== undefined) {\n        this.recordMetrics({\n          ...metrics,\n          timestamp: Date.now(),\n          playerId: metadata.playerId,\n          success: true\n        });\n      }\n\n      return [result, metrics];\n    } catch (error: any) {\n      const endTime = performance.now();\n      const endMemory = this.getMemoryUsage();\n\n      const metrics: PerformanceMetrics = {\n        executionTime: endTime - startTime,\n        memoryUsage: endMemory && startMemory ? endMemory - startMemory : undefined\n      };\n\n      // Record failed execution\n      if (metadata?.playerId !== undefined) {\n        this.recordMetrics({\n          ...metrics,\n          timestamp: Date.now(),\n          playerId: metadata.playerId,\n          success: false,\n          errorType: error.constructor.name\n        });\n      }\n\n      throw { error, metrics };\n    }\n  }\n\n  measureSync<T>(executor: () => T): [T, PerformanceMetrics] {\n    const startTime = performance.now();\n    const startMemory = this.getMemoryUsage();\n\n    const result = executor();\n    \n    const endTime = performance.now();\n    const endMemory = this.getMemoryUsage();\n\n    const metrics: PerformanceMetrics = {\n      executionTime: endTime - startTime,\n      memoryUsage: endMemory && startMemory ? endMemory - startMemory : undefined\n    };\n\n    return [result, metrics];\n  }\n\n  private getMemoryUsage(): number | undefined {\n    // Check if memory API is available (Chrome/Edge)\n    if ('memory' in performance) {\n      return (performance as any).memory.usedJSHeapSize;\n    }\n    return undefined;\n  }\n\n  private recordMetrics(metrics: DetailedMetrics): void {\n    this.metricsHistory.push(metrics);\n\n    // Keep history size under control\n    if (this.metricsHistory.length > this.MAX_HISTORY_SIZE) {\n      this.metricsHistory = this.metricsHistory.slice(-this.MAX_HISTORY_SIZE);\n    }\n  }\n\n  getPlayerStats(playerId: number): {\n    totalExecutions: number;\n    successRate: number;\n    averageExecutionTime: number;\n    maxExecutionTime: number;\n    recentErrors: string[];\n  } {\n    const playerMetrics = this.metricsHistory.filter(m => m.playerId === playerId);\n    \n    if (playerMetrics.length === 0) {\n      return {\n        totalExecutions: 0,\n        successRate: 0,\n        averageExecutionTime: 0,\n        maxExecutionTime: 0,\n        recentErrors: []\n      };\n    }\n\n    const successful = playerMetrics.filter(m => m.success);\n    const totalTime = playerMetrics.reduce((sum, m) => sum + m.executionTime, 0);\n    const maxTime = Math.max(...playerMetrics.map(m => m.executionTime));\n    \n    const recentErrors = playerMetrics\n      .filter(m => !m.success && m.errorType)\n      .slice(-5)\n      .map(m => m.errorType!);\n\n    return {\n      totalExecutions: playerMetrics.length,\n      successRate: successful.length / playerMetrics.length,\n      averageExecutionTime: totalTime / playerMetrics.length,\n      maxExecutionTime: maxTime,\n      recentErrors\n    };\n  }\n\n  getGlobalStats(): {\n    totalExecutions: number;\n    averageSuccessRate: number;\n    averageExecutionTime: number;\n    peakExecutionTime: number;\n    activePlayerCount: number;\n  } {\n    if (this.metricsHistory.length === 0) {\n      return {\n        totalExecutions: 0,\n        averageSuccessRate: 0,\n        averageExecutionTime: 0,\n        peakExecutionTime: 0,\n        activePlayerCount: 0\n      };\n    }\n\n    const successful = this.metricsHistory.filter(m => m.success);\n    const totalTime = this.metricsHistory.reduce((sum, m) => sum + m.executionTime, 0);\n    const peakTime = Math.max(...this.metricsHistory.map(m => m.executionTime));\n    \n    const uniquePlayers = new Set(this.metricsHistory.map(m => m.playerId));\n\n    return {\n      totalExecutions: this.metricsHistory.length,\n      averageSuccessRate: successful.length / this.metricsHistory.length,\n      averageExecutionTime: totalTime / this.metricsHistory.length,\n      peakExecutionTime: peakTime,\n      activePlayerCount: uniquePlayers.size\n    };\n  }\n\n  clearHistory(): void {\n    this.metricsHistory = [];\n  }\n}","import { GameStateForAI } from '../types/GameTypes';\nimport { AICodeExecutor, ExecutionResult } from './AICodeExecutor';\nimport { PerformanceMonitor, PerformanceMetrics } from './PerformanceMonitor';\n\nexport interface AIExecutionResult {\n  playerId: number;\n  playerName: string;\n  guess: number[];\n  success: boolean;\n  executionTime: number;\n  error?: string;\n  logs?: string[];\n  metrics?: PerformanceMetrics;\n}\n\nexport class AIExecutionHandler {\n  private static instance: AIExecutionHandler;\n  private executor: AICodeExecutor;\n  private monitor: PerformanceMonitor;\n\n  private constructor() {\n    this.executor = AICodeExecutor.getInstance();\n    this.monitor = PerformanceMonitor.getInstance();\n  }\n\n  static getInstance(): AIExecutionHandler {\n    if (!AIExecutionHandler.instance) {\n      AIExecutionHandler.instance = new AIExecutionHandler();\n    }\n    return AIExecutionHandler.instance;\n  }\n\n  async executeWithFallback(\n    userCode: string,\n    gameState: GameStateForAI,\n    playerId: number,\n    playerName: string\n  ): Promise<AIExecutionResult> {\n    try {\n      // Measure execution with performance monitoring\n      const [executionResult, metrics] = await this.monitor.measureExecution(\n        () => this.executor.executeUserAI(userCode, gameState, playerId),\n        { playerId }\n      );\n\n      if (executionResult.success && executionResult.result) {\n        // Log successful execution\n        console.log(`AI execution successful for player ${playerId} (${playerName})`, {\n          executionTime: executionResult.executionTime,\n          guess: executionResult.result,\n          logs: executionResult.logs\n        });\n\n        return {\n          playerId,\n          playerName,\n          guess: executionResult.result,\n          success: true,\n          executionTime: executionResult.executionTime || 0,\n          logs: executionResult.logs,\n          metrics\n        };\n      } else {\n        // Execution failed but was caught properly\n        throw new Error(executionResult.error || 'Unknown execution error');\n      }\n\n    } catch (error: any) {\n      console.error(`AI execution failed for player ${playerId} (${playerName}):`, error);\n\n      // Generate fallback guess\n      const fallbackGuess = this.generateFallbackGuess(gameState);\n      \n      const errorDetails = error.metrics ? {\n        error: error.error?.message || 'Unknown error',\n        executionTime: error.metrics.executionTime\n      } : {\n        error: error.message || 'Unknown error',\n        executionTime: 0\n      };\n\n      return {\n        playerId,\n        playerName,\n        guess: fallbackGuess,\n        success: false,\n        ...errorDetails,\n        metrics: error.metrics\n      };\n    }\n  }\n\n  private generateFallbackGuess(gameState: GameStateForAI): number[] {\n    const available: number[] = [];\n    \n    // Find all available keywords (not hints, not revealed wrong answers)\n    for (let i = 0; i < gameState.keywords.length; i++) {\n      if (!gameState.myHints.includes(i) && \n          !gameState.revealedWrongAnswers.includes(i)) {\n        available.push(i);\n      }\n    }\n\n    // Start with revealed answers\n    const guess = [...gameState.revealedAnswers];\n\n    // Fill remaining slots randomly\n    while (guess.length < gameState.answerCount && available.length > 0) {\n      const randomIndex = Math.floor(Math.random() * available.length);\n      const selected = available.splice(randomIndex, 1)[0];\n      \n      if (!guess.includes(selected)) {\n        guess.push(selected);\n      }\n    }\n\n    // If still not enough (edge case), fill with any valid indices\n    if (guess.length < gameState.answerCount) {\n      for (let i = 0; i < gameState.keywords.length && guess.length < gameState.answerCount; i++) {\n        if (!gameState.myHints.includes(i) && !guess.includes(i)) {\n          guess.push(i);\n        }\n      }\n    }\n\n    return guess.slice(0, gameState.answerCount);\n  }\n\n  // Get execution statistics for a player\n  getPlayerStats(playerId: number) {\n    return this.monitor.getPlayerStats(playerId);\n  }\n\n  // Get global execution statistics\n  getGlobalStats() {\n    return this.monitor.getGlobalStats();\n  }\n\n  // Validate AI code without executing\n  async validateCode(code: string): Promise<{ valid: boolean; errors?: string[]; warnings?: string[] }> {\n    const { AICodeValidator } = await import('./AICodeValidator');\n    \n    const result = AICodeValidator.validate(code);\n    \n    return {\n      valid: result.isValid,\n      errors: result.errors.length > 0 ? result.errors : undefined,\n      warnings: result.warnings\n    };\n  }\n\n  // Test AI code with a sample game state\n  async testAICode(\n    code: string,\n    sampleGameState?: GameStateForAI\n  ): Promise<{\n    success: boolean;\n    result?: number[];\n    error?: string;\n    executionTime?: number;\n    logs?: string[];\n  }> {\n    // Use provided game state or create a sample one\n    const testGameState = sampleGameState || this.createSampleGameState();\n    \n    try {\n      const result = await this.executor.executeUserAI(code, testGameState, -1); // -1 for test player ID\n      return result;\n    } catch (error: any) {\n      return {\n        success: false,\n        error: error.message || 'Test execution failed'\n      };\n    }\n  }\n\n  private createSampleGameState(): GameStateForAI {\n    return {\n      keywords: ['사과', '바나나', '체리', '포도', '망고', '복숭아', '딸기', '수박', '멜론', '키위'],\n      myHints: [1, 3], // 바나나, 포도는 정답이 아님\n      answerCount: 3,\n      previousGuesses: [\n        { playerId: 1, guess: [0, 2, 4], correctCount: 2 },\n        { playerId: 2, guess: [2, 5, 6], correctCount: 1 }\n      ],\n      revealedAnswers: [],\n      revealedWrongAnswers: [7], // 수박은 정답이 아님\n      currentTurn: 3,\n      timeLimit: 60\n    };\n  }\n}","import { BasePlayer } from './BasePlayer';\nimport { PlayerInfo } from '../types/PlayerTypes';\nimport { GameStateForAI } from '../types/GameTypes';\nimport { AIExecutionHandler } from '../sandbox/AIExecutionHandler';\n\nexport class CustomAIPlayer extends BasePlayer {\n  private aiCode: string;\n  private aiLanguage: 'javascript' | 'typescript';\n  private executionHandler: AIExecutionHandler;\n  \n  constructor(playerInfo: PlayerInfo) {\n    super(playerInfo);\n    this.aiCode = playerInfo.customCode || '';\n    this.aiLanguage = playerInfo.customLanguage || 'javascript';\n    this.executionHandler = AIExecutionHandler.getInstance();\n    this.ready = this.validateCode();\n  }\n\n  async makeGuess(gameState: GameStateForAI): Promise<number[]> {\n    try {\n      // Use the secure sandbox execution\n      const result = await this.executionHandler.executeWithFallback(\n        this.aiCode,\n        gameState,\n        this.playerInfo.id,\n        this.playerInfo.nickname\n      );\n\n      if (!result.success) {\n        console.error(`Custom AI execution failed for ${this.playerInfo.nickname}:`, result.error);\n        if (result.logs && result.logs.length > 0) {\n          console.log(`AI logs for ${this.playerInfo.nickname}:`, result.logs);\n        }\n      }\n\n      return result.guess;\n    } catch (error) {\n      console.error('Unexpected error in Custom AI execution:', error);\n      return this.fallbackStrategy(gameState);\n    }\n  }\n\n  private fallbackStrategy(gameState: GameStateForAI): number[] {\n    const availableIndices = Array.from(\n      { length: gameState.keywords.length }, \n      (_, i) => i\n    ).filter(idx => !gameState.revealedWrongAnswers.includes(idx));\n    \n    const selectedIndices = [...gameState.revealedAnswers];\n    \n    while (selectedIndices.length < gameState.answerCount && availableIndices.length > 0) {\n      const remaining = availableIndices.filter(idx => !selectedIndices.includes(idx));\n      if (remaining.length === 0) break;\n      \n      const randomIdx = remaining[Math.floor(Math.random() * remaining.length)];\n      selectedIndices.push(randomIdx);\n    }\n    \n    return selectedIndices;\n  }\n\n  private validateCode(): boolean {\n    if (!this.aiCode.trim()) return false;\n    \n    // Use the execution handler's validation\n    const validationPromise = this.executionHandler.validateCode(this.aiCode);\n    \n    // Since constructor can't be async, we'll do a simple check here\n    // and rely on full validation during execution\n    try {\n      // Basic syntax check\n      new Function(this.aiCode);\n      return true;\n    } catch (error) {\n      console.error('AI code validation error:', error);\n      return false;\n    }\n  }\n\n  async validateCodeAsync(): Promise<{ valid: boolean; errors?: string[]; warnings?: string[] }> {\n    return await this.executionHandler.validateCode(this.aiCode);\n  }\n\n  updateCode(code: string, language: 'javascript' | 'typescript'): void {\n    this.aiCode = code;\n    this.aiLanguage = language;\n    this.ready = this.validateCode();\n  }\n\n  getCode(): string {\n    return this.aiCode;\n  }\n\n  getLanguage(): 'javascript' | 'typescript' {\n    return this.aiLanguage;\n  }\n}","import { AIStrategy } from './AIStrategy';\nimport { GameStateForAI } from '../types/GameTypes';\n\nexport class EasyStrategy implements AIStrategy {\n  selectKeywords(gameState: GameStateForAI): number[] {\n    const { keywords, revealedAnswers, revealedWrongAnswers, answerCount, previousGuesses, myHints } = gameState;\n\n    // 1. 점수 맵 초기화\n    const scores = new Map<number, number>();\n    for (let i = 0; i < keywords.length; i++) {\n      scores.set(i, 0);\n    }\n\n    // 2. 추측 기록을 바탕으로 점수 계산\n    previousGuesses.forEach(guess => {\n      const { guess: guessedIndices, correctCount } = guess;\n      \n      if (correctCount === 0) {\n        // 정답이 하나도 없는 경우, 해당 키워드들은 오답일 확률이 높음\n        guessedIndices.forEach(idx => {\n          scores.set(idx, (scores.get(idx) || 0) - 5); // 큰 음수 점수 부여\n        });\n      } else {\n        // 정답이 있는 경우, 포함된 키워드들에 점수 부여\n        const points = correctCount / guessedIndices.length; // 정답률에 기반한 점수\n        guessedIndices.forEach(idx => {\n          scores.set(idx, (scores.get(idx) || 0) + points);\n        });\n      }\n    });\n\n    // 3. 사용 불가능한 키워드 제외\n    const excludedIndices = new Set([...revealedWrongAnswers, ...myHints]);\n    excludedIndices.forEach(idx => {\n      scores.delete(idx);\n    });\n\n    // 4. 최종 후보 선정\n    const selected = [...revealedAnswers];\n    \n    // 점수가 높은 순으로 후보 정렬\n    const candidates = Array.from(scores.entries())\n      .filter(([idx]) => !selected.includes(idx) && !excludedIndices.has(idx))\n      .sort((a, b) => b[1] - a[1]);\n\n    // 5. 정답 개수만큼 선택\n    const needed = answerCount - selected.length;\n    if (needed > 0) {\n      // 상위 후보 그룹에서 약간의 무작위성을 섞어 선택\n      const topCandidates = candidates.slice(0, Math.max(needed * 2, 10));\n      const shuffledTop = [...topCandidates].sort(() => Math.random() - 0.5);\n      \n      shuffledTop.slice(0, needed).forEach(candidate => {\n        selected.push(candidate[0]);\n      });\n    }\n    \n    // 만약 수가 부족하면 나머지에서 랜덤으로 채움\n    if (selected.length < answerCount) {\n        const remainingCandidates = candidates.filter(c => !selected.includes(c[0]));\n        const stillNeeded = answerCount - selected.length;\n        remainingCandidates.slice(0, stillNeeded).forEach(candidate => {\n            selected.push(candidate[0]);\n        });\n    }\n\n    return selected;\n  }\n\n  getStrategyName(): string {\n    return 'Easy AI';\n  }\n\n  getDescription(): string {\n    return '과거 추측의 정답률을 기반으로 키워드 점수를 매겨 추측합니다.';\n  }\n}\n","import { AIStrategy } from './AIStrategy';\nimport { GameStateForAI } from '../types/GameTypes';\n\nexport class MediumStrategy implements AIStrategy {\n  selectKeywords(gameState: GameStateForAI): number[] {\n    const { keywords, revealedAnswers, revealedWrongAnswers, answerCount, previousGuesses, myHints } = gameState;\n\n    const scores = new Map<number, number>();\n    for (let i = 0; i < keywords.length; i++) {\n      scores.set(i, 0);\n    }\n\n    // 1. 기본 점수 계산\n    previousGuesses.forEach(guess => {\n      const { guess: guessedIndices, correctCount } = guess;\n      const points = correctCount > 0 ? correctCount / guessedIndices.length : -1;\n      guessedIndices.forEach(idx => {\n        scores.set(idx, (scores.get(idx) || 0) + points);\n      });\n    });\n\n    // 2. 추측 비교를 통한 고급 추론\n    for (let i = 0; i < previousGuesses.length; i++) {\n      for (let j = i + 1; j < previousGuesses.length; j++) {\n        const guessA = previousGuesses[i];\n        const guessB = previousGuesses[j];\n\n        const setA = new Set(guessA.guess);\n        const setB = new Set(guessB.guess);\n\n        const diffA = guessA.guess.filter(x => !setB.has(x));\n        const diffB = guessB.guess.filter(x => !setA.has(x));\n        const correctDiff = guessA.correctCount - guessB.correctCount;\n\n        // Case 1: 결정적 단서 (1:1 차이)\n        if (diffA.length === 1 && diffB.length === 1) {\n          const keywordA = diffA[0];\n          const keywordB = diffB[0];\n          if (correctDiff === 1) {\n            scores.set(keywordA, (scores.get(keywordA) || 0) + 10); // A는 정답 확정\n            scores.set(keywordB, (scores.get(keywordB) || 0) - 10); // B는 오답 확정\n          } else if (correctDiff === -1) {\n            scores.set(keywordB, (scores.get(keywordB) || 0) + 10);\n            scores.set(keywordA, (scores.get(keywordA) || 0) - 10);\n          }\n        }\n        // Case 2: 강력한 힌트 (N:M 차이)\n        else if (diffA.length > 0 && diffB.length > 0 && Math.abs(correctDiff) > 0) {\n            // {D, E} 그룹이 {F, G} 그룹보다 정답이 N개 더 많다.\n            // 이 정보의 신뢰도 = 정답 차이 / 키워드 차이의 합\n            const hintStrength = Math.abs(correctDiff) / (diffA.length + diffB.length);\n            const bonusPoints = 3 * hintStrength; // 신뢰도에 비례한 보너스\n\n            if (correctDiff > 0) { // diffA 그룹이 더 정답에 가까움\n                diffA.forEach(idx => scores.set(idx, (scores.get(idx) || 0) + bonusPoints));\n                diffB.forEach(idx => scores.set(idx, (scores.get(idx) || 0) - bonusPoints));\n            } else { // diffB 그룹이 더 정답에 가까움\n                diffB.forEach(idx => scores.set(idx, (scores.get(idx) || 0) + bonusPoints));\n                diffA.forEach(idx => scores.set(idx, (scores.get(idx) || 0) - bonusPoints));\n            }\n        }\n      }\n    }\n\n    const excludedIndices = new Set([...revealedWrongAnswers, ...myHints, ...revealedAnswers]);\n    excludedIndices.forEach(idx => {\n      scores.delete(idx);\n    });\n\n    const candidates = Array.from(scores.entries()).sort((a, b) => b[1] - a[1]);\n\n    const selected = [...revealedAnswers];\n    const needed = answerCount - selected.length;\n\n    if (needed > 0) {\n        const finalCandidates = candidates.map(c => c[0]).filter(idx => !selected.includes(idx));\n        selected.push(...finalCandidates.slice(0, needed));\n    }\n\n    // 최종 선택지가 부족할 경우, 제외되지 않은 키워드 중에서 무작위로 추가\n    if (selected.length < answerCount) {\n        const allIndices = Array.from({length: keywords.length}, (_, i) => i);\n        const remainingCandidates = allIndices.filter(idx => !excludedIndices.has(idx) && !selected.includes(idx));\n        const shuffled = remainingCandidates.sort(() => Math.random() - 0.5);\n        const stillNeeded = answerCount - selected.length;\n        selected.push(...shuffled.slice(0, stillNeeded));\n    }\n\n    return selected;\n  }\n\n  getStrategyName(): string {\n    return 'Medium AI';\n  }\n\n  getDescription(): string {\n    return '추측들을 정교하게 비교하여 논리적인 단서를 찾고, 이를 기반으로 추측합니다.';\n  }\n}\n","import { AIStrategy } from './AIStrategy';\nimport { GameStateForAI } from '../types/GameTypes';\nimport { MediumStrategy } from './MediumStrategy'; // 폴백 전략으로 사용\n\nexport class HardStrategy implements AIStrategy {\n  private fallbackStrategy: AIStrategy;\n\n  constructor() {\n    // Hard 전략 실패 시 Medium 전략을 사용\n    this.fallbackStrategy = new MediumStrategy();\n  }\n\n  selectKeywords(gameState: GameStateForAI): number[] {\n    const { keywords, answerCount, previousGuesses, revealedAnswers, revealedWrongAnswers, myHints } = gameState;\n\n    // 1. 모든 제약조건을 만족하는 정답 후보(가설) 찾기\n    const validHypotheses = this.findValidHypotheses(gameState);\n\n    // 2. 상황에 따른 최종 추측 결정\n    if (validHypotheses.length === 1) {\n      // 정답을 찾은 경우: 유일한 후보를 제출\n      console.log('Hard AI: 정답을 찾았습니다!', validHypotheses[0]);\n      return validHypotheses[0];\n    } else if (validHypotheses.length > 1) {\n      // 여러 후보가 있는 경우: 정보 이득이 가장 큰 추측을 선택 (여기서는 첫번째 후보 선택으로 단순화)\n      console.log(`Hard AI: ${validHypotheses.length}개의 후보를 찾았습니다.`, validHypotheses);\n      return validHypotheses[0];\n    } else {\n      // 후보를 찾지 못한 경우: Medium 전략으로 폴백\n      console.log('Hard AI: 후보를 찾지 못해 Medium 전략으로 전환합니다.');\n      return this.fallbackStrategy.selectKeywords(gameState);\n    }\n  }\n\n  private findValidHypotheses(gameState: GameStateForAI): number[][] {\n    const { keywords, answerCount, previousGuesses, revealedAnswers, revealedWrongAnswers, myHints } = gameState;\n    const startTime = Date.now();\n\n    // CSP(제약 만족 문제)의 변수 도메인 설정\n    const mustBeAnswers = new Set(revealedAnswers);\n    const mustBeWrongs = new Set([...revealedWrongAnswers, ...myHints]);\n\n    // Medium 전략을 사용하여 가능성 높은 후보군 추리기 (계산량 감소)\n    const mediumStrategy = new MediumStrategy();\n    const mediumGuess = mediumStrategy.selectKeywords(gameState);\n    const combinedArray = Array.from(mustBeAnswers).concat(mediumGuess);\n    const potentialCandidates = new Set(combinedArray);\n    \n    const searchSpace = Array.from(potentialCandidates).filter(idx => !mustBeWrongs.has(idx));\n\n    const validHypotheses: number[][] = [];\n\n    // 조합 생성 및 검증 함수\n    const findCombinations = (startIndex: number, currentCombo: number[]) => {\n      // 시간 초과 방지\n      if (Date.now() - startTime > 500) return;\n      if (validHypotheses.length > 10) return; // 너무 많은 후보가 나오면 탐색 중지\n\n      if (currentCombo.length === answerCount) {\n        // 가설이 생성되면 모든 제약조건(과거 추측)을 만족하는지 검증\n        if (this.validateHypothesis(currentCombo, previousGuesses)) {\n          validHypotheses.push([...currentCombo]);\n        }\n        return;\n      }\n\n      if (startIndex >= searchSpace.length) return;\n\n      // 현재 키워드를 포함하는 경우\n      currentCombo.push(searchSpace[startIndex]);\n      findCombinations(startIndex + 1, currentCombo);\n      currentCombo.pop();\n\n      // 현재 키워드를 포함하지 않는 경우\n      // 남은 키워드 수로 정답을 채울 수 있는지 확인 (가지치기)\n      if (searchSpace.length - (startIndex + 1) >= answerCount - currentCombo.length) {\n        findCombinations(startIndex + 1, currentCombo);\n      }\n    };\n\n    findCombinations(0, []);\n    return validHypotheses;\n  }\n\n  /**\n   * 주어진 가설이 모든 과거 추측(제약조건)과 일치하는지 검증\n   * @param hypothesis - 검증할 정답 후보 배열 (예: [1, 5, 8, 12, 15])\n   * @param guesses - 과거 모든 추측 기록\n   */\n  private validateHypothesis(hypothesis: number[], guesses: GameStateForAI['previousGuesses']): boolean {\n    const hypothesisSet = new Set(hypothesis);\n\n    for (const guess of guesses) {\n      const intersectionSize = guess.guess.filter(g => hypothesisSet.has(g)).length;\n      if (intersectionSize !== guess.correctCount) {\n        // 단 하나의 추측이라도 모순되면, 이 가설은 유효하지 않음\n        return false;\n      }\n    }\n    // 모든 추측과 일치하면 유효한 가설\n    return true;\n  }\n\n  getStrategyName(): string {\n    return 'Hard AI';\n  }\n\n  getDescription(): string {\n    return '과거의 모든 추측을 논리적 제약조건으로 사용하여, 이를 만족하는 정답 후보를 찾아냅니다.';\n  }\n}\n","import { IPlayer } from './players/BasePlayer';\nimport { HumanPlayer } from './players/HumanPlayer';\nimport { BuiltInAIPlayer } from './players/BuiltInAIPlayer';\nimport { CustomAIPlayer } from './players/CustomAIPlayer';\nimport { PlayerInfo, PlayerType } from './types/PlayerTypes';\nimport { AIStrategy } from './strategies/AIStrategy';\nimport { EasyStrategy } from './strategies/EasyStrategy';\nimport { MediumStrategy } from './strategies/MediumStrategy';\nimport { HardStrategy } from './strategies/HardStrategy';\n\nexport class PlayerFactory {\n  private static strategyCache: Map<string, AIStrategy> = new Map();\n\n  static createPlayer(playerInfo: PlayerInfo): IPlayer {\n    switch (playerInfo.type) {\n      case 'human':\n        return new HumanPlayer(playerInfo);\n        \n      case 'built-in-ai':\n        const strategy = this.getStrategy(playerInfo.aiDifficulty || 'medium');\n        return new BuiltInAIPlayer(playerInfo, strategy);\n        \n      case 'custom-ai':\n        return new CustomAIPlayer(playerInfo);\n        \n      default:\n        throw new Error(`Unknown player type: ${playerInfo.type}`);\n    }\n  }\n\n  private static getStrategy(difficulty: 'easy' | 'medium' | 'hard'): AIStrategy {\n    if (!this.strategyCache.has(difficulty)) {\n      let strategy: AIStrategy;\n      \n      switch (difficulty) {\n        case 'easy':\n          strategy = new EasyStrategy();\n          break;\n        case 'medium':\n          strategy = new MediumStrategy();\n          break;\n        case 'hard':\n          strategy = new HardStrategy();\n          break;\n        default:\n          strategy = new MediumStrategy();\n      }\n      \n      this.strategyCache.set(difficulty, strategy);\n    }\n    \n    return this.strategyCache.get(difficulty)!;\n  }\n\n  static createBuiltInAIOpponent(\n    id: number, \n    difficulty: 'easy' | 'medium' | 'hard' = 'medium'\n  ): IPlayer {\n    const playerInfo: PlayerInfo = {\n      id,\n      nickname: `AI (${difficulty === 'easy' ? '쉬움' : difficulty === 'medium' ? '보통' : '어려움'})`,\n      type: 'built-in-ai',\n      aiDifficulty: difficulty\n    };\n    \n    return this.createPlayer(playerInfo);\n  }\n\n  static isHumanPlayer(player: IPlayer): player is HumanPlayer {\n    return player instanceof HumanPlayer;\n  }\n\n  static isBuiltInAIPlayer(player: IPlayer): player is BuiltInAIPlayer {\n    return player instanceof BuiltInAIPlayer;\n  }\n\n  static isCustomAIPlayer(player: IPlayer): player is CustomAIPlayer {\n    return player instanceof CustomAIPlayer;\n  }\n}","import { IPlayer } from './players/BasePlayer';\nimport { HumanPlayer } from './players/HumanPlayer';\nimport { GameContext, GameStateForAI, TurnResult } from './types/GameTypes';\nimport { PlayerFactory } from './PlayerFactory';\n\nexport interface GameManagerConfig {\n  keywordPoolSize: number;\n  answerCount: number;\n  hintCount: number;\n  timeLimit: number;\n  maxTurns?: number;\n}\n\nexport class GameManager {\n  private players: IPlayer[] = [];\n  private currentPlayerIndex: number = 0;\n  private gameContext: GameContext;\n  private config: GameManagerConfig;\n  private isGameRunning: boolean = false;\n  private turnTimer?: NodeJS.Timeout;\n  private turnStartTime: number = 0;\n  \n  private onTurnStart?: (player: IPlayer) => void;\n  private onTurnEnd?: (result: TurnResult) => void;\n  private onGameEnd?: (winner?: IPlayer) => void;\n  private onTimerTick?: (remainingTime: number) => void;\n  private onAIThinking?: (thinking: boolean) => void;\n\n  constructor(config: GameManagerConfig) {\n    this.config = config;\n    this.gameContext = {\n      keywords: [],\n      answers: [],\n      playerHints: {},\n      currentTurn: 0,\n      turnHistory: [],\n      revealedAnswers: [],\n      revealedWrongAnswers: []\n    };\n  }\n\n  addPlayer(player: IPlayer): void {\n    if (this.isGameRunning) {\n      throw new Error('Cannot add players while game is running');\n    }\n    this.players.push(player);\n  }\n\n  setPlayers(players: IPlayer[]): void {\n    if (this.isGameRunning) {\n      throw new Error('Cannot set players while game is running');\n    }\n    this.players = players;\n  }\n\n  getCurrentPlayer(): IPlayer | null {\n    if (!this.isGameRunning || this.players.length === 0) return null;\n    return this.players[this.currentPlayerIndex];\n  }\n\n  getPlayers(): IPlayer[] {\n    return [...this.players];\n  }\n\n  getGameContext(): GameContext {\n    return { ...this.gameContext };\n  }\n\n  async startGame(keywords: string[], answers: number[], playerHints: { [playerId: number]: number[] }): Promise<void> {\n    if (this.players.length === 0) {\n      throw new Error('No players added to the game');\n    }\n\n    this.gameContext = {\n      keywords,\n      answers,\n      playerHints,\n      currentTurn: 1,\n      turnHistory: [],\n      revealedAnswers: [],\n      revealedWrongAnswers: []\n    };\n\n    this.currentPlayerIndex = 0;\n    this.isGameRunning = true;\n\n    await this.startNextTurn();\n  }\n\n  private async startNextTurn(): Promise<void> {\n    if (!this.isGameRunning) return;\n\n    const currentPlayer = this.getCurrentPlayer();\n    if (!currentPlayer) return;\n\n    // 턴 시작 시간 기록\n    this.turnStartTime = Date.now();\n\n    if (this.onTurnStart) {\n      this.onTurnStart(currentPlayer);\n    }\n\n    currentPlayer.onTurnStart?.();\n\n    if (PlayerFactory.isHumanPlayer(currentPlayer)) {\n      this.startTurnTimer();\n      // 인간 플레이어의 경우에도 makeGuess를 호출하여 Promise를 생성\n      const gameStateForAI = this.createGameStateForAI(currentPlayer);\n      currentPlayer.makeGuess(gameStateForAI).then(guess => {\n        this.processTurn(guess);\n      });\n    } else {\n      // AI 플레이어의 경우에도 타이머 시작\n      this.startTurnTimer();\n      \n      // AI 플레이어의 경우, 사람처럼 보이도록 약간의 딜레이 추가\n      if (this.onAIThinking) {\n        this.onAIThinking(true);\n      }\n      \n      const thinkingTime = Math.random() * 2000 + 1500; // 1.5초 ~ 3.5초 사이의 랜덤 시간\n      \n      await new Promise(resolve => setTimeout(resolve, thinkingTime));\n      \n      const gameStateForAI = this.createGameStateForAI(currentPlayer);\n      const guess = await currentPlayer.makeGuess(gameStateForAI);\n      \n      if (this.onAIThinking) {\n        this.onAIThinking(false);\n      }\n      \n      await this.processTurn(guess);\n    }\n  }\n\n  private startTurnTimer(): void {\n    let remainingTime = this.config.timeLimit;\n    \n    if (this.onTimerTick) {\n      this.onTimerTick(remainingTime);\n    }\n\n    this.turnTimer = setInterval(() => {\n      remainingTime--;\n      \n      if (this.onTimerTick) {\n        this.onTimerTick(remainingTime);\n      }\n\n      if (remainingTime <= 0) {\n        this.handleTimeout();\n      }\n    }, 1000);\n  }\n\n  private stopTurnTimer(): void {\n    if (this.turnTimer) {\n      clearInterval(this.turnTimer);\n      this.turnTimer = undefined;\n    }\n  }\n\n  private handleTimeout(): void {\n    this.stopTurnTimer();\n    \n    const currentPlayer = this.getCurrentPlayer();\n    if (!currentPlayer) return;\n    \n    const availableIndices = Array.from(\n      { length: this.gameContext.keywords.length },\n      (_, i) => i\n    ).filter(idx => !this.gameContext.revealedWrongAnswers.includes(idx));\n    \n    const shuffled = [...availableIndices].sort(() => Math.random() - 0.5);\n    const autoGuess = shuffled.slice(0, this.config.answerCount);\n    \n    if (PlayerFactory.isHumanPlayer(currentPlayer)) {\n      // HumanPlayer의 경우 submitGuess를 통해 Promise를 resolve\n      currentPlayer.submitGuess(autoGuess);\n    } else {\n      this.processTurn(autoGuess);\n    }\n  }\n\n  async submitHumanGuess(indices: number[]): Promise<void> {\n    const currentPlayer = this.getCurrentPlayer();\n    \n    if (!currentPlayer || !PlayerFactory.isHumanPlayer(currentPlayer)) {\n      throw new Error('Current player is not a human player');\n    }\n\n    this.stopTurnTimer();\n    currentPlayer.submitGuess(indices);\n    // processTurn은 makeGuess Promise가 resolve될 때 자동으로 호출됨\n  }\n\n  private async processTurn(guess: number[]): Promise<void> {\n    const currentPlayer = this.getCurrentPlayer();\n    if (!currentPlayer) return;\n\n    // 타이머 중지 (중요: AI 플레이어도 타이머를 사용하므로)\n    this.stopTurnTimer();\n\n    const correctCount = guess.filter(idx => \n      this.gameContext.answers.includes(idx)\n    ).length;\n\n    const isWinner = correctCount === this.config.answerCount && \n                     guess.every(idx => this.gameContext.answers.includes(idx));\n\n    // 실제 사용 시간 계산\n    const actualTimeUsed = Math.round((Date.now() - this.turnStartTime) / 1000);\n    \n    const turnResult: TurnResult = {\n      playerId: currentPlayer.getInfo().id,\n      playerName: currentPlayer.getInfo().nickname,\n      guess: [...guess],\n      guessKeywords: guess.map(idx => this.gameContext.keywords[idx]),\n      correctCount,\n      turnNumber: this.gameContext.currentTurn,\n      timeUsed: actualTimeUsed\n    };\n\n    this.gameContext.turnHistory.push(turnResult);\n    \n    currentPlayer.onTurnEnd?.({\n      selectedIndices: guess,\n      timeUsed: turnResult.timeUsed,\n      timestamp: Date.now()\n    });\n\n    if (this.onTurnEnd) {\n      this.onTurnEnd(turnResult);\n    }\n\n    if (isWinner) {\n      this.endGame(currentPlayer);\n    } else if (this.config.maxTurns && this.gameContext.currentTurn >= this.config.maxTurns) {\n      this.endGame();\n    } else {\n      this.gameContext.currentTurn++;\n      this.currentPlayerIndex = (this.currentPlayerIndex + 1) % this.players.length;\n      await this.startNextTurn();\n    }\n  }\n\n  private createGameStateForAI(player: IPlayer): GameStateForAI {\n    const playerInfo = player.getInfo();\n    const myHints = this.gameContext.playerHints[playerInfo.id] || [];\n    \n    const previousGuesses = this.gameContext.turnHistory.map(turn => ({\n      playerId: turn.playerId,\n      guess: turn.guess,\n      correctCount: turn.correctCount\n    }));\n\n    return {\n      keywords: [...this.gameContext.keywords],\n      myHints,\n      previousGuesses,\n      revealedAnswers: [...this.gameContext.revealedAnswers],\n      revealedWrongAnswers: [...this.gameContext.revealedWrongAnswers],\n      answerCount: this.config.answerCount,\n      currentTurn: this.gameContext.currentTurn,\n      maxTurns: this.config.maxTurns,\n      timeLimit: this.config.timeLimit\n    };\n  }\n\n  revealAnswer(): boolean {\n    const unrevealedAnswers = this.gameContext.answers.filter(\n      ans => !this.gameContext.revealedAnswers.includes(ans)\n    );\n    \n    if (unrevealedAnswers.length === 0) return false;\n    \n    const randomAnswer = unrevealedAnswers[\n      Math.floor(Math.random() * unrevealedAnswers.length)\n    ];\n    \n    this.gameContext.revealedAnswers.push(randomAnswer);\n    return true;\n  }\n\n  revealWrongAnswer(): boolean {\n    const wrongAnswers = Array.from(\n      { length: this.gameContext.keywords.length },\n      (_, i) => i\n    ).filter(idx => \n      !this.gameContext.answers.includes(idx) && \n      !this.gameContext.revealedWrongAnswers.includes(idx)\n    );\n    \n    if (wrongAnswers.length === 0) return false;\n    \n    const randomWrong = wrongAnswers[\n      Math.floor(Math.random() * wrongAnswers.length)\n    ];\n    \n    this.gameContext.revealedWrongAnswers.push(randomWrong);\n    return true;\n  }\n\n  private endGame(winner?: IPlayer): void {\n    this.stopTurnTimer();\n    this.isGameRunning = false;\n    \n    if (this.onGameEnd) {\n      this.onGameEnd(winner);\n    }\n  }\n\n  stopGame(): void {\n    this.stopTurnTimer();\n    this.isGameRunning = false;\n    this.players.forEach(player => player.reset());\n  }\n\n  isRunning(): boolean {\n    return this.isGameRunning;\n  }\n\n  setEventHandlers(handlers: {\n    onTurnStart?: (player: IPlayer) => void;\n    onTurnEnd?: (result: TurnResult) => void;\n    onGameEnd?: (winner?: IPlayer) => void;\n    onTimerTick?: (remainingTime: number) => void;\n    onAIThinking?: (thinking: boolean) => void;\n  }): void {\n    this.onTurnStart = handlers.onTurnStart;\n    this.onTurnEnd = handlers.onTurnEnd;\n    this.onGameEnd = handlers.onGameEnd;\n    this.onTimerTick = handlers.onTimerTick;\n    this.onAIThinking = handlers.onAIThinking;\n  }\n}","import React, { useState, useEffect, useRef } from 'react';\nimport './DeductionGame.css';\nimport { GameManager } from './ai/GameManager';\nimport { PlayerFactory } from './ai/PlayerFactory';\nimport { IPlayer } from './ai/players/BasePlayer';\nimport { HumanPlayer } from './ai/players/HumanPlayer';\nimport { PlayerInfo, PlayerType } from './ai/types/PlayerTypes';\n\ntype GameScreen = 'mode-selection' | 'difficulty-selection' | 'player-setup' | 'game-config' | 'game-preparation' | 'game';\ntype GameMode = 'solo' | 'multi';\n\ninterface GameConfig {\n  keywordPoolSize: number;\n  answerCount: number;\n  hintCount: number;\n  timeLimit: number;\n  maxTurns?: number;\n  difficulty: 'beginner' | 'intermediate' | 'advanced' | 'custom';\n}\n\ninterface GameState {\n  keywords: string[];\n  answers: number[];\n  playerHints: { [playerId: number]: number[] };\n  isReady: boolean;\n  currentTurn: number;\n  turnHistory: TurnResult[];\n  gameStatus: 'playing' | 'finished';\n  winner?: number;\n  revealedAnswers: number[];\n  revealedWrongAnswers: number[];\n  hintsViewed: { [playerId: number]: boolean };\n}\n\ninterface TurnResult {\n  playerId: number;\n  playerName: string;\n  guess: number[];\n  guessKeywords: string[];\n  correctCount: number;\n  turnNumber: number;\n  timeUsed: number;\n}\n\ninterface PlayerConfig {\n  id: number;\n  nickname: string;\n  type: PlayerType;\n  aiCode?: string;\n  aiLanguage?: 'javascript' | 'typescript';\n  aiDifficulty?: 'easy' | 'medium' | 'hard';\n}\n\nconst DeductionGame: React.FC = () => {\n  const [currentScreen, setCurrentScreen] = useState<GameScreen>('mode-selection');\n  const [gameMode, setGameMode] = useState<GameMode>('solo');\n  const [playerCount, setPlayerCount] = useState(2);\n  const [players, setPlayers] = useState<PlayerConfig[]>([]);\n  const [gameConfig, setGameConfig] = useState<GameConfig>({\n    keywordPoolSize: 50,\n    answerCount: 5,\n    hintCount: 5,\n    timeLimit: 60,\n    maxTurns: 20,\n    difficulty: 'intermediate'\n  });\n  const [gameState, setGameState] = useState<GameState>({\n    keywords: [],\n    answers: [],\n    playerHints: {},\n    isReady: false,\n    currentTurn: 0,\n    turnHistory: [],\n    gameStatus: 'playing',\n    revealedAnswers: [],\n    revealedWrongAnswers: [],\n    hintsViewed: {}\n  });\n  const [preparationStep, setPreparationStep] = useState(0);\n  const [selectedKeywords, setSelectedKeywords] = useState<number[]>([]);\n  const [timeRemaining, setTimeRemaining] = useState(0);\n  const [isMyTurn, setIsMyTurn] = useState(false);\n  const [hintViewingPhase, setHintViewingPhase] = useState(false);\n  const [currentViewingPlayer, setCurrentViewingPlayer] = useState(0);\n  const [timerIntervalId, setTimerIntervalId] = useState<NodeJS.Timeout | null>(null);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [aiTimeoutId, setAiTimeoutId] = useState<NodeJS.Timeout | null>(null);\n  const [soloDifficulty, setSoloDifficulty] = useState<'easy' | 'medium' | 'hard'>('medium');\n  const [isAIThinking, setIsAIThinking] = useState(false);\n  const gameManagerRef = useRef<GameManager | null>(null);\n  const [turnStartTime, setTurnStartTime] = useState<number>(0);\n  const [codeEditorModal, setCodeEditorModal] = useState<{ isOpen: boolean; playerId: number | null }>({ \n    isOpen: false, \n    playerId: null \n  });\n\n  const handleModeSelect = (mode: GameMode) => {\n    setGameMode(mode);\n    if (mode === 'solo') {\n      // 솔로 모드는 난이도 선택 화면으로\n      setCurrentScreen('difficulty-selection');\n    } else {\n      // 멀티 모드는 플레이어 수 선택 후 설정\n      setPlayers([]);\n      setCurrentScreen('player-setup');\n    }\n  };\n\n  const handleDifficultySelect = (difficulty: 'easy' | 'medium' | 'hard') => {\n    setSoloDifficulty(difficulty);\n    setPlayerCount(2);\n    setPlayers([\n      { id: 1, nickname: '', type: 'human', aiLanguage: 'javascript' },\n      { id: 2, nickname: `AI (${difficulty === 'easy' ? '쉬움' : difficulty === 'medium' ? '보통' : '어려움'})`, type: 'built-in-ai', aiDifficulty: difficulty }\n    ]);\n    setCurrentScreen('player-setup');\n  };\n\n  const handlePlayerCountSelect = (count: number) => {\n    setPlayerCount(count);\n    const newPlayers: PlayerConfig[] = [];\n    for (let i = 1; i <= count; i++) {\n      newPlayers.push({\n        id: i,\n        nickname: '',\n        type: 'human',\n        aiLanguage: 'javascript'\n      });\n    }\n    setPlayers(newPlayers);\n  };\n\n  const updatePlayer = (id: number, updates: Partial<PlayerConfig>) => {\n    setPlayers(prev => prev.map(player => \n      player.id === id ? { ...player, ...updates } : player\n    ));\n  };\n\n  const canStartGame = () => {\n    return players.every(player => {\n      if (!player.nickname.trim()) return false;\n      if (player.type === 'custom-ai' && !player.aiCode?.trim()) return false;\n      return true;\n    });\n  };\n\n  const handleStartGame = () => {\n    console.log('Moving to game config with players:', players);\n    setCurrentScreen('game-config');\n  };\n\n  const handleConfigComplete = () => {\n    console.log('Game config complete:', gameConfig);\n    setPreparationStep(0);\n    setCurrentScreen('game-preparation');\n    initializeGame();\n  };\n\n  // 키워드 풀 (실제로는 더 많은 키워드가 필요)\n  const keywordCategories = {\n    animals: ['사자', '호랑이', '코끼리', '기린', '원숭이', '코알라', '판다', '펭귄', '독수리', '상어', '고래', '돌고래', '토끼', '고양이', '강아지', '말', '소', '돼지', '양', '염소'],\n    foods: ['피자', '햄버거', '스파게티', '초밥', '김치찌개', '불고기', '치킨', '라면', '떡볶이', '김밥', '샐러드', '스테이크', '카레', '우동', '냉면', '비빔밥', '갈비', '삼겹살', '회', '족발'],\n    objects: ['컴퓨터', '스마트폰', '자동차', '비행기', '기차', '자전거', '책', '연필', '가방', '시계', '안경', '모자', '신발', '옷', '침대', '의자', '책상', '냉장고', '세탁기', '텔레비전'],\n    places: ['학교', '병원', '은행', '카페', '식당', '공원', '해변', '산', '도서관', '박물관', '영화관', '쇼핑몰', '시장', '교회', '지하철역', '공항', '호텔', '집', '회사', '체육관'],\n    actions: ['걷기', '뛰기', '수영', '춤추기', '노래하기', '요리하기', '공부하기', '운전하기', '그림그리기', '글쓰기', '읽기', '잠자기', '먹기', '마시기', '웃기', '울기', '생각하기', '말하기', '듣기', '보기']\n  };\n\n  const generateKeywords = (size: number): string[] => {\n    const allKeywords = Object.values(keywordCategories).flat();\n    const shuffled = [...allKeywords].sort(() => Math.random() - 0.5);\n    return shuffled.slice(0, size);\n  };\n\n  const initializeGame = async () => {\n    // 1단계: 키워드 생성\n    setPreparationStep(1);\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    const keywords = generateKeywords(gameConfig.keywordPoolSize);\n    \n    // 2단계: 정답 선택\n    setPreparationStep(2);\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    const answerIndices: number[] = [];\n    const shuffledIndices = Array.from({length: keywords.length}, (_, i) => i).sort(() => Math.random() - 0.5);\n    for (let i = 0; i < gameConfig.answerCount; i++) {\n      answerIndices.push(shuffledIndices[i]);\n    }\n    \n    // 3단계: 힌트 배포\n    setPreparationStep(3);\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    const playerHints: { [playerId: number]: number[] } = {};\n    const nonAnswerIndices = shuffledIndices.filter(i => !answerIndices.includes(i));\n    \n    players.forEach(player => {\n      const hints: number[] = [];\n      const availableHints = [...nonAnswerIndices].sort(() => Math.random() - 0.5);\n      for (let i = 0; i < gameConfig.hintCount && i < availableHints.length; i++) {\n        hints.push(availableHints[i]);\n      }\n      playerHints[player.id] = hints;\n    });\n    \n    // 4단계: 준비 완료\n    setPreparationStep(4);\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    setGameState({\n      keywords,\n      answers: answerIndices,\n      playerHints,\n      isReady: true,\n      currentTurn: 0,  // GameManager가 관리하므로 0으로 시작\n      turnHistory: [],\n      gameStatus: 'playing',\n      revealedAnswers: [],\n      revealedWrongAnswers: [],\n      hintsViewed: {}\n    });\n    \n    setPreparationStep(5); // 완료 상태\n  };\n\n\n  const startActualGame = () => {\n    // GameManager 초기화\n    const manager = new GameManager({\n      keywordPoolSize: gameConfig.keywordPoolSize,\n      answerCount: gameConfig.answerCount,\n      hintCount: gameConfig.hintCount,\n      timeLimit: gameConfig.timeLimit,\n      maxTurns: gameConfig.maxTurns\n    });\n\n    // 플레이어 생성\n    const gamePlayers: IPlayer[] = players.map(config => {\n      const playerInfo: PlayerInfo = {\n        id: config.id,\n        nickname: config.nickname,\n        type: config.type,\n        aiDifficulty: config.aiDifficulty,\n        customCode: config.aiCode,\n        customLanguage: config.aiLanguage\n      };\n      return PlayerFactory.createPlayer(playerInfo);\n    });\n\n    manager.setPlayers(gamePlayers);\n\n    // 이벤트 핸들러 설정\n    manager.setEventHandlers({\n      onTurnStart: (player) => {\n        const playerInfo = player.getInfo();\n        setIsMyTurn(playerInfo.type === 'human');\n        // 턴 시작 시간 기록\n        setTurnStartTime(Date.now());\n        // GameManager의 currentTurn과 동기화\n        const context = manager.getGameContext();\n        setGameState(prev => ({\n          ...prev,\n          currentTurn: context.currentTurn\n        }));\n      },\n      onTurnEnd: (result) => {\n        setIsAIThinking(false);\n        setGameState(prev => ({\n          ...prev,\n          turnHistory: [...prev.turnHistory, result]\n        }));\n      },\n      onGameEnd: (winner) => {\n        if (winner) {\n          const winnerInfo = winner.getInfo();\n          setGameState(prev => ({\n            ...prev,\n            gameStatus: 'finished',\n            winner: winnerInfo.id\n          }));\n        } else {\n          setGameState(prev => ({\n            ...prev,\n            gameStatus: 'finished'\n          }));\n        }\n      },\n      onTimerTick: (remainingTime) => {\n        setTimeRemaining(remainingTime);\n      },\n      onAIThinking: (thinking) => {\n        setIsAIThinking(thinking);\n      }\n    });\n\n    gameManagerRef.current = manager;\n\n    setHintViewingPhase(true);\n    setCurrentViewingPlayer(1);\n    setCurrentScreen('game');\n  };\n\n  const startTimer = () => {\n    // GameManager를 사용하는 경우 타이머를 직접 관리하지 않음\n    if (gameManagerRef.current) {\n      return;\n    }\n    \n    // 기존 타이머가 있다면 먼저 정리\n    clearTimer();\n    \n    // 턴 시작 시간 기록\n    setTurnStartTime(Date.now());\n    setTimeRemaining(gameConfig.timeLimit);\n    \n    const intervalId = setInterval(() => {\n      setTimeRemaining(prev => {\n        if (prev <= 1) {\n          // 타이머를 먼저 정리하고 handleTimeUp 호출\n          clearInterval(intervalId);\n          setTimerIntervalId(null);\n          // setTimeout으로 다음 프레임에서 실행하여 상태 업데이트 충돌 방지\n          setTimeout(() => {\n            handleTimeUp();\n          }, 0);\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n    \n    setTimerIntervalId(intervalId);\n  };\n\n  const clearTimer = () => {\n    if (timerIntervalId) {\n      clearInterval(timerIntervalId);\n      setTimerIntervalId(null);\n    }\n  };\n\n  const handleTimeUp = () => {\n    // 시간 초과시 랜덤하게 키워드 선택하여 자동 제출\n    const availableKeywords = gameState.keywords\n      .map((_, index) => index)\n      .filter(index => !gameState.revealedWrongAnswers.includes(index));\n    \n    const shuffled = [...availableKeywords].sort(() => Math.random() - 0.5);\n    const autoSelection = shuffled.slice(0, gameConfig.answerCount);\n    \n    setSelectedKeywords(autoSelection);\n    \n    // 잠시 후 자동 제출\n    setTimeout(() => {\n      submitGuessWithSelection(autoSelection);\n    }, 500);\n  };\n\n  const exitGame = () => {\n    clearTimer();\n    // AI 타임아웃도 정리\n    if (aiTimeoutId) {\n      clearTimeout(aiTimeoutId);\n      setAiTimeoutId(null);\n    }\n    // GameManager 정리\n    if (gameManagerRef.current) {\n      gameManagerRef.current.stopGame();\n      gameManagerRef.current = null;\n    }\n    setCurrentScreen('mode-selection');\n    // 게임 상태 초기화\n    setGameState({\n      keywords: [],\n      answers: [],\n      playerHints: {},\n      isReady: false,\n      currentTurn: 0,\n      turnHistory: [],\n      gameStatus: 'playing',\n      revealedAnswers: [],\n      revealedWrongAnswers: [],\n      hintsViewed: {}\n    });\n    setSelectedKeywords([]);\n    setTimeRemaining(0);\n    setIsMyTurn(false);\n    setIsAIThinking(false);\n    setHintViewingPhase(false);\n    setCurrentViewingPlayer(0);\n    setIsSubmitting(false);\n  };\n\n\n  const revealAnswerHint = () => {\n    if (gameManagerRef.current) {\n      const success = gameManagerRef.current.revealAnswer();\n      if (success) {\n        const context = gameManagerRef.current.getGameContext();\n        setGameState(prev => ({\n          ...prev,\n          revealedAnswers: context.revealedAnswers\n        }));\n      }\n    } else {\n      const unrevealedAnswers = gameState.answers.filter(ans => !gameState.revealedAnswers.includes(ans));\n      if (unrevealedAnswers.length > 0) {\n        const randomAnswer = unrevealedAnswers[Math.floor(Math.random() * unrevealedAnswers.length)];\n        setGameState(prev => ({\n          ...prev,\n          revealedAnswers: [...prev.revealedAnswers, randomAnswer]\n        }));\n      }\n    }\n  };\n\n  const revealWrongHint = () => {\n    if (gameManagerRef.current) {\n      const success = gameManagerRef.current.revealWrongAnswer();\n      if (success) {\n        const context = gameManagerRef.current.getGameContext();\n        setGameState(prev => ({\n          ...prev,\n          revealedWrongAnswers: context.revealedWrongAnswers\n        }));\n      }\n    } else {\n      const wrongAnswers = gameState.keywords\n        .map((_, index) => index)\n        .filter(index => !gameState.answers.includes(index) && !gameState.revealedWrongAnswers.includes(index));\n      \n      if (wrongAnswers.length > 0) {\n        const randomWrong = wrongAnswers[Math.floor(Math.random() * wrongAnswers.length)];\n        setGameState(prev => ({\n          ...prev,\n          revealedWrongAnswers: [...prev.revealedWrongAnswers, randomWrong]\n        }));\n      }\n    }\n  };\n\n  const toggleKeywordSelection = (keywordIndex: number) => {\n    setSelectedKeywords(prev => {\n      if (prev.includes(keywordIndex)) {\n        return prev.filter(index => index !== keywordIndex);\n      } else if (prev.length < gameConfig.answerCount) {\n        return [...prev, keywordIndex];\n      }\n      return prev;\n    });\n  };\n\n  const submitGuess = async () => {\n    if (selectedKeywords.length !== gameConfig.answerCount || isSubmitting) return;\n    \n    if (gameManagerRef.current) {\n      setIsSubmitting(true);\n      try {\n        await gameManagerRef.current.submitHumanGuess(selectedKeywords);\n        setSelectedKeywords([]);\n      } catch (error) {\n        console.error('Failed to submit guess:', error);\n      } finally {\n        setIsSubmitting(false);\n      }\n    } else {\n      submitGuessWithSelection(selectedKeywords);\n    }\n  };\n\n  const submitGuessWithSelection = (selection: number[]) => {\n    // GameManager를 사용하는 경우 이 함수를 사용하지 않음\n    if (gameManagerRef.current) return;\n    \n    if (isSubmitting) return;\n    \n    setIsSubmitting(true);\n    \n    // 타이머 정리 (새로운 타이머 시작 전에)\n    clearTimer();\n\n    const correctCount = selection.filter(index => \n      gameState.answers.includes(index)\n    ).length;\n\n    const isWinner = correctCount === gameConfig.answerCount && \n                     selection.every(index => gameState.answers.includes(index));\n\n    const currentPlayerId = ((gameState.currentTurn - 1) % players.length) + 1;\n    const currentPlayer = players.find(p => p.id === currentPlayerId);\n\n    // 실제 사용 시간 계산\n    const actualTimeUsed = turnStartTime ? Math.round((Date.now() - turnStartTime) / 1000) : gameConfig.timeLimit - timeRemaining;\n    \n    const turnResult: TurnResult = {\n      playerId: currentPlayerId,\n      playerName: currentPlayer?.nickname || `플레이어 ${currentPlayerId}`,\n      guess: [...selection],\n      guessKeywords: selection.map(index => gameState.keywords[index]),\n      correctCount,\n      turnNumber: gameState.currentTurn,\n      timeUsed: actualTimeUsed\n    };\n\n    // 최대 턴 수 확인\n    const isMaxTurnsReached = gameConfig.maxTurns && gameState.currentTurn >= gameConfig.maxTurns;\n    \n    setGameState(prev => ({\n      ...prev,\n      turnHistory: [...prev.turnHistory, turnResult],\n      currentTurn: prev.currentTurn + 1,\n      gameStatus: isWinner ? 'finished' : (isMaxTurnsReached ? 'finished' : 'playing'),\n      winner: isWinner ? currentPlayerId : undefined\n    }));\n\n    setSelectedKeywords([]);\n    \n    if (!isWinner && !isMaxTurnsReached) {\n      // 다음 턴을 위해 타이머 재시작\n      setTimeout(() => {\n        startTimer();\n      }, 100);\n    }\n    \n    // 제출 상태 리셋\n    setTimeout(() => {\n      setIsSubmitting(false);\n    }, 500);\n  };\n\n  const getCurrentPlayer = () => {\n    if (gameManagerRef.current) {\n      const currentPlayer = gameManagerRef.current.getCurrentPlayer();\n      if (currentPlayer) {\n        const playerInfo = currentPlayer.getInfo();\n        return players.find(p => p.id === playerInfo.id);\n      }\n    }\n    const currentPlayerId = ((gameState.currentTurn - 1) % players.length) + 1;\n    return players.find(p => p.id === currentPlayerId);\n  };\n\n  const isGameOver = () => {\n    return gameState.gameStatus === 'finished' || \n           (gameConfig.maxTurns && gameState.currentTurn > gameConfig.maxTurns);\n  };\n\n  const difficultyPresets = {\n    beginner: { keywordPoolSize: 30, answerCount: 3, hintCount: 5, timeLimit: 90, maxTurns: 15 },\n    intermediate: { keywordPoolSize: 50, answerCount: 5, hintCount: 5, timeLimit: 60, maxTurns: 20 },\n    advanced: { keywordPoolSize: 80, answerCount: 7, hintCount: 4, timeLimit: 45, maxTurns: 25 }\n  };\n\n  const applyPreset = (difficulty: 'beginner' | 'intermediate' | 'advanced') => {\n    const preset = difficultyPresets[difficulty];\n    setGameConfig({ ...preset, difficulty });\n  };\n\n  const updateGameConfig = (updates: Partial<GameConfig>) => {\n    setGameConfig(prev => ({ ...prev, ...updates, difficulty: 'custom' }));\n  };\n\n  // 컴포넌트 언마운트 시 타이머 정리\n  useEffect(() => {\n    return () => {\n      clearTimer();\n      if (aiTimeoutId) {\n        clearTimeout(aiTimeoutId);\n      }\n    };\n  }, []);\n\n  const renderCodeEditorModal = () => {\n    if (!codeEditorModal.isOpen || !codeEditorModal.playerId) return null;\n    \n    const player = players.find(p => p.id === codeEditorModal.playerId);\n    if (!player) return null;\n\n    return (\n      <div className=\"modal-overlay\" onClick={() => setCodeEditorModal({ isOpen: false, playerId: null })}>\n        <div className=\"modal-content code-editor-modal\" onClick={(e) => e.stopPropagation()}>\n          <div className=\"modal-header\">\n            <h3>{player.nickname} AI 코드 에디터</h3>\n            <button \n              className=\"modal-close\"\n              onClick={() => setCodeEditorModal({ isOpen: false, playerId: null })}\n            >\n              ×\n            </button>\n          </div>\n          \n          <div className=\"code-editor-container\">\n            <div className=\"editor-toolbar\">\n              <div className=\"editor-left\">\n                <span className=\"editor-info\">코드 작성</span>\n                <div className=\"language-selector\">\n                  <button\n                    className={`lang-btn ${player.aiLanguage === 'javascript' ? 'active' : ''}`}\n                    onClick={() => updatePlayer(player.id, { aiLanguage: 'javascript' })}\n                  >\n                    JavaScript\n                  </button>\n                  <button\n                    className={`lang-btn ${player.aiLanguage === 'typescript' ? 'active' : ''}`}\n                    onClick={() => updatePlayer(player.id, { aiLanguage: 'typescript' })}\n                  >\n                    TypeScript\n                  </button>\n                </div>\n              </div>\n              <div className=\"editor-actions\">\n                <button \n                  className=\"btn btn-small\"\n                  onClick={() => updatePlayer(player.id, { aiCode: '' })}\n                >\n                  초기화\n                </button>\n                <button \n                  className=\"btn btn-small\"\n                  onClick={() => {\n                    const exampleCode = player.aiLanguage === 'typescript' \n                      ? `// AI 전략 함수 (TypeScript)\ninterface GameState {\n  keywords: string[];\n  myHints: number[];\n  previousGuesses: number[][];\n  revealedAnswers: number[];\n  revealedWrongs: number[];\n  answerCount: number;\n}\n\nfunction makeGuess(gameState: GameState): number[] {\n  const { keywords, myHints, previousGuesses, revealedAnswers, revealedWrongs, answerCount } = gameState;\n  \n  // 가능한 키워드 인덱스 목록\n  const availableIndices: number[] = keywords\n    .map((_, index) => index)\n    .filter(idx => !revealedWrongs.includes(idx));\n  \n  // 이미 공개된 정답 우선 선택\n  const selectedIndices: number[] = [...revealedAnswers];\n  \n  // 나머지는 랜덤 선택\n  while (selectedIndices.length < answerCount) {\n    const remaining = availableIndices.filter(idx => !selectedIndices.includes(idx));\n    if (remaining.length === 0) break;\n    \n    const randomIdx = remaining[Math.floor(Math.random() * remaining.length)];\n    selectedIndices.push(randomIdx);\n  }\n  \n  return selectedIndices;\n}`\n                      : `// AI 전략 함수 (JavaScript)\nfunction makeGuess(gameState) {\n  const { keywords, myHints, previousGuesses, revealedAnswers, revealedWrongs, answerCount } = gameState;\n  \n  // 가능한 키워드 인덱스 목록\n  const availableIndices = keywords\n    .map((_, index) => index)\n    .filter(idx => !revealedWrongs.includes(idx));\n  \n  // 이미 공개된 정답 우선 선택\n  const selectedIndices = [...revealedAnswers];\n  \n  // 나머지는 랜덤 선택\n  while (selectedIndices.length < answerCount) {\n    const remaining = availableIndices.filter(idx => !selectedIndices.includes(idx));\n    if (remaining.length === 0) break;\n    \n    const randomIdx = remaining[Math.floor(Math.random() * remaining.length)];\n    selectedIndices.push(randomIdx);\n  }\n  \n  return selectedIndices;\n}`;\n                    updatePlayer(player.id, { aiCode: exampleCode });\n                  }}\n                >\n                  예제 코드\n                </button>\n              </div>\n            </div>\n            \n            <div className=\"editor-wrapper\">\n              <div className=\"line-numbers\">\n                {((player.aiCode || '') + '\\n').split('\\n').map((_, index) => (\n                  <div key={index} className=\"line-number\">{index + 1}</div>\n                ))}\n              </div>\n              <textarea\n                className=\"code-editor\"\n                value={player.aiCode || ''}\n                onChange={(e) => updatePlayer(player.id, { aiCode: e.target.value })}\n                placeholder={player.aiLanguage === 'typescript' \n                  ? \"// TypeScript AI 전략 코드를 작성하세요\\n// 타입 정의와 함께 작성해주세요\"\n                  : \"// JavaScript AI 전략 코드를 작성하세요\\n// function makeGuess(gameState) { ... }\"\n                }\n                spellCheck={false}\n              />\n            </div>\n            \n            <div className=\"editor-footer\">\n              <div className=\"code-stats\">\n                <span>줄: {(player.aiCode || '').split('\\n').length}</span>\n                <span>문자: {(player.aiCode || '').length}</span>\n              </div>\n              <button \n                className=\"btn-large btn-primary\"\n                onClick={() => setCodeEditorModal({ isOpen: false, playerId: null })}\n\n\n              >\n                저장\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const renderModeSelection = () => (\n    <div className=\"game-screen mode-selection\">\n      <h2>게임 모드를 선택하세요</h2>\n      <div className=\"mode-cards\">\n        <div className=\"mode-card\" onClick={() => handleModeSelect('solo')}>\n          <h3>개인전</h3>\n          <p>AI와 1:1 대결하는 모드입니다.<br/>난이도를 선택할 수 있어요.</p>\n        </div>\n        <div className=\"mode-card\" onClick={() => handleModeSelect('multi')}>\n          <h3>멀티플레이</h3>\n          <p>2~6명이 함께 플레이하는 모드입니다.<br/>친구들과 함께 즐겨보세요.</p>\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderDifficultySelection = () => (\n    <div className=\"game-screen difficulty-selection\">\n      <div className=\"setup-actions\" style={{ justifyContent: 'flex-start', marginBottom: '30px' }}>\n        <button \n          className=\"btn-large btn-secondary\" \n          onClick={() => setCurrentScreen('mode-selection')}\n        >\n          ← 뒤로가기\n        </button>\n      </div>\n      \n      <h2>AI 난이도를 선택하세요</h2>\n      <div className=\"difficulty-cards\">\n        <div className=\"difficulty-card\" onClick={() => handleDifficultySelect('easy')}>\n          <h3>🌱 쉬움</h3>\n          <p>AI가 무작위로 키워드를 선택합니다.<br/>편안하게 게임을 즐기세요.</p>\n        </div>\n        <div className=\"difficulty-card\" onClick={() => handleDifficultySelect('medium')}>\n          <h3>🌿 보통</h3>\n          <p>AI가 공개된 정답을 활용합니다.<br/>적당한 도전을 원한다면 선택하세요.</p>\n        </div>\n        <div className=\"difficulty-card\" onClick={() => handleDifficultySelect('hard')}>\n          <h3>🌳 어려움</h3>\n          <p>AI가 이전 추측을 분석합니다.<br/>진정한 실력을 시험해보세요.</p>\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderPlayerSetup = () => (\n    <div className=\"game-screen\">\n      <div className=\"setup-actions\">\n        <button \n          className=\"btn-large btn-secondary\" \n          onClick={() => setCurrentScreen('mode-selection')}\n        >\n          ← 뒤로가기\n        </button>\n      </div>\n\n      {gameMode === 'multi' && players.length === 0 && (\n        <div className=\"form-section\">\n          <h2>플레이어 수를 선택하세요</h2>\n          <div className=\"btn-group\" style={{ justifyContent: 'center', marginTop: '20px' }}>\n            {[2, 3, 4, 5, 6].map(num => (\n              <button\n                key={num}\n                className=\"btn-large btn-secondary\"\n                onClick={() => handlePlayerCountSelect(num)}\n              >\n                {num}명\n              </button>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {players.length > 0 && (\n        <>\n          <h2>{gameMode === 'solo' ? '플레이어 설정' : `${playerCount}명 플레이어 설정`}</h2>\n          <div className=\"players-grid\">\n            {players.filter(player => gameMode === 'solo' ? player.type === 'human' : true).map((player) => (\n              <div key={player.id} className=\"player-setup\">\n                <h4>{gameMode === 'solo' ? '플레이어' : `플레이어 ${player.id}`}</h4>\n                \n                <div className=\"form-section\">\n                  <input\n                    type=\"text\"\n                    className=\"input-field\"\n                    placeholder=\"닉네임을 입력하세요\"\n                    value={player.nickname}\n                    onChange={(e) => updatePlayer(player.id, { nickname: e.target.value })}\n                    maxLength={20}\n                  />\n                </div>\n\n                {gameMode === 'multi' && (\n                  <div className=\"form-section\">\n                    <div className=\"radio-group\">\n                      <div className=\"radio-option\">\n                        <input\n                          type=\"radio\"\n                          id={`human-${player.id}`}\n                          name={`playerType-${player.id}`}\n                          value=\"human\"\n                          checked={player.type === 'human'}\n                          onChange={() => updatePlayer(player.id, { type: 'human', aiCode: '' })}\n                        />\n                        <label htmlFor={`human-${player.id}`}>인간</label>\n                      </div>\n                      <div className=\"radio-option\">\n                        <input\n                          type=\"radio\"\n                          id={`ai-${player.id}`}\n                          name={`playerType-${player.id}`}\n                          value=\"custom-ai\"\n                          checked={player.type === 'custom-ai'}\n                          onChange={() => {\n                            updatePlayer(player.id, { type: 'custom-ai' });\n                            setCodeEditorModal({ isOpen: true, playerId: player.id });\n                          }}\n                        />\n                        <label htmlFor={`ai-${player.id}`}>AI</label>\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                {player.type === 'custom-ai' && (\n                  <div className=\"form-section\">\n                    <button\n                      className=\"btn-large btn-ai-code\"\n                      onClick={() => setCodeEditorModal({ isOpen: true, playerId: player.id })}\n                      style={{ width: '100%' }}\n                    >\n                      <span className=\"btn-ai-icon\">&lt;/&gt;</span>\n                      <span>{player.aiCode ? 'AI 코드 수정' : 'AI 코드 작성'}</span>\n                    </button>\n                    {player.aiCode && (\n                      <div className=\"code-preview\">\n                        <small>코드가 작성되었습니다 ({player.aiCode.split('\\n').length}줄)</small>\n                      </div>\n                    )}\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n\n          <div className=\"setup-actions\">\n            <button\n              className=\"btn-large btn-primary\"\n              onClick={handleStartGame}\n              disabled={!canStartGame()}\n            >\n              게임 시작\n            </button>\n          </div>\n        </>\n      )}\n    </div>\n  );\n\n  const renderGameConfig = () => (\n    <div className=\"game-screen\">\n      <div className=\"setup-actions\" style={{ justifyContent: 'flex-start', marginBottom: '30px' }}>\n        <button \n          className=\"btn-large btn-secondary\" \n          onClick={() => setCurrentScreen('player-setup')}\n        >\n          ← 뒤로가기\n        </button>\n      </div>\n\n      <h2>게임 설정</h2>\n      \n      {/* 난이도 프리셋 */}\n      <div className=\"form-section\">\n        <h3>난이도 프리셋</h3>\n        <div className=\"btn-group\" style={{ justifyContent: 'center', flexWrap: 'wrap' }}>\n          <button\n            className={`btn-large ${gameConfig.difficulty === 'beginner' ? 'btn-primary' : 'btn-secondary'}`}\n            onClick={() => applyPreset('beginner')}\n          >\n            초급\n          </button>\n          <button\n            className={`btn-large ${gameConfig.difficulty === 'intermediate' ? 'btn-primary' : 'btn-secondary'}`}\n            onClick={() => applyPreset('intermediate')}\n          >\n            중급\n          </button>\n          <button\n            className={`btn-large ${gameConfig.difficulty === 'advanced' ? 'btn-primary' : 'btn-secondary'}`}\n            onClick={() => applyPreset('advanced')}\n          >\n            고급\n          </button>\n        </div>\n      </div>\n\n      {/* 상세 설정 */}\n      <div className=\"config-grid\">\n        <div className=\"config-item\">\n          <h4>키워드 풀 크기</h4>\n          <p>전체 키워드 개수</p>\n          <div className=\"number-input-group\">\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ keywordPoolSize: Math.max(20, gameConfig.keywordPoolSize - 10) })}\n            >\n              -\n            </button>\n            <span className=\"number-display\">{gameConfig.keywordPoolSize}개</span>\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ keywordPoolSize: Math.min(100, gameConfig.keywordPoolSize + 10) })}\n            >\n              +\n            </button>\n          </div>\n        </div>\n\n        <div className=\"config-item\">\n          <h4>정답 개수</h4>\n          <p>찾아야 할 정답 수</p>\n          <div className=\"number-input-group\">\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ answerCount: Math.max(2, gameConfig.answerCount - 1) })}\n            >\n              -\n            </button>\n            <span className=\"number-display\">{gameConfig.answerCount}개</span>\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ answerCount: Math.min(15, gameConfig.answerCount + 1) })}\n            >\n              +\n            </button>\n          </div>\n        </div>\n\n        <div className=\"config-item\">\n          <h4>힌트 개수</h4>\n          <p>각 플레이어별 오답 힌트</p>\n          <div className=\"number-input-group\">\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ hintCount: Math.max(2, gameConfig.hintCount - 1) })}\n            >\n              -\n            </button>\n            <span className=\"number-display\">{gameConfig.hintCount}개</span>\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ hintCount: Math.min(20, gameConfig.hintCount + 1) })}\n            >\n              +\n            </button>\n          </div>\n        </div>\n\n        <div className=\"config-item\">\n          <h4>턴 제한시간</h4>\n          <p>각 턴당 시간</p>\n          <div className=\"number-input-group\">\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ timeLimit: Math.max(15, gameConfig.timeLimit - 15) })}\n            >\n              -\n            </button>\n            <span className=\"number-display\">{gameConfig.timeLimit}초</span>\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ timeLimit: Math.min(180, gameConfig.timeLimit + 15) })}\n            >\n              +\n            </button>\n          </div>\n        </div>\n\n        <div className=\"config-item\">\n          <h4>최대 턴 수</h4>\n          <p>게임 종료 조건</p>\n          <div className=\"number-input-group\">\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ maxTurns: gameConfig.maxTurns ? Math.max(5, gameConfig.maxTurns - 5) : 15 })}\n            >\n              -\n            </button>\n            <span className=\"number-display\">{gameConfig.maxTurns ? `${gameConfig.maxTurns}턴` : '무제한'}</span>\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ maxTurns: gameConfig.maxTurns ? Math.min(50, gameConfig.maxTurns + 5) : 20 })}\n            >\n              +\n            </button>\n          </div>\n          <button \n            className=\"btn btn-small\" \n            onClick={() => updateGameConfig({ maxTurns: gameConfig.maxTurns ? undefined : 20 })}\n            style={{ marginTop: '10px' }}\n          >\n            {gameConfig.maxTurns ? '무제한으로 변경' : '제한 설정'}\n          </button>\n        </div>\n      </div>\n\n      {/* 현재 난이도 표시 */}\n      <div className=\"difficulty-indicator\">\n        <span>현재 난이도: <strong>{\n          gameConfig.difficulty === 'beginner' ? '초급' :\n          gameConfig.difficulty === 'intermediate' ? '중급' :\n          gameConfig.difficulty === 'advanced' ? '고급' : '커스텀'\n        }</strong></span>\n      </div>\n\n      <div className=\"setup-actions\">\n        <button\n          className=\"btn-large btn-primary\"\n          onClick={handleConfigComplete}\n        >\n          설정 완료\n        </button>\n      </div>\n    </div>\n  );\n\n  const renderGamePreparation = () => {\n    const preparationSteps = [\n      { title: '게임 초기화', description: '게임 환경을 설정하고 있습니다.' },\n      { title: '키워드 생성', description: `${gameConfig.keywordPoolSize}개의 키워드를 생성하고 있습니다.` },\n      { title: '정답 선택', description: `${gameConfig.answerCount}개의 정답을 무작위로 선택하고 있습니다.` },\n      { title: '힌트 배포', description: '각 플레이어에게 오답 힌트를 배포하고 있습니다.' },\n      { title: '최종 확인', description: '게임 준비를 완료하고 있습니다.' }\n    ];\n\n    return (\n      <div className=\"game-screen\">\n        {preparationStep < 5 ? (\n          <>\n            <h2>게임 준비 중...</h2>\n            <div className=\"preparation-progress\">\n              <div className=\"progress-steps\">\n                {preparationSteps.map((step, index) => (\n                  <div \n                    key={index} \n                    className={`progress-step ${index < preparationStep ? 'completed' : index === preparationStep ? 'active' : 'pending'}`}\n                  >\n                    <div className=\"step-circle\">\n                      {index < preparationStep ? '✓' : index + 1}\n                    </div>\n                    <div className=\"step-content\">\n                      <h4>{step.title}</h4>\n                      <p>{step.description}</p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n              \n              <div className=\"progress-bar-container\">\n                <div \n                  className=\"progress-bar-fill\" \n                  style={{ width: `${(preparationStep / 5) * 100}%` }}\n                />\n              </div>\n            </div>\n          </>\n        ) : (\n          <>\n            <h2>게임 준비 완료!</h2>\n            <div className=\"game-summary\">\n              <div className=\"summary-grid\">\n                <div className=\"summary-item\">\n                  <h4>참가자</h4>\n                  <div className=\"player-chips\">\n                    {players.map(player => (\n                      <span key={player.id} className=\"player-chip\">\n                        {player.nickname} ({player.type === 'built-in-ai' ? 'AI' : player.type === 'custom-ai' ? 'Custom AI' : '인간'})\n                      </span>\n                    ))}\n                  </div>\n                </div>\n                \n                <div className=\"summary-item\">\n                  <h4>게임 정보</h4>\n                  <div className=\"game-info-grid\">\n                    <div>키워드 풀: <strong>{gameConfig.keywordPoolSize}개</strong></div>\n                    <div>정답 개수: <strong>{gameConfig.answerCount}개</strong></div>\n                    <div>힌트 개수: <strong>{gameConfig.hintCount}개</strong></div>\n                    <div>턴 시간: <strong>{gameConfig.timeLimit}초</strong></div>\n                    <div>최대 턴: <strong>{gameConfig.maxTurns || '무제한'}</strong></div>\n                  </div>\n                </div>\n\n              </div>\n              \n              <div className=\"game-start-section\">\n                <div className=\"countdown-info\">\n                  <h3>모든 준비가 완료되었습니다!</h3>\n                  <p>게임을 시작하시겠습니까?</p>\n                </div>\n                \n                <div className=\"setup-actions\">\n                  <button \n                    className=\"btn-large btn-secondary\" \n                    onClick={() => setCurrentScreen('game-config')}\n                  >\n                    ← 설정 변경\n                  </button>\n                  <button \n                    className=\"btn-large btn-primary\" \n                    onClick={startActualGame}\n                  >\n                    게임 시작! 🎮\n                  </button>\n                </div>\n              </div>\n            </div>\n          </>\n        )}\n      </div>\n    );\n  };\n\n  const renderGameScreen = () => {\n    const currentPlayer = getCurrentPlayer();\n    const isGameFinished = isGameOver();\n\n    // 힌트 보기 단계\n    if (hintViewingPhase) {\n      const viewingPlayer = players.find(p => p.id === currentViewingPlayer);\n      const hasViewedHints = gameState.hintsViewed[currentViewingPlayer];\n      \n      // AI 플레이어는 건너뛰기\n      if (viewingPlayer?.type === 'built-in-ai') {\n        const nextPlayer = currentViewingPlayer + 1;\n        if (nextPlayer <= players.length) {\n          setTimeout(() => setCurrentViewingPlayer(nextPlayer), 0);\n        } else {\n          setHintViewingPhase(false);\n          if (gameManagerRef.current) {\n            gameManagerRef.current.startGame(\n              gameState.keywords,\n              gameState.answers,\n              gameState.playerHints\n            );\n          } else {\n            // GameManager 없이 게임 시작 시 타이머 시작\n            setTimeout(() => {\n              setGameState(prev => ({\n                ...prev,\n                currentTurn: 1\n              }));\n              startTimer();\n            }, 100);\n          }\n        }\n        return null;\n      }\n\n      return (\n        <div className=\"game-screen\">\n          <div className=\"hint-viewing-phase\">\n            <div className=\"exit-button-container\">\n              <button \n                className=\"btn btn-exit-small\"\n                onClick={exitGame}\n              >\n                게임 종료\n              </button>\n            </div>\n            <h2>힌트 확인 단계</h2>\n            <div className=\"viewing-instructions\">\n              <h3>{viewingPlayer?.nickname}님의 차례입니다</h3>\n              <p>다른 플레이어는 화면을 보지 마세요!</p>\n              \n              {!hasViewedHints ? (\n                <div className=\"hint-reveal\">\n                  <p>아래 버튼을 눌러 본인만의 힌트를 확인하세요.</p>\n                  <button \n                    className=\"btn-large btn-primary\"\n                    onClick={() => setGameState(prev => ({\n                      ...prev,\n                      hintsViewed: { ...prev.hintsViewed, [currentViewingPlayer]: true }\n                    }))}\n                  >\n                    내 힌트 보기\n                  </button>\n                </div>\n              ) : (\n                <div className=\"hint-display\">\n                  <h4>내 힌트 (이 키워드들은 정답이 아닙니다)</h4>\n                  <div className=\"hint-chips\">\n                    {gameState.playerHints[currentViewingPlayer]?.map(hintIndex => (\n                      <span key={hintIndex} className=\"hint-chip\">\n                        {gameState.keywords[hintIndex]}\n                      </span>\n                    ))}\n                  </div>\n                  <p>힌트를 기억하고 다음 버튼을 눌러주세요.</p>\n                  <button \n                    className=\"btn-large btn-secondary\"\n                    onClick={() => {\n                      const nextPlayer = currentViewingPlayer + 1;\n                      if (nextPlayer <= players.length) {\n                        setCurrentViewingPlayer(nextPlayer);\n                      } else {\n                        setHintViewingPhase(false);\n                        // GameManager로 게임 시작\n                        if (gameManagerRef.current) {\n                          gameManagerRef.current.startGame(\n                            gameState.keywords,\n                            gameState.answers,\n                            gameState.playerHints\n                          );\n                        } else {\n                          // GameManager 없이 게임 시작 시 타이머 시작\n                          setTimeout(() => {\n                            setGameState(prev => ({\n                              ...prev,\n                              currentTurn: 1\n                            }));\n                            startTimer();\n                          }, 100);\n                        }\n                      }\n                    }}\n                  >\n                    확인 완료\n                  </button>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    if (isGameFinished) {\n      return (\n        <div className=\"game-screen\">\n          <div className=\"game-over\">\n            <h2>🎉 게임 종료!</h2>\n            {gameState.winner ? (\n              <div className=\"winner-announcement\">\n                <h3>{players.find(p => p.id === gameState.winner)?.nickname}님이 승리했습니다!</h3>\n                <p>축하합니다! 정답을 모두 맞추셨습니다.</p>\n              </div>\n            ) : (\n              <div className=\"draw-announcement\">\n                <h3>무승부</h3>\n                <p>최대 턴 수에 도달했습니다.</p>\n              </div>\n            )}\n            \n            <div className=\"final-answers\">\n              <h4>정답은:</h4>\n              <div className=\"answer-list\">\n                {gameState.answers.map(answerIndex => (\n                  <span key={answerIndex} className=\"answer-chip\">\n                    {gameState.keywords[answerIndex]}\n                  </span>\n                ))}\n              </div>\n            </div>\n\n            <div className=\"game-history\">\n              <h4>게임 기록</h4>\n              <div className=\"history-list\">\n                {gameState.turnHistory.map((turn, index) => (\n                  <div key={index} className=\"history-item\">\n                    <div className=\"turn-info\">\n                      <strong>턴 {turn.turnNumber}</strong> - {turn.playerName}\n                    </div>\n                    <div className=\"turn-keywords\">\n                      선택: {turn.guessKeywords.join(', ')}\n                    </div>\n                    <div className=\"turn-result\">\n                      {turn.correctCount}/{gameConfig.answerCount} 정답 ({turn.timeUsed}초 소요)\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            <div className=\"setup-actions\">\n              <button \n                className=\"btn-large btn-secondary\" \n                onClick={() => setCurrentScreen('mode-selection')}\n              >\n                새 게임\n              </button>\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"game-screen game-playing\">\n        {/* 게임 상태 헤더 */}\n        <div className=\"game-header-info\">\n          <div className=\"turn-info\">\n            <h3>턴 {gameState.currentTurn}{gameConfig.maxTurns && ` / ${gameConfig.maxTurns}`}</h3>\n            <p>\n              {currentPlayer?.nickname}의 차례\n              {isAIThinking && <span className=\"ai-thinking\"> (생각하는 중...)</span>}\n            </p>\n          </div>\n          <div className=\"header-controls\">\n            <div className=\"timer\">\n              <div className={`time-display ${timeRemaining <= 10 ? 'warning' : ''}`}>\n                {timeRemaining}초\n              </div>\n              <div className=\"timer-bar\">\n                <div \n                  className=\"timer-fill\" \n                  style={{ \n                    width: `${(timeRemaining / gameConfig.timeLimit) * 100}%`,\n                    backgroundColor: timeRemaining <= 10 ? '#FF5722' : \n                                   timeRemaining <= 30 ? '#FFC107' : '#4CAF50'\n                  }}\n                />\n              </div>\n            </div>\n            <button \n              className=\"btn btn-exit\"\n              onClick={exitGame}\n              title=\"게임 종료\"\n            >\n              나가기\n            </button>\n          </div>\n        </div>\n\n        <div className=\"game-layout\">\n          {/* 왼쪽: 키워드 그리드 */}\n          <div className=\"game-main\">\n            <div className=\"keyword-selection\">\n              <h4>키워드를 선택하세요 ({selectedKeywords.length}/{gameConfig.answerCount})</h4>\n              <div className=\"keywords-grid\">\n                {gameState.keywords.map((keyword, index) => {\n                  const isSelected = selectedKeywords.includes(index);\n                  const isRevealedAnswer = gameState.revealedAnswers.includes(index);\n                  const isRevealedWrong = gameState.revealedWrongAnswers.includes(index);\n                  \n                  return (\n                    <button\n                      key={index}\n                      className={`keyword-btn ${isSelected ? 'selected' : ''} ${isRevealedAnswer ? 'revealed-answer' : ''} ${isRevealedWrong ? 'revealed-wrong' : ''}`}\n                      onClick={() => toggleKeywordSelection(index)}\n                      disabled={isSubmitting || isAIThinking || !isMyTurn}\n                    >\n                      {keyword}\n                      {isRevealedAnswer && <span className=\"reveal-indicator\">✓</span>}\n                      {isRevealedWrong && <span className=\"reveal-indicator\">❌</span>}\n                    </button>\n                  );\n                })}\n              </div>\n            </div>\n\n            <div className=\"guess-controls\">\n              <div className=\"selected-display\">\n                <h5>선택된 키워드:</h5>\n                <div className=\"selected-keywords\">\n                  {selectedKeywords.map(index => (\n                    <span key={index} className=\"selected-chip\">\n                      {gameState.keywords[index]}\n                    </span>\n                  ))}\n                </div>\n              </div>\n              \n              <div className=\"control-buttons\">\n                <button \n                  className=\"btn-large btn-secondary\"\n                  onClick={() => setSelectedKeywords([])}\n                  disabled={selectedKeywords.length === 0}\n                >\n                  선택 초기화\n                </button>\n                <button \n                  className=\"btn-large btn-primary\"\n                  onClick={submitGuess}\n                  disabled={selectedKeywords.length !== gameConfig.answerCount || isSubmitting}\n                >\n                  추측 제출\n                </button>\n              </div>\n            </div>\n          </div>\n\n          {/* 오른쪽: 게임 정보 */}\n          <div className=\"game-sidebar\">\n            <div className=\"global-hints\">\n              <h4>게임 힌트</h4>\n              <div className=\"hint-buttons\">\n                <button \n                  className=\"btn btn-hint\"\n                  onClick={revealAnswerHint}\n                  disabled={gameState.answers.length === gameState.revealedAnswers.length}\n                >\n                  정답 1개 공개\n                </button>\n                <button \n                  className=\"btn btn-hint\"\n                  onClick={revealWrongHint}\n                >\n                  오답 1개 공개\n                </button>\n              </div>\n              <div className=\"revealed-info\">\n                {gameState.revealedAnswers.length > 0 && (\n                  <div>\n                    <small>공개된 정답: {gameState.revealedAnswers.length}개</small>\n                  </div>\n                )}\n                {gameState.revealedWrongAnswers.length > 0 && (\n                  <div>\n                    <small>공개된 오답: {gameState.revealedWrongAnswers.length}개</small>\n                  </div>\n                )}\n              </div>\n            </div>\n\n            <div className=\"players-status\">\n              <h4>플레이어 현황</h4>\n              <div className=\"players-list\">\n                {players.map(player => (\n                  <div \n                    key={player.id} \n                    className={`player-status ${currentPlayer?.id === player.id ? 'current' : ''}`}\n                  >\n                    <span className=\"player-name\">{player.nickname}</span>\n                    <span className=\"player-type\">({player.type === 'built-in-ai' ? 'AI' : player.type === 'custom-ai' ? 'Custom AI' : '인간'})</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            <div className=\"turn-history\">\n              <h4>턴 기록</h4>\n              <div className=\"history-scroll\">\n                {gameState.turnHistory.slice(-5).map((turn, index) => (\n                  <div key={index} className=\"history-entry\">\n                    <div className=\"history-header\">\n                      <span>턴 {turn.turnNumber}: {turn.playerName}</span>\n                    </div>\n                    <div className=\"history-keywords\">\n                      {turn.guessKeywords.join(', ')}\n                    </div>\n                    <div className=\"history-result\">\n                      {turn.correctCount}/{gameConfig.answerCount} 정답\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"deduction-game\">\n      <div className=\"game-content\">\n        <div className=\"game-wrapper\">\n          <div className=\"game-header\">\n            <h1>Exclusive Deduction Game</h1>\n            <p>서로 다른 단서로 정답을 추론하는 게임</p>\n          </div>\n          \n          {currentScreen === 'mode-selection' && renderModeSelection()}\n          {currentScreen === 'difficulty-selection' && renderDifficultySelection()}\n          {currentScreen === 'player-setup' && renderPlayerSetup()}\n          {currentScreen === 'game-config' && renderGameConfig()}\n          {currentScreen === 'game-preparation' && renderGamePreparation()}\n          {currentScreen === 'game' && renderGameScreen()}\n        </div>\n        \n        {renderCodeEditorModal()}\n      </div>\n    </div>\n  );\n};\n\nexport default DeductionGame;","import { useParams } from \"react-router-dom\";\nimport './LabPage.css';\n\nimport { Tetris, DeductionGame } from \"../components/lab/subject\";\n\n\nconst LabDetailPage = () => {\n    const { subject } = useParams()\n    console.log(subject)\n\n\n    const renderContetns = () => {\n        switch (subject) {\n            case \"tetris\":\n                return <Tetris />\n            case \"deduction-game\":\n                return <DeductionGame />\n            default:\n                return (\n                    <h1 className=\"lab-title\">준비중...</h1>\n                )\n        }\n    }\n\n    return (\n        <div className=\"lab-page\">\n             <main className=\"lab-content\">\n                {renderContetns()}\n             </main>\n        </div>\n    )\n}\n\nexport default LabDetailPage;"],"names":["AICodeValidator","validate","code","errors","warnings","length","this","MAX_CODE_LENGTH","push","concat","lines","split","MAX_LINES","pattern","message","FORBIDDEN_PATTERNS","test","Function","e","includes","loopPatterns","complexity","analyzeComplexity","suspiciousPatterns","isValid","undefined","loops","match","functions","preprocessCode","processed","replace","trim","MAX_LOOP_DEPTH","MAX_FUNCTION_DEPTH","Tetris","_jsxs","className","children","_jsx","src","process","title","allow","allowFullScreen","BasePlayer","constructor","playerInfo","ready","getInfo","isReady","onTurnStart","onTurnEnd","move","reset","HumanPlayer","super","resolveGuess","makeGuess","gameState","Promise","resolve","submitGuess","indices","isWaitingForInput","BuiltInAIPlayer","strategy","thinkingTime","startTime","Date","now","selectedIndices","selectKeywords","elapsedTime","remainingTime","Math","max","setTimeout","setThinkingTime","milliseconds","getStrategy","setStrategy","AICodeExecutor","executionCounter","MAX_EXECUTION_TIME","getInstance","instance","executeUserAI","playerId","performance","logs","validation","success","error","join","executionTime","map","w","processedCode","secureGameState","createSecureGameState","result","executeInWorker","deepFreeze","obj","Object","freeze","getOwnPropertyNames","forEach","prop","isFrozen","keywords","myHints","answerCount","previousGuesses","g","guess","correctCount","revealedAnswers","revealedWrongAnswers","currentTurn","timeLimit","reject","executionId","workerPath","publicUrl","window","location","pathname","startsWith","worker","Worker","timeoutId","terminate","Error","onmessage","event","type","msgId","data","clearTimeout","logMessage","arg","JSON","stringify","String","onerror","errorMessage","console","postMessage","validateGuess","Array","isArray","keywordCount","i","idx","Number","isInteger","Set","size","PerformanceMonitor","metricsHistory","MAX_HISTORY_SIZE","measureExecution","executor","metadata","startMemory","getMemoryUsage","endTime","endMemory","metrics","memoryUsage","recordMetrics","_objectSpread","timestamp","errorType","name","measureSync","memory","usedJSHeapSize","slice","getPlayerStats","playerMetrics","filter","m","totalExecutions","successRate","averageExecutionTime","maxExecutionTime","recentErrors","successful","totalTime","reduce","sum","maxTime","getGlobalStats","averageSuccessRate","peakExecutionTime","activePlayerCount","peakTime","uniquePlayers","clearHistory","AIExecutionHandler","monitor","executeWithFallback","userCode","playerName","executionResult","log","_error$error","fallbackGuess","generateFallbackGuess","errorDetails","available","randomIndex","floor","random","selected","splice","validateCode","valid","testAICode","sampleGameState","testGameState","createSampleGameState","CustomAIPlayer","aiCode","aiLanguage","executionHandler","customCode","customLanguage","id","nickname","fallbackStrategy","availableIndices","from","_","remaining","randomIdx","validateCodeAsync","updateCode","language","getCode","getLanguage","EasyStrategy","scores","Map","set","guessedIndices","get","points","excludedIndices","delete","candidates","entries","_ref","has","sort","a","b","needed","candidate","remainingCandidates","c","stillNeeded","getStrategyName","getDescription","MediumStrategy","j","guessA","guessB","setA","setB","diffA","x","diffB","correctDiff","keywordA","keywordB","abs","bonusPoints","finalCandidates","shuffled","HardStrategy","validHypotheses","findValidHypotheses","mustBeAnswers","mustBeWrongs","mediumGuess","combinedArray","potentialCandidates","searchSpace","findCombinations","startIndex","currentCombo","pop","validateHypothesis","hypothesis","guesses","hypothesisSet","PlayerFactory","createPlayer","aiDifficulty","difficulty","strategyCache","createBuiltInAIOpponent","arguments","isHumanPlayer","player","isBuiltInAIPlayer","isCustomAIPlayer","GameManager","config","players","currentPlayerIndex","gameContext","isGameRunning","turnTimer","turnStartTime","onGameEnd","onTimerTick","onAIThinking","answers","playerHints","turnHistory","addPlayer","setPlayers","getCurrentPlayer","getPlayers","getGameContext","startGame","startNextTurn","_currentPlayer$onTurn","currentPlayer","call","startTurnTimer","gameStateForAI","createGameStateForAI","then","processTurn","setInterval","handleTimeout","stopTurnTimer","clearInterval","autoGuess","submitHumanGuess","_currentPlayer$onTurn2","isWinner","every","actualTimeUsed","round","turnResult","guessKeywords","turnNumber","timeUsed","endGame","maxTurns","turn","revealAnswer","unrevealedAnswers","ans","randomAnswer","revealWrongAnswer","wrongAnswers","randomWrong","winner","stopGame","isRunning","setEventHandlers","handlers","DeductionGame","currentScreen","setCurrentScreen","useState","gameMode","setGameMode","playerCount","setPlayerCount","gameConfig","setGameConfig","keywordPoolSize","hintCount","setGameState","gameStatus","hintsViewed","preparationStep","setPreparationStep","selectedKeywords","setSelectedKeywords","timeRemaining","setTimeRemaining","isMyTurn","setIsMyTurn","hintViewingPhase","setHintViewingPhase","currentViewingPlayer","setCurrentViewingPlayer","timerIntervalId","setTimerIntervalId","isSubmitting","setIsSubmitting","aiTimeoutId","setAiTimeoutId","soloDifficulty","setSoloDifficulty","isAIThinking","setIsAIThinking","gameManagerRef","useRef","setTurnStartTime","codeEditorModal","setCodeEditorModal","isOpen","handleModeSelect","mode","handleDifficultySelect","updatePlayer","updates","prev","handleStartGame","handleConfigComplete","initializeGame","keywordCategories","animals","foods","objects","places","actions","async","values","flat","answerIndices","shuffledIndices","nonAnswerIndices","hints","availableHints","startActualGame","manager","gamePlayers","context","winnerInfo","thinking","current","startTimer","clearTimer","intervalId","handleTimeUp","autoSelection","index","submitGuessWithSelection","exitGame","revealAnswerHint","revealWrongHint","selection","currentPlayerId","find","p","isMaxTurnsReached","difficultyPresets","beginner","intermediate","advanced","applyPreset","preset","updateGameConfig","useEffect","onClick","style","justifyContent","marginBottom","marginTop","num","count","newPlayers","handlePlayerCountSelect","_Fragment","placeholder","value","onChange","target","maxLength","checked","htmlFor","width","disabled","_player$aiCode","flexWrap","min","renderGamePreparation","preparationSteps","description","step","renderGameScreen","isGameFinished","_gameState$playerHint","viewingPlayer","hasViewedHints","nextPlayer","hintIndex","_players$find","answerIndex","backgroundColor","keyword","isSelected","isRevealedAnswer","isRevealedWrong","toggleKeywordSelection","keywordIndex","renderCodeEditorModal","stopPropagation","exampleCode","spellCheck","LabDetailPage","subject","useParams","renderContetns"],"sourceRoot":""}