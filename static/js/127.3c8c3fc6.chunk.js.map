{"version":3,"file":"static/js/127.3c8c3fc6.chunk.js","mappings":"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","sources":["components/lab/subject/Tetris.tsx","components/lab/subject/DeductionGame/ai/players/BasePlayer.ts","components/lab/subject/DeductionGame/ai/players/HumanPlayer.ts","components/lab/subject/DeductionGame/ai/players/BuiltInAIPlayer.ts","components/lab/subject/DeductionGame/ai/players/CustomAIPlayer.ts","components/lab/subject/DeductionGame/ai/strategies/EasyStrategy.ts","components/lab/subject/DeductionGame/ai/strategies/MediumStrategy.ts","components/lab/subject/DeductionGame/ai/strategies/HardStrategy.ts","components/lab/subject/DeductionGame/ai/PlayerFactory.ts","components/lab/subject/DeductionGame/ai/GameManager.ts","components/lab/subject/DeductionGame/DeductionGame.tsx","pages/LabDetailPage.tsx"],"sourcesContent":["import './Tetris.css';\n\nconst Tetris = () => {\n    \n    return (\n        <div className=\"tetris-container\">\n            <div className=\"tetris-header\">\n                <h1>AI 테트리스</h1>\n                <p className=\"tetris-description\">\n                    AI로 시작한 테트리스 게임 만들기 프로젝트입니다.\n                    현재 버전에서는 기본적인 테트리스 게임플레이를 구현했습니다.\n                </p>\n            </div>\n\n            <div className=\"tetris-content\">\n                <iframe\n                    src={process.env.PUBLIC_URL + \"/lab/html/tetris.html\"}\n                    title=\"AI Tetris Game\"\n                    className=\"tetris-frame\"\n                    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                    allowFullScreen\n                />\n            </div>\n\n            <div className=\"tetris-info\">\n                <h2>프로젝트 정보</h2>\n                <div className=\"info-grid\">\n                    <div className=\"info-item\">\n                        <h3>개발 기간</h3>\n                        <p>2024.06.11 ~ 현재</p>\n                    </div>\n                    <div className=\"info-item\">\n                        <h3>사용 기술</h3>\n                        <p>HTML, CSS, JavaScript</p>\n                    </div>\n                    <div className=\"info-item\">\n                        <h3>주요 기능</h3>\n                        <ul>\n                            <li>기본 테트리스 게임플레이</li>\n                            <li>점수 시스템</li>\n                            <li>레벨 시스템</li>\n                        </ul>\n                    </div>\n                    <div className=\"info-item\">\n                        <h3>향후 계획</h3>\n                        <ul>\n                            <li>AI 학습 모델 통합</li>\n                            <li>멀티플레이어 지원</li>\n                            <li>커스텀 테마</li>\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\nexport default Tetris;\n","import { PlayerInfo, PlayerMove } from '../types/PlayerTypes';\nimport { GameStateForAI } from '../types/GameTypes';\n\nexport interface IPlayer {\n  getInfo(): PlayerInfo;\n  \n  makeGuess(gameState: GameStateForAI): Promise<number[]>;\n  \n  isReady(): boolean;\n  \n  onTurnStart?(): void;\n  \n  onTurnEnd?(move: PlayerMove): void;\n  \n  reset(): void;\n}\n\nexport abstract class BasePlayer implements IPlayer {\n  protected playerInfo: PlayerInfo;\n  protected ready: boolean = false;\n\n  constructor(playerInfo: PlayerInfo) {\n    this.playerInfo = playerInfo;\n  }\n\n  getInfo(): PlayerInfo {\n    return this.playerInfo;\n  }\n\n  isReady(): boolean {\n    return this.ready;\n  }\n\n  abstract makeGuess(gameState: GameStateForAI): Promise<number[]>;\n\n  onTurnStart(): void {\n    // Override in subclasses if needed\n  }\n\n  onTurnEnd(move: PlayerMove): void {\n    // Override in subclasses if needed\n  }\n\n  reset(): void {\n    this.ready = false;\n  }\n}","import { BasePlayer } from './BasePlayer';\nimport { PlayerInfo } from '../types/PlayerTypes';\nimport { GameStateForAI } from '../types/GameTypes';\n\nexport class HumanPlayer extends BasePlayer {\n  private resolveGuess?: (indices: number[]) => void;\n  \n  constructor(playerInfo: PlayerInfo) {\n    super(playerInfo);\n    this.ready = true;\n  }\n\n  async makeGuess(gameState: GameStateForAI): Promise<number[]> {\n    return new Promise<number[]>((resolve) => {\n      this.resolveGuess = resolve;\n    });\n  }\n\n  submitGuess(indices: number[]): void {\n    if (this.resolveGuess) {\n      this.resolveGuess(indices);\n      this.resolveGuess = undefined;\n    }\n  }\n\n  isWaitingForInput(): boolean {\n    return this.resolveGuess !== undefined;\n  }\n\n  reset(): void {\n    super.reset();\n    this.resolveGuess = undefined;\n    this.ready = true;\n  }\n}","import { BasePlayer } from './BasePlayer';\nimport { PlayerInfo } from '../types/PlayerTypes';\nimport { GameStateForAI } from '../types/GameTypes';\nimport { AIStrategy } from '../strategies/AIStrategy';\n\nexport class BuiltInAIPlayer extends BasePlayer {\n  private strategy: AIStrategy;\n  private thinkingTime: number = 2000; // 2 seconds by default\n  \n  constructor(playerInfo: PlayerInfo, strategy: AIStrategy) {\n    super(playerInfo);\n    this.strategy = strategy;\n    this.ready = true;\n  }\n\n  async makeGuess(gameState: GameStateForAI): Promise<number[]> {\n    const startTime = Date.now();\n    \n    const selectedIndices = this.strategy.selectKeywords(gameState);\n    \n    const elapsedTime = Date.now() - startTime;\n    const remainingTime = Math.max(0, this.thinkingTime - elapsedTime);\n    \n    if (remainingTime > 0) {\n      await new Promise(resolve => setTimeout(resolve, remainingTime));\n    }\n    \n    return selectedIndices;\n  }\n\n  setThinkingTime(milliseconds: number): void {\n    this.thinkingTime = Math.max(500, milliseconds);\n  }\n\n  getStrategy(): AIStrategy {\n    return this.strategy;\n  }\n\n  setStrategy(strategy: AIStrategy): void {\n    this.strategy = strategy;\n  }\n}","import { BasePlayer } from './BasePlayer';\nimport { PlayerInfo } from '../types/PlayerTypes';\nimport { GameStateForAI } from '../types/GameTypes';\n\nexport class CustomAIPlayer extends BasePlayer {\n  private aiCode: string;\n  private aiLanguage: 'javascript' | 'typescript';\n  private executeTimeout: number = 5000; // 5 seconds max execution time\n  \n  constructor(playerInfo: PlayerInfo) {\n    super(playerInfo);\n    this.aiCode = playerInfo.customCode || '';\n    this.aiLanguage = playerInfo.customLanguage || 'javascript';\n    this.ready = this.validateCode();\n  }\n\n  async makeGuess(gameState: GameStateForAI): Promise<number[]> {\n    try {\n      const result = await this.executeAICode(gameState);\n      \n      if (!Array.isArray(result)) {\n        throw new Error('AI function must return an array of indices');\n      }\n      \n      const validIndices = result.filter(idx => \n        typeof idx === 'number' && \n        idx >= 0 && \n        idx < gameState.keywords.length &&\n        !gameState.revealedWrongAnswers.includes(idx)\n      );\n      \n      if (validIndices.length > gameState.answerCount) {\n        return validIndices.slice(0, gameState.answerCount);\n      }\n      \n      while (validIndices.length < gameState.answerCount) {\n        const availableIndices = Array.from(\n          { length: gameState.keywords.length }, \n          (_, i) => i\n        ).filter(idx => \n          !validIndices.includes(idx) && \n          !gameState.revealedWrongAnswers.includes(idx)\n        );\n        \n        if (availableIndices.length === 0) break;\n        \n        const randomIdx = availableIndices[Math.floor(Math.random() * availableIndices.length)];\n        validIndices.push(randomIdx);\n      }\n      \n      return validIndices;\n    } catch (error) {\n      console.error('Custom AI execution error:', error);\n      return this.fallbackStrategy(gameState);\n    }\n  }\n\n  private async executeAICode(gameState: GameStateForAI): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const timeout = setTimeout(() => {\n        reject(new Error('AI code execution timeout'));\n      }, this.executeTimeout);\n\n      try {\n        const func = new Function('gameState', `\n          ${this.aiCode}\n          \n          if (typeof makeGuess === 'function') {\n            return makeGuess(gameState);\n          } else {\n            throw new Error('makeGuess function not found');\n          }\n        `);\n        \n        const result = func(gameState);\n        clearTimeout(timeout);\n        resolve(result);\n      } catch (error) {\n        clearTimeout(timeout);\n        reject(error);\n      }\n    });\n  }\n\n  private fallbackStrategy(gameState: GameStateForAI): number[] {\n    const availableIndices = Array.from(\n      { length: gameState.keywords.length }, \n      (_, i) => i\n    ).filter(idx => !gameState.revealedWrongAnswers.includes(idx));\n    \n    const selectedIndices = [...gameState.revealedAnswers];\n    \n    while (selectedIndices.length < gameState.answerCount && availableIndices.length > 0) {\n      const remaining = availableIndices.filter(idx => !selectedIndices.includes(idx));\n      if (remaining.length === 0) break;\n      \n      const randomIdx = remaining[Math.floor(Math.random() * remaining.length)];\n      selectedIndices.push(randomIdx);\n    }\n    \n    return selectedIndices;\n  }\n\n  private validateCode(): boolean {\n    if (!this.aiCode.trim()) return false;\n    \n    try {\n      new Function('gameState', this.aiCode + '\\n return typeof makeGuess === \"function\";');\n      return true;\n    } catch (error) {\n      console.error('AI code validation error:', error);\n      return false;\n    }\n  }\n\n  updateCode(code: string, language: 'javascript' | 'typescript'): void {\n    this.aiCode = code;\n    this.aiLanguage = language;\n    this.ready = this.validateCode();\n  }\n\n  getCode(): string {\n    return this.aiCode;\n  }\n\n  getLanguage(): 'javascript' | 'typescript' {\n    return this.aiLanguage;\n  }\n}","import { AIStrategy } from './AIStrategy';\nimport { GameStateForAI } from '../types/GameTypes';\n\nexport class EasyStrategy implements AIStrategy {\n  selectKeywords(gameState: GameStateForAI): number[] {\n    const { keywords, revealedAnswers, revealedWrongAnswers, answerCount, previousGuesses, myHints } = gameState;\n\n    // 1. 점수 맵 초기화\n    const scores = new Map<number, number>();\n    for (let i = 0; i < keywords.length; i++) {\n      scores.set(i, 0);\n    }\n\n    // 2. 추측 기록을 바탕으로 점수 계산\n    previousGuesses.forEach(guess => {\n      const { guess: guessedIndices, correctCount } = guess;\n      \n      if (correctCount === 0) {\n        // 정답이 하나도 없는 경우, 해당 키워드들은 오답일 확률이 높음\n        guessedIndices.forEach(idx => {\n          scores.set(idx, (scores.get(idx) || 0) - 5); // 큰 음수 점수 부여\n        });\n      } else {\n        // 정답이 있는 경우, 포함된 키워드들에 점수 부여\n        const points = correctCount / guessedIndices.length; // 정답률에 기반한 점수\n        guessedIndices.forEach(idx => {\n          scores.set(idx, (scores.get(idx) || 0) + points);\n        });\n      }\n    });\n\n    // 3. 사용 불가능한 키워드 제외\n    const excludedIndices = new Set([...revealedWrongAnswers, ...myHints]);\n    excludedIndices.forEach(idx => {\n      scores.delete(idx);\n    });\n\n    // 4. 최종 후보 선정\n    const selected = [...revealedAnswers];\n    \n    // 점수가 높은 순으로 후보 정렬\n    const candidates = Array.from(scores.entries())\n      .filter(([idx]) => !selected.includes(idx) && !excludedIndices.has(idx))\n      .sort((a, b) => b[1] - a[1]);\n\n    // 5. 정답 개수만큼 선택\n    const needed = answerCount - selected.length;\n    if (needed > 0) {\n      // 상위 후보 그룹에서 약간의 무작위성을 섞어 선택\n      const topCandidates = candidates.slice(0, Math.max(needed * 2, 10));\n      const shuffledTop = [...topCandidates].sort(() => Math.random() - 0.5);\n      \n      shuffledTop.slice(0, needed).forEach(candidate => {\n        selected.push(candidate[0]);\n      });\n    }\n    \n    // 만약 수가 부족하면 나머지에서 랜덤으로 채움\n    if (selected.length < answerCount) {\n        const remainingCandidates = candidates.filter(c => !selected.includes(c[0]));\n        const stillNeeded = answerCount - selected.length;\n        remainingCandidates.slice(0, stillNeeded).forEach(candidate => {\n            selected.push(candidate[0]);\n        });\n    }\n\n    return selected;\n  }\n\n  getStrategyName(): string {\n    return 'Easy AI';\n  }\n\n  getDescription(): string {\n    return '과거 추측의 정답률을 기반으로 키워드 점수를 매겨 추측합니다.';\n  }\n}\n","import { AIStrategy } from './AIStrategy';\nimport { GameStateForAI } from '../types/GameTypes';\n\nexport class MediumStrategy implements AIStrategy {\n  selectKeywords(gameState: GameStateForAI): number[] {\n    const { keywords, revealedAnswers, revealedWrongAnswers, answerCount, previousGuesses, myHints } = gameState;\n\n    const scores = new Map<number, number>();\n    for (let i = 0; i < keywords.length; i++) {\n      scores.set(i, 0);\n    }\n\n    // 1. 기본 점수 계산\n    previousGuesses.forEach(guess => {\n      const { guess: guessedIndices, correctCount } = guess;\n      const points = correctCount > 0 ? correctCount / guessedIndices.length : -1;\n      guessedIndices.forEach(idx => {\n        scores.set(idx, (scores.get(idx) || 0) + points);\n      });\n    });\n\n    // 2. 추측 비교를 통한 고급 추론\n    for (let i = 0; i < previousGuesses.length; i++) {\n      for (let j = i + 1; j < previousGuesses.length; j++) {\n        const guessA = previousGuesses[i];\n        const guessB = previousGuesses[j];\n\n        const setA = new Set(guessA.guess);\n        const setB = new Set(guessB.guess);\n\n        const diffA = guessA.guess.filter(x => !setB.has(x));\n        const diffB = guessB.guess.filter(x => !setA.has(x));\n        const correctDiff = guessA.correctCount - guessB.correctCount;\n\n        // Case 1: 결정적 단서 (1:1 차이)\n        if (diffA.length === 1 && diffB.length === 1) {\n          const keywordA = diffA[0];\n          const keywordB = diffB[0];\n          if (correctDiff === 1) {\n            scores.set(keywordA, (scores.get(keywordA) || 0) + 10); // A는 정답 확정\n            scores.set(keywordB, (scores.get(keywordB) || 0) - 10); // B는 오답 확정\n          } else if (correctDiff === -1) {\n            scores.set(keywordB, (scores.get(keywordB) || 0) + 10);\n            scores.set(keywordA, (scores.get(keywordA) || 0) - 10);\n          }\n        }\n        // Case 2: 강력한 힌트 (N:M 차이)\n        else if (diffA.length > 0 && diffB.length > 0 && Math.abs(correctDiff) > 0) {\n            // {D, E} 그룹이 {F, G} 그룹보다 정답이 N개 더 많다.\n            // 이 정보의 신뢰도 = 정답 차이 / 키워드 차이의 합\n            const hintStrength = Math.abs(correctDiff) / (diffA.length + diffB.length);\n            const bonusPoints = 3 * hintStrength; // 신뢰도에 비례한 보너스\n\n            if (correctDiff > 0) { // diffA 그룹이 더 정답에 가까움\n                diffA.forEach(idx => scores.set(idx, (scores.get(idx) || 0) + bonusPoints));\n                diffB.forEach(idx => scores.set(idx, (scores.get(idx) || 0) - bonusPoints));\n            } else { // diffB 그룹이 더 정답에 가까움\n                diffB.forEach(idx => scores.set(idx, (scores.get(idx) || 0) + bonusPoints));\n                diffA.forEach(idx => scores.set(idx, (scores.get(idx) || 0) - bonusPoints));\n            }\n        }\n      }\n    }\n\n    const excludedIndices = new Set([...revealedWrongAnswers, ...myHints, ...revealedAnswers]);\n    excludedIndices.forEach(idx => {\n      scores.delete(idx);\n    });\n\n    const candidates = Array.from(scores.entries()).sort((a, b) => b[1] - a[1]);\n\n    const selected = [...revealedAnswers];\n    const needed = answerCount - selected.length;\n\n    if (needed > 0) {\n        const finalCandidates = candidates.map(c => c[0]).filter(idx => !selected.includes(idx));\n        selected.push(...finalCandidates.slice(0, needed));\n    }\n\n    // 최종 선택지가 부족할 경우, 제외되지 않은 키워드 중에서 무작위로 추가\n    if (selected.length < answerCount) {\n        const allIndices = Array.from({length: keywords.length}, (_, i) => i);\n        const remainingCandidates = allIndices.filter(idx => !excludedIndices.has(idx) && !selected.includes(idx));\n        const shuffled = remainingCandidates.sort(() => Math.random() - 0.5);\n        const stillNeeded = answerCount - selected.length;\n        selected.push(...shuffled.slice(0, stillNeeded));\n    }\n\n    return selected;\n  }\n\n  getStrategyName(): string {\n    return 'Medium AI';\n  }\n\n  getDescription(): string {\n    return '추측들을 정교하게 비교하여 논리적인 단서를 찾고, 이를 기반으로 추측합니다.';\n  }\n}\n","import { AIStrategy } from './AIStrategy';\nimport { GameStateForAI } from '../types/GameTypes';\nimport { MediumStrategy } from './MediumStrategy'; // 폴백 전략으로 사용\n\nexport class HardStrategy implements AIStrategy {\n  private fallbackStrategy: AIStrategy;\n\n  constructor() {\n    // Hard 전략 실패 시 Medium 전략을 사용\n    this.fallbackStrategy = new MediumStrategy();\n  }\n\n  selectKeywords(gameState: GameStateForAI): number[] {\n    const { keywords, answerCount, previousGuesses, revealedAnswers, revealedWrongAnswers, myHints } = gameState;\n\n    // 1. 모든 제약조건을 만족하는 정답 후보(가설) 찾기\n    const validHypotheses = this.findValidHypotheses(gameState);\n\n    // 2. 상황에 따른 최종 추측 결정\n    if (validHypotheses.length === 1) {\n      // 정답을 찾은 경우: 유일한 후보를 제출\n      console.log('Hard AI: 정답을 찾았습니다!', validHypotheses[0]);\n      return validHypotheses[0];\n    } else if (validHypotheses.length > 1) {\n      // 여러 후보가 있는 경우: 정보 이득이 가장 큰 추측을 선택 (여기서는 첫번째 후보 선택으로 단순화)\n      console.log(`Hard AI: ${validHypotheses.length}개의 후보를 찾았습니다.`, validHypotheses);\n      return validHypotheses[0];\n    } else {\n      // 후보를 찾지 못한 경우: Medium 전략으로 폴백\n      console.log('Hard AI: 후보를 찾지 못해 Medium 전략으로 전환합니다.');\n      return this.fallbackStrategy.selectKeywords(gameState);\n    }\n  }\n\n  private findValidHypotheses(gameState: GameStateForAI): number[][] {\n    const { keywords, answerCount, previousGuesses, revealedAnswers, revealedWrongAnswers, myHints } = gameState;\n    const startTime = Date.now();\n\n    // CSP(제약 만족 문제)의 변수 도메인 설정\n    const mustBeAnswers = new Set(revealedAnswers);\n    const mustBeWrongs = new Set([...revealedWrongAnswers, ...myHints]);\n\n    // Medium 전략을 사용하여 가능성 높은 후보군 추리기 (계산량 감소)\n    const mediumStrategy = new MediumStrategy();\n    const mediumGuess = mediumStrategy.selectKeywords(gameState);\n    const combinedArray = Array.from(mustBeAnswers).concat(mediumGuess);\n    const potentialCandidates = new Set(combinedArray);\n    \n    const searchSpace = Array.from(potentialCandidates).filter(idx => !mustBeWrongs.has(idx));\n\n    const validHypotheses: number[][] = [];\n\n    // 조합 생성 및 검증 함수\n    const findCombinations = (startIndex: number, currentCombo: number[]) => {\n      // 시간 초과 방지\n      if (Date.now() - startTime > 500) return;\n      if (validHypotheses.length > 10) return; // 너무 많은 후보가 나오면 탐색 중지\n\n      if (currentCombo.length === answerCount) {\n        // 가설이 생성되면 모든 제약조건(과거 추측)을 만족하는지 검증\n        if (this.validateHypothesis(currentCombo, previousGuesses)) {\n          validHypotheses.push([...currentCombo]);\n        }\n        return;\n      }\n\n      if (startIndex >= searchSpace.length) return;\n\n      // 현재 키워드를 포함하는 경우\n      currentCombo.push(searchSpace[startIndex]);\n      findCombinations(startIndex + 1, currentCombo);\n      currentCombo.pop();\n\n      // 현재 키워드를 포함하지 않는 경우\n      // 남은 키워드 수로 정답을 채울 수 있는지 확인 (가지치기)\n      if (searchSpace.length - (startIndex + 1) >= answerCount - currentCombo.length) {\n        findCombinations(startIndex + 1, currentCombo);\n      }\n    };\n\n    findCombinations(0, []);\n    return validHypotheses;\n  }\n\n  /**\n   * 주어진 가설이 모든 과거 추측(제약조건)과 일치하는지 검증\n   * @param hypothesis - 검증할 정답 후보 배열 (예: [1, 5, 8, 12, 15])\n   * @param guesses - 과거 모든 추측 기록\n   */\n  private validateHypothesis(hypothesis: number[], guesses: GameStateForAI['previousGuesses']): boolean {\n    const hypothesisSet = new Set(hypothesis);\n\n    for (const guess of guesses) {\n      const intersectionSize = guess.guess.filter(g => hypothesisSet.has(g)).length;\n      if (intersectionSize !== guess.correctCount) {\n        // 단 하나의 추측이라도 모순되면, 이 가설은 유효하지 않음\n        return false;\n      }\n    }\n    // 모든 추측과 일치하면 유효한 가설\n    return true;\n  }\n\n  getStrategyName(): string {\n    return 'Hard AI';\n  }\n\n  getDescription(): string {\n    return '과거의 모든 추측을 논리적 제약조건으로 사용하여, 이를 만족하는 정답 후보를 찾아냅니다.';\n  }\n}\n","import { IPlayer } from './players/BasePlayer';\nimport { HumanPlayer } from './players/HumanPlayer';\nimport { BuiltInAIPlayer } from './players/BuiltInAIPlayer';\nimport { CustomAIPlayer } from './players/CustomAIPlayer';\nimport { PlayerInfo, PlayerType } from './types/PlayerTypes';\nimport { AIStrategy } from './strategies/AIStrategy';\nimport { EasyStrategy } from './strategies/EasyStrategy';\nimport { MediumStrategy } from './strategies/MediumStrategy';\nimport { HardStrategy } from './strategies/HardStrategy';\n\nexport class PlayerFactory {\n  private static strategyCache: Map<string, AIStrategy> = new Map();\n\n  static createPlayer(playerInfo: PlayerInfo): IPlayer {\n    switch (playerInfo.type) {\n      case 'human':\n        return new HumanPlayer(playerInfo);\n        \n      case 'built-in-ai':\n        const strategy = this.getStrategy(playerInfo.aiDifficulty || 'medium');\n        return new BuiltInAIPlayer(playerInfo, strategy);\n        \n      case 'custom-ai':\n        return new CustomAIPlayer(playerInfo);\n        \n      default:\n        throw new Error(`Unknown player type: ${playerInfo.type}`);\n    }\n  }\n\n  private static getStrategy(difficulty: 'easy' | 'medium' | 'hard'): AIStrategy {\n    if (!this.strategyCache.has(difficulty)) {\n      let strategy: AIStrategy;\n      \n      switch (difficulty) {\n        case 'easy':\n          strategy = new EasyStrategy();\n          break;\n        case 'medium':\n          strategy = new MediumStrategy();\n          break;\n        case 'hard':\n          strategy = new HardStrategy();\n          break;\n        default:\n          strategy = new MediumStrategy();\n      }\n      \n      this.strategyCache.set(difficulty, strategy);\n    }\n    \n    return this.strategyCache.get(difficulty)!;\n  }\n\n  static createBuiltInAIOpponent(\n    id: number, \n    difficulty: 'easy' | 'medium' | 'hard' = 'medium'\n  ): IPlayer {\n    const playerInfo: PlayerInfo = {\n      id,\n      nickname: `AI (${difficulty === 'easy' ? '쉬움' : difficulty === 'medium' ? '보통' : '어려움'})`,\n      type: 'built-in-ai',\n      aiDifficulty: difficulty\n    };\n    \n    return this.createPlayer(playerInfo);\n  }\n\n  static isHumanPlayer(player: IPlayer): player is HumanPlayer {\n    return player instanceof HumanPlayer;\n  }\n\n  static isBuiltInAIPlayer(player: IPlayer): player is BuiltInAIPlayer {\n    return player instanceof BuiltInAIPlayer;\n  }\n\n  static isCustomAIPlayer(player: IPlayer): player is CustomAIPlayer {\n    return player instanceof CustomAIPlayer;\n  }\n}","import { IPlayer } from './players/BasePlayer';\nimport { HumanPlayer } from './players/HumanPlayer';\nimport { GameContext, GameStateForAI, TurnResult } from './types/GameTypes';\nimport { PlayerFactory } from './PlayerFactory';\n\nexport interface GameManagerConfig {\n  keywordPoolSize: number;\n  answerCount: number;\n  hintCount: number;\n  timeLimit: number;\n  maxTurns?: number;\n}\n\nexport class GameManager {\n  private players: IPlayer[] = [];\n  private currentPlayerIndex: number = 0;\n  private gameContext: GameContext;\n  private config: GameManagerConfig;\n  private isGameRunning: boolean = false;\n  private turnTimer?: NodeJS.Timeout;\n  private turnStartTime: number = 0;\n  \n  private onTurnStart?: (player: IPlayer) => void;\n  private onTurnEnd?: (result: TurnResult) => void;\n  private onGameEnd?: (winner?: IPlayer) => void;\n  private onTimerTick?: (remainingTime: number) => void;\n\n  constructor(config: GameManagerConfig) {\n    this.config = config;\n    this.gameContext = {\n      keywords: [],\n      answers: [],\n      playerHints: {},\n      currentTurn: 0,\n      turnHistory: [],\n      revealedAnswers: [],\n      revealedWrongAnswers: []\n    };\n  }\n\n  addPlayer(player: IPlayer): void {\n    if (this.isGameRunning) {\n      throw new Error('Cannot add players while game is running');\n    }\n    this.players.push(player);\n  }\n\n  setPlayers(players: IPlayer[]): void {\n    if (this.isGameRunning) {\n      throw new Error('Cannot set players while game is running');\n    }\n    this.players = players;\n  }\n\n  getCurrentPlayer(): IPlayer | null {\n    if (!this.isGameRunning || this.players.length === 0) return null;\n    return this.players[this.currentPlayerIndex];\n  }\n\n  getPlayers(): IPlayer[] {\n    return [...this.players];\n  }\n\n  getGameContext(): GameContext {\n    return { ...this.gameContext };\n  }\n\n  async startGame(keywords: string[], answers: number[], playerHints: { [playerId: number]: number[] }): Promise<void> {\n    if (this.players.length === 0) {\n      throw new Error('No players added to the game');\n    }\n\n    this.gameContext = {\n      keywords,\n      answers,\n      playerHints,\n      currentTurn: 1,\n      turnHistory: [],\n      revealedAnswers: [],\n      revealedWrongAnswers: []\n    };\n\n    this.currentPlayerIndex = 0;\n    this.isGameRunning = true;\n\n    await this.startNextTurn();\n  }\n\n  private async startNextTurn(): Promise<void> {\n    if (!this.isGameRunning) return;\n\n    const currentPlayer = this.getCurrentPlayer();\n    if (!currentPlayer) return;\n\n    // 턴 시작 시간 기록\n    this.turnStartTime = Date.now();\n\n    if (this.onTurnStart) {\n      this.onTurnStart(currentPlayer);\n    }\n\n    currentPlayer.onTurnStart?.();\n\n    if (PlayerFactory.isHumanPlayer(currentPlayer)) {\n      this.startTurnTimer();\n      // 인간 플레이어의 경우에도 makeGuess를 호출하여 Promise를 생성\n      const gameStateForAI = this.createGameStateForAI(currentPlayer);\n      currentPlayer.makeGuess(gameStateForAI).then(guess => {\n        this.processTurn(guess);\n      });\n    } else {\n      const gameStateForAI = this.createGameStateForAI(currentPlayer);\n      const guess = await currentPlayer.makeGuess(gameStateForAI);\n      await this.processTurn(guess);\n    }\n  }\n\n  private startTurnTimer(): void {\n    let remainingTime = this.config.timeLimit;\n    \n    if (this.onTimerTick) {\n      this.onTimerTick(remainingTime);\n    }\n\n    this.turnTimer = setInterval(() => {\n      remainingTime--;\n      \n      if (this.onTimerTick) {\n        this.onTimerTick(remainingTime);\n      }\n\n      if (remainingTime <= 0) {\n        this.handleTimeout();\n      }\n    }, 1000);\n  }\n\n  private stopTurnTimer(): void {\n    if (this.turnTimer) {\n      clearInterval(this.turnTimer);\n      this.turnTimer = undefined;\n    }\n  }\n\n  private handleTimeout(): void {\n    this.stopTurnTimer();\n    \n    const currentPlayer = this.getCurrentPlayer();\n    if (!currentPlayer) return;\n    \n    const availableIndices = Array.from(\n      { length: this.gameContext.keywords.length },\n      (_, i) => i\n    ).filter(idx => !this.gameContext.revealedWrongAnswers.includes(idx));\n    \n    const shuffled = [...availableIndices].sort(() => Math.random() - 0.5);\n    const autoGuess = shuffled.slice(0, this.config.answerCount);\n    \n    if (PlayerFactory.isHumanPlayer(currentPlayer)) {\n      // HumanPlayer의 경우 submitGuess를 통해 Promise를 resolve\n      currentPlayer.submitGuess(autoGuess);\n    } else {\n      this.processTurn(autoGuess);\n    }\n  }\n\n  async submitHumanGuess(indices: number[]): Promise<void> {\n    const currentPlayer = this.getCurrentPlayer();\n    \n    if (!currentPlayer || !PlayerFactory.isHumanPlayer(currentPlayer)) {\n      throw new Error('Current player is not a human player');\n    }\n\n    this.stopTurnTimer();\n    currentPlayer.submitGuess(indices);\n    // processTurn은 makeGuess Promise가 resolve될 때 자동으로 호출됨\n  }\n\n  private async processTurn(guess: number[]): Promise<void> {\n    const currentPlayer = this.getCurrentPlayer();\n    if (!currentPlayer) return;\n\n    const correctCount = guess.filter(idx => \n      this.gameContext.answers.includes(idx)\n    ).length;\n\n    const isWinner = correctCount === this.config.answerCount && \n                     guess.every(idx => this.gameContext.answers.includes(idx));\n\n    // 실제 사용 시간 계산\n    const actualTimeUsed = Math.round((Date.now() - this.turnStartTime) / 1000);\n    \n    const turnResult: TurnResult = {\n      playerId: currentPlayer.getInfo().id,\n      playerName: currentPlayer.getInfo().nickname,\n      guess: [...guess],\n      guessKeywords: guess.map(idx => this.gameContext.keywords[idx]),\n      correctCount,\n      turnNumber: this.gameContext.currentTurn,\n      timeUsed: actualTimeUsed\n    };\n\n    this.gameContext.turnHistory.push(turnResult);\n    \n    currentPlayer.onTurnEnd?.({\n      selectedIndices: guess,\n      timeUsed: turnResult.timeUsed,\n      timestamp: Date.now()\n    });\n\n    if (this.onTurnEnd) {\n      this.onTurnEnd(turnResult);\n    }\n\n    if (isWinner) {\n      this.endGame(currentPlayer);\n    } else if (this.config.maxTurns && this.gameContext.currentTurn >= this.config.maxTurns) {\n      this.endGame();\n    } else {\n      this.gameContext.currentTurn++;\n      this.currentPlayerIndex = (this.currentPlayerIndex + 1) % this.players.length;\n      await this.startNextTurn();\n    }\n  }\n\n  private createGameStateForAI(player: IPlayer): GameStateForAI {\n    const playerInfo = player.getInfo();\n    const myHints = this.gameContext.playerHints[playerInfo.id] || [];\n    \n    const previousGuesses = this.gameContext.turnHistory.map(turn => ({\n      playerId: turn.playerId,\n      guess: turn.guess,\n      correctCount: turn.correctCount\n    }));\n\n    return {\n      keywords: [...this.gameContext.keywords],\n      myHints,\n      previousGuesses,\n      revealedAnswers: [...this.gameContext.revealedAnswers],\n      revealedWrongAnswers: [...this.gameContext.revealedWrongAnswers],\n      answerCount: this.config.answerCount,\n      currentTurn: this.gameContext.currentTurn,\n      maxTurns: this.config.maxTurns,\n      timeLimit: this.config.timeLimit\n    };\n  }\n\n  revealAnswer(): boolean {\n    const unrevealedAnswers = this.gameContext.answers.filter(\n      ans => !this.gameContext.revealedAnswers.includes(ans)\n    );\n    \n    if (unrevealedAnswers.length === 0) return false;\n    \n    const randomAnswer = unrevealedAnswers[\n      Math.floor(Math.random() * unrevealedAnswers.length)\n    ];\n    \n    this.gameContext.revealedAnswers.push(randomAnswer);\n    return true;\n  }\n\n  revealWrongAnswer(): boolean {\n    const wrongAnswers = Array.from(\n      { length: this.gameContext.keywords.length },\n      (_, i) => i\n    ).filter(idx => \n      !this.gameContext.answers.includes(idx) && \n      !this.gameContext.revealedWrongAnswers.includes(idx)\n    );\n    \n    if (wrongAnswers.length === 0) return false;\n    \n    const randomWrong = wrongAnswers[\n      Math.floor(Math.random() * wrongAnswers.length)\n    ];\n    \n    this.gameContext.revealedWrongAnswers.push(randomWrong);\n    return true;\n  }\n\n  private endGame(winner?: IPlayer): void {\n    this.stopTurnTimer();\n    this.isGameRunning = false;\n    \n    if (this.onGameEnd) {\n      this.onGameEnd(winner);\n    }\n  }\n\n  stopGame(): void {\n    this.stopTurnTimer();\n    this.isGameRunning = false;\n    this.players.forEach(player => player.reset());\n  }\n\n  isRunning(): boolean {\n    return this.isGameRunning;\n  }\n\n  setEventHandlers(handlers: {\n    onTurnStart?: (player: IPlayer) => void;\n    onTurnEnd?: (result: TurnResult) => void;\n    onGameEnd?: (winner?: IPlayer) => void;\n    onTimerTick?: (remainingTime: number) => void;\n  }): void {\n    this.onTurnStart = handlers.onTurnStart;\n    this.onTurnEnd = handlers.onTurnEnd;\n    this.onGameEnd = handlers.onGameEnd;\n    this.onTimerTick = handlers.onTimerTick;\n  }\n}","import React, { useState, useEffect, useRef } from 'react';\nimport './DeductionGame.css';\nimport { GameManager } from './ai/GameManager';\nimport { PlayerFactory } from './ai/PlayerFactory';\nimport { IPlayer } from './ai/players/BasePlayer';\nimport { HumanPlayer } from './ai/players/HumanPlayer';\nimport { PlayerInfo, PlayerType } from './ai/types/PlayerTypes';\n\ntype GameScreen = 'mode-selection' | 'difficulty-selection' | 'player-setup' | 'game-config' | 'game-preparation' | 'game';\ntype GameMode = 'solo' | 'multi';\n\ninterface GameConfig {\n  keywordPoolSize: number;\n  answerCount: number;\n  hintCount: number;\n  timeLimit: number;\n  maxTurns?: number;\n  difficulty: 'beginner' | 'intermediate' | 'advanced' | 'custom';\n}\n\ninterface GameState {\n  keywords: string[];\n  answers: number[];\n  playerHints: { [playerId: number]: number[] };\n  isReady: boolean;\n  currentTurn: number;\n  turnHistory: TurnResult[];\n  gameStatus: 'playing' | 'finished';\n  winner?: number;\n  revealedAnswers: number[];\n  revealedWrongAnswers: number[];\n  hintsViewed: { [playerId: number]: boolean };\n}\n\ninterface TurnResult {\n  playerId: number;\n  playerName: string;\n  guess: number[];\n  guessKeywords: string[];\n  correctCount: number;\n  turnNumber: number;\n  timeUsed: number;\n}\n\ninterface PlayerConfig {\n  id: number;\n  nickname: string;\n  type: PlayerType;\n  aiCode?: string;\n  aiLanguage?: 'javascript' | 'typescript';\n  aiDifficulty?: 'easy' | 'medium' | 'hard';\n}\n\nconst DeductionGame: React.FC = () => {\n  const [currentScreen, setCurrentScreen] = useState<GameScreen>('mode-selection');\n  const [gameMode, setGameMode] = useState<GameMode>('solo');\n  const [playerCount, setPlayerCount] = useState(2);\n  const [players, setPlayers] = useState<PlayerConfig[]>([]);\n  const [gameConfig, setGameConfig] = useState<GameConfig>({\n    keywordPoolSize: 50,\n    answerCount: 5,\n    hintCount: 5,\n    timeLimit: 60,\n    maxTurns: 20,\n    difficulty: 'intermediate'\n  });\n  const [gameState, setGameState] = useState<GameState>({\n    keywords: [],\n    answers: [],\n    playerHints: {},\n    isReady: false,\n    currentTurn: 0,\n    turnHistory: [],\n    gameStatus: 'playing',\n    revealedAnswers: [],\n    revealedWrongAnswers: [],\n    hintsViewed: {}\n  });\n  const [preparationStep, setPreparationStep] = useState(0);\n  const [selectedKeywords, setSelectedKeywords] = useState<number[]>([]);\n  const [timeRemaining, setTimeRemaining] = useState(0);\n  const [isMyTurn, setIsMyTurn] = useState(false);\n  const [hintViewingPhase, setHintViewingPhase] = useState(false);\n  const [currentViewingPlayer, setCurrentViewingPlayer] = useState(0);\n  const [timerIntervalId, setTimerIntervalId] = useState<NodeJS.Timeout | null>(null);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [aiTimeoutId, setAiTimeoutId] = useState<NodeJS.Timeout | null>(null);\n  const [soloDifficulty, setSoloDifficulty] = useState<'easy' | 'medium' | 'hard'>('medium');\n  const [isAIThinking, setIsAIThinking] = useState(false);\n  const gameManagerRef = useRef<GameManager | null>(null);\n  const [turnStartTime, setTurnStartTime] = useState<number>(0);\n  const [codeEditorModal, setCodeEditorModal] = useState<{ isOpen: boolean; playerId: number | null }>({ \n    isOpen: false, \n    playerId: null \n  });\n\n  const handleModeSelect = (mode: GameMode) => {\n    setGameMode(mode);\n    if (mode === 'solo') {\n      // 솔로 모드는 난이도 선택 화면으로\n      setCurrentScreen('difficulty-selection');\n    } else {\n      // 멀티 모드는 플레이어 수 선택 후 설정\n      setPlayers([]);\n      setCurrentScreen('player-setup');\n    }\n  };\n\n  const handleDifficultySelect = (difficulty: 'easy' | 'medium' | 'hard') => {\n    setSoloDifficulty(difficulty);\n    setPlayerCount(2);\n    setPlayers([\n      { id: 1, nickname: '', type: 'human', aiLanguage: 'javascript' },\n      { id: 2, nickname: `AI (${difficulty === 'easy' ? '쉬움' : difficulty === 'medium' ? '보통' : '어려움'})`, type: 'built-in-ai', aiDifficulty: difficulty }\n    ]);\n    setCurrentScreen('player-setup');\n  };\n\n  const handlePlayerCountSelect = (count: number) => {\n    setPlayerCount(count);\n    const newPlayers: PlayerConfig[] = [];\n    for (let i = 1; i <= count; i++) {\n      newPlayers.push({\n        id: i,\n        nickname: '',\n        type: 'human',\n        aiLanguage: 'javascript'\n      });\n    }\n    setPlayers(newPlayers);\n  };\n\n  const updatePlayer = (id: number, updates: Partial<PlayerConfig>) => {\n    setPlayers(prev => prev.map(player => \n      player.id === id ? { ...player, ...updates } : player\n    ));\n  };\n\n  const canStartGame = () => {\n    return players.every(player => {\n      if (!player.nickname.trim()) return false;\n      if (player.type === 'custom-ai' && !player.aiCode?.trim()) return false;\n      return true;\n    });\n  };\n\n  const handleStartGame = () => {\n    console.log('Moving to game config with players:', players);\n    setCurrentScreen('game-config');\n  };\n\n  const handleConfigComplete = () => {\n    console.log('Game config complete:', gameConfig);\n    setPreparationStep(0);\n    setCurrentScreen('game-preparation');\n    initializeGame();\n  };\n\n  // 키워드 풀 (실제로는 더 많은 키워드가 필요)\n  const keywordCategories = {\n    animals: ['사자', '호랑이', '코끼리', '기린', '원숭이', '코알라', '판다', '펭귄', '독수리', '상어', '고래', '돌고래', '토끼', '고양이', '강아지', '말', '소', '돼지', '양', '염소'],\n    foods: ['피자', '햄버거', '스파게티', '초밥', '김치찌개', '불고기', '치킨', '라면', '떡볶이', '김밥', '샐러드', '스테이크', '카레', '우동', '냉면', '비빔밥', '갈비', '삼겹살', '회', '족발'],\n    objects: ['컴퓨터', '스마트폰', '자동차', '비행기', '기차', '자전거', '책', '연필', '가방', '시계', '안경', '모자', '신발', '옷', '침대', '의자', '책상', '냉장고', '세탁기', '텔레비전'],\n    places: ['학교', '병원', '은행', '카페', '식당', '공원', '해변', '산', '도서관', '박물관', '영화관', '쇼핑몰', '시장', '교회', '지하철역', '공항', '호텔', '집', '회사', '체육관'],\n    actions: ['걷기', '뛰기', '수영', '춤추기', '노래하기', '요리하기', '공부하기', '운전하기', '그림그리기', '글쓰기', '읽기', '잠자기', '먹기', '마시기', '웃기', '울기', '생각하기', '말하기', '듣기', '보기']\n  };\n\n  const generateKeywords = (size: number): string[] => {\n    const allKeywords = Object.values(keywordCategories).flat();\n    const shuffled = [...allKeywords].sort(() => Math.random() - 0.5);\n    return shuffled.slice(0, size);\n  };\n\n  const initializeGame = async () => {\n    // 1단계: 키워드 생성\n    setPreparationStep(1);\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    const keywords = generateKeywords(gameConfig.keywordPoolSize);\n    \n    // 2단계: 정답 선택\n    setPreparationStep(2);\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    const answerIndices: number[] = [];\n    const shuffledIndices = Array.from({length: keywords.length}, (_, i) => i).sort(() => Math.random() - 0.5);\n    for (let i = 0; i < gameConfig.answerCount; i++) {\n      answerIndices.push(shuffledIndices[i]);\n    }\n    \n    // 3단계: 힌트 배포\n    setPreparationStep(3);\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    const playerHints: { [playerId: number]: number[] } = {};\n    const nonAnswerIndices = shuffledIndices.filter(i => !answerIndices.includes(i));\n    \n    players.forEach(player => {\n      const hints: number[] = [];\n      const availableHints = [...nonAnswerIndices].sort(() => Math.random() - 0.5);\n      for (let i = 0; i < gameConfig.hintCount && i < availableHints.length; i++) {\n        hints.push(availableHints[i]);\n      }\n      playerHints[player.id] = hints;\n    });\n    \n    // 4단계: 준비 완료\n    setPreparationStep(4);\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    setGameState({\n      keywords,\n      answers: answerIndices,\n      playerHints,\n      isReady: true,\n      currentTurn: 0,  // GameManager가 관리하므로 0으로 시작\n      turnHistory: [],\n      gameStatus: 'playing',\n      revealedAnswers: [],\n      revealedWrongAnswers: [],\n      hintsViewed: {}\n    });\n    \n    setPreparationStep(5); // 완료 상태\n  };\n\n\n  const startActualGame = () => {\n    // GameManager 초기화\n    const manager = new GameManager({\n      keywordPoolSize: gameConfig.keywordPoolSize,\n      answerCount: gameConfig.answerCount,\n      hintCount: gameConfig.hintCount,\n      timeLimit: gameConfig.timeLimit,\n      maxTurns: gameConfig.maxTurns\n    });\n\n    // 플레이어 생성\n    const gamePlayers: IPlayer[] = players.map(config => {\n      const playerInfo: PlayerInfo = {\n        id: config.id,\n        nickname: config.nickname,\n        type: config.type,\n        aiDifficulty: config.aiDifficulty,\n        customCode: config.aiCode,\n        customLanguage: config.aiLanguage\n      };\n      return PlayerFactory.createPlayer(playerInfo);\n    });\n\n    manager.setPlayers(gamePlayers);\n\n    // 이벤트 핸들러 설정\n    manager.setEventHandlers({\n      onTurnStart: (player) => {\n        const playerInfo = player.getInfo();\n        if (playerInfo.type === 'built-in-ai') {\n          setIsAIThinking(true);\n        }\n        setIsMyTurn(playerInfo.type === 'human');\n        // 턴 시작 시간 기록\n        setTurnStartTime(Date.now());\n        // GameManager의 currentTurn과 동기화\n        const context = manager.getGameContext();\n        setGameState(prev => ({\n          ...prev,\n          currentTurn: context.currentTurn\n        }));\n      },\n      onTurnEnd: (result) => {\n        setIsAIThinking(false);\n        setGameState(prev => ({\n          ...prev,\n          turnHistory: [...prev.turnHistory, result]\n        }));\n      },\n      onGameEnd: (winner) => {\n        if (winner) {\n          const winnerInfo = winner.getInfo();\n          setGameState(prev => ({\n            ...prev,\n            gameStatus: 'finished',\n            winner: winnerInfo.id\n          }));\n        } else {\n          setGameState(prev => ({\n            ...prev,\n            gameStatus: 'finished'\n          }));\n        }\n      },\n      onTimerTick: (remainingTime) => {\n        setTimeRemaining(remainingTime);\n      }\n    });\n\n    gameManagerRef.current = manager;\n\n    setHintViewingPhase(true);\n    setCurrentViewingPlayer(1);\n    setCurrentScreen('game');\n  };\n\n  const startTimer = () => {\n    // GameManager를 사용하는 경우 타이머를 직접 관리하지 않음\n    if (gameManagerRef.current) {\n      return;\n    }\n    \n    // 기존 타이머가 있다면 먼저 정리\n    clearTimer();\n    \n    // 턴 시작 시간 기록\n    setTurnStartTime(Date.now());\n    setTimeRemaining(gameConfig.timeLimit);\n    \n    const intervalId = setInterval(() => {\n      setTimeRemaining(prev => {\n        if (prev <= 1) {\n          // 타이머를 먼저 정리하고 handleTimeUp 호출\n          clearInterval(intervalId);\n          setTimerIntervalId(null);\n          // setTimeout으로 다음 프레임에서 실행하여 상태 업데이트 충돌 방지\n          setTimeout(() => {\n            handleTimeUp();\n          }, 0);\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n    \n    setTimerIntervalId(intervalId);\n  };\n\n  const clearTimer = () => {\n    if (timerIntervalId) {\n      clearInterval(timerIntervalId);\n      setTimerIntervalId(null);\n    }\n  };\n\n  const handleTimeUp = () => {\n    // 시간 초과시 랜덤하게 키워드 선택하여 자동 제출\n    const availableKeywords = gameState.keywords\n      .map((_, index) => index)\n      .filter(index => !gameState.revealedWrongAnswers.includes(index));\n    \n    const shuffled = [...availableKeywords].sort(() => Math.random() - 0.5);\n    const autoSelection = shuffled.slice(0, gameConfig.answerCount);\n    \n    setSelectedKeywords(autoSelection);\n    \n    // 잠시 후 자동 제출\n    setTimeout(() => {\n      submitGuessWithSelection(autoSelection);\n    }, 500);\n  };\n\n  const exitGame = () => {\n    clearTimer();\n    // AI 타임아웃도 정리\n    if (aiTimeoutId) {\n      clearTimeout(aiTimeoutId);\n      setAiTimeoutId(null);\n    }\n    // GameManager 정리\n    if (gameManagerRef.current) {\n      gameManagerRef.current.stopGame();\n      gameManagerRef.current = null;\n    }\n    setCurrentScreen('mode-selection');\n    // 게임 상태 초기화\n    setGameState({\n      keywords: [],\n      answers: [],\n      playerHints: {},\n      isReady: false,\n      currentTurn: 0,\n      turnHistory: [],\n      gameStatus: 'playing',\n      revealedAnswers: [],\n      revealedWrongAnswers: [],\n      hintsViewed: {}\n    });\n    setSelectedKeywords([]);\n    setTimeRemaining(0);\n    setIsMyTurn(false);\n    setIsAIThinking(false);\n    setHintViewingPhase(false);\n    setCurrentViewingPlayer(0);\n    setIsSubmitting(false);\n  };\n\n\n  const revealAnswerHint = () => {\n    if (gameManagerRef.current) {\n      const success = gameManagerRef.current.revealAnswer();\n      if (success) {\n        const context = gameManagerRef.current.getGameContext();\n        setGameState(prev => ({\n          ...prev,\n          revealedAnswers: context.revealedAnswers\n        }));\n      }\n    } else {\n      const unrevealedAnswers = gameState.answers.filter(ans => !gameState.revealedAnswers.includes(ans));\n      if (unrevealedAnswers.length > 0) {\n        const randomAnswer = unrevealedAnswers[Math.floor(Math.random() * unrevealedAnswers.length)];\n        setGameState(prev => ({\n          ...prev,\n          revealedAnswers: [...prev.revealedAnswers, randomAnswer]\n        }));\n      }\n    }\n  };\n\n  const revealWrongHint = () => {\n    if (gameManagerRef.current) {\n      const success = gameManagerRef.current.revealWrongAnswer();\n      if (success) {\n        const context = gameManagerRef.current.getGameContext();\n        setGameState(prev => ({\n          ...prev,\n          revealedWrongAnswers: context.revealedWrongAnswers\n        }));\n      }\n    } else {\n      const wrongAnswers = gameState.keywords\n        .map((_, index) => index)\n        .filter(index => !gameState.answers.includes(index) && !gameState.revealedWrongAnswers.includes(index));\n      \n      if (wrongAnswers.length > 0) {\n        const randomWrong = wrongAnswers[Math.floor(Math.random() * wrongAnswers.length)];\n        setGameState(prev => ({\n          ...prev,\n          revealedWrongAnswers: [...prev.revealedWrongAnswers, randomWrong]\n        }));\n      }\n    }\n  };\n\n  const toggleKeywordSelection = (keywordIndex: number) => {\n    setSelectedKeywords(prev => {\n      if (prev.includes(keywordIndex)) {\n        return prev.filter(index => index !== keywordIndex);\n      } else if (prev.length < gameConfig.answerCount) {\n        return [...prev, keywordIndex];\n      }\n      return prev;\n    });\n  };\n\n  const submitGuess = async () => {\n    if (selectedKeywords.length !== gameConfig.answerCount || isSubmitting) return;\n    \n    if (gameManagerRef.current) {\n      setIsSubmitting(true);\n      try {\n        await gameManagerRef.current.submitHumanGuess(selectedKeywords);\n        setSelectedKeywords([]);\n      } catch (error) {\n        console.error('Failed to submit guess:', error);\n      } finally {\n        setIsSubmitting(false);\n      }\n    } else {\n      submitGuessWithSelection(selectedKeywords);\n    }\n  };\n\n  const submitGuessWithSelection = (selection: number[]) => {\n    // GameManager를 사용하는 경우 이 함수를 사용하지 않음\n    if (gameManagerRef.current) return;\n    \n    if (isSubmitting) return;\n    \n    setIsSubmitting(true);\n    \n    // 타이머 정리 (새로운 타이머 시작 전에)\n    clearTimer();\n\n    const correctCount = selection.filter(index => \n      gameState.answers.includes(index)\n    ).length;\n\n    const isWinner = correctCount === gameConfig.answerCount && \n                     selection.every(index => gameState.answers.includes(index));\n\n    const currentPlayerId = ((gameState.currentTurn - 1) % players.length) + 1;\n    const currentPlayer = players.find(p => p.id === currentPlayerId);\n\n    // 실제 사용 시간 계산\n    const actualTimeUsed = turnStartTime ? Math.round((Date.now() - turnStartTime) / 1000) : gameConfig.timeLimit - timeRemaining;\n    \n    const turnResult: TurnResult = {\n      playerId: currentPlayerId,\n      playerName: currentPlayer?.nickname || `플레이어 ${currentPlayerId}`,\n      guess: [...selection],\n      guessKeywords: selection.map(index => gameState.keywords[index]),\n      correctCount,\n      turnNumber: gameState.currentTurn,\n      timeUsed: actualTimeUsed\n    };\n\n    // 최대 턴 수 확인\n    const isMaxTurnsReached = gameConfig.maxTurns && gameState.currentTurn >= gameConfig.maxTurns;\n    \n    setGameState(prev => ({\n      ...prev,\n      turnHistory: [...prev.turnHistory, turnResult],\n      currentTurn: prev.currentTurn + 1,\n      gameStatus: isWinner ? 'finished' : (isMaxTurnsReached ? 'finished' : 'playing'),\n      winner: isWinner ? currentPlayerId : undefined\n    }));\n\n    setSelectedKeywords([]);\n    \n    if (!isWinner && !isMaxTurnsReached) {\n      // 다음 턴을 위해 타이머 재시작\n      setTimeout(() => {\n        startTimer();\n      }, 100);\n    }\n    \n    // 제출 상태 리셋\n    setTimeout(() => {\n      setIsSubmitting(false);\n    }, 500);\n  };\n\n  const getCurrentPlayer = () => {\n    if (gameManagerRef.current) {\n      const currentPlayer = gameManagerRef.current.getCurrentPlayer();\n      if (currentPlayer) {\n        const playerInfo = currentPlayer.getInfo();\n        return players.find(p => p.id === playerInfo.id);\n      }\n    }\n    const currentPlayerId = ((gameState.currentTurn - 1) % players.length) + 1;\n    return players.find(p => p.id === currentPlayerId);\n  };\n\n  const isGameOver = () => {\n    return gameState.gameStatus === 'finished' || \n           (gameConfig.maxTurns && gameState.currentTurn > gameConfig.maxTurns);\n  };\n\n  const difficultyPresets = {\n    beginner: { keywordPoolSize: 30, answerCount: 3, hintCount: 5, timeLimit: 90, maxTurns: 15 },\n    intermediate: { keywordPoolSize: 50, answerCount: 5, hintCount: 5, timeLimit: 60, maxTurns: 20 },\n    advanced: { keywordPoolSize: 80, answerCount: 7, hintCount: 4, timeLimit: 45, maxTurns: 25 }\n  };\n\n  const applyPreset = (difficulty: 'beginner' | 'intermediate' | 'advanced') => {\n    const preset = difficultyPresets[difficulty];\n    setGameConfig({ ...preset, difficulty });\n  };\n\n  const updateGameConfig = (updates: Partial<GameConfig>) => {\n    setGameConfig(prev => ({ ...prev, ...updates, difficulty: 'custom' }));\n  };\n\n  // 컴포넌트 언마운트 시 타이머 정리\n  useEffect(() => {\n    return () => {\n      clearTimer();\n      if (aiTimeoutId) {\n        clearTimeout(aiTimeoutId);\n      }\n    };\n  }, []);\n\n  const renderCodeEditorModal = () => {\n    if (!codeEditorModal.isOpen || !codeEditorModal.playerId) return null;\n    \n    const player = players.find(p => p.id === codeEditorModal.playerId);\n    if (!player) return null;\n\n    return (\n      <div className=\"modal-overlay\" onClick={() => setCodeEditorModal({ isOpen: false, playerId: null })}>\n        <div className=\"modal-content code-editor-modal\" onClick={(e) => e.stopPropagation()}>\n          <div className=\"modal-header\">\n            <h3>{player.nickname} AI 코드 에디터</h3>\n            <button \n              className=\"modal-close\"\n              onClick={() => setCodeEditorModal({ isOpen: false, playerId: null })}\n            >\n              ×\n            </button>\n          </div>\n          \n          <div className=\"code-editor-container\">\n            <div className=\"editor-toolbar\">\n              <div className=\"editor-left\">\n                <span className=\"editor-info\">코드 작성</span>\n                <div className=\"language-selector\">\n                  <button\n                    className={`lang-btn ${player.aiLanguage === 'javascript' ? 'active' : ''}`}\n                    onClick={() => updatePlayer(player.id, { aiLanguage: 'javascript' })}\n                  >\n                    JavaScript\n                  </button>\n                  <button\n                    className={`lang-btn ${player.aiLanguage === 'typescript' ? 'active' : ''}`}\n                    onClick={() => updatePlayer(player.id, { aiLanguage: 'typescript' })}\n                  >\n                    TypeScript\n                  </button>\n                </div>\n              </div>\n              <div className=\"editor-actions\">\n                <button \n                  className=\"btn btn-small\"\n                  onClick={() => updatePlayer(player.id, { aiCode: '' })}\n                >\n                  초기화\n                </button>\n                <button \n                  className=\"btn btn-small\"\n                  onClick={() => {\n                    const exampleCode = player.aiLanguage === 'typescript' \n                      ? `// AI 전략 함수 (TypeScript)\ninterface GameState {\n  keywords: string[];\n  myHints: number[];\n  previousGuesses: number[][];\n  revealedAnswers: number[];\n  revealedWrongs: number[];\n  answerCount: number;\n}\n\nfunction makeGuess(gameState: GameState): number[] {\n  const { keywords, myHints, previousGuesses, revealedAnswers, revealedWrongs, answerCount } = gameState;\n  \n  // 가능한 키워드 인덱스 목록\n  const availableIndices: number[] = keywords\n    .map((_, index) => index)\n    .filter(idx => !revealedWrongs.includes(idx));\n  \n  // 이미 공개된 정답 우선 선택\n  const selectedIndices: number[] = [...revealedAnswers];\n  \n  // 나머지는 랜덤 선택\n  while (selectedIndices.length < answerCount) {\n    const remaining = availableIndices.filter(idx => !selectedIndices.includes(idx));\n    if (remaining.length === 0) break;\n    \n    const randomIdx = remaining[Math.floor(Math.random() * remaining.length)];\n    selectedIndices.push(randomIdx);\n  }\n  \n  return selectedIndices;\n}`\n                      : `// AI 전략 함수 (JavaScript)\nfunction makeGuess(gameState) {\n  const { keywords, myHints, previousGuesses, revealedAnswers, revealedWrongs, answerCount } = gameState;\n  \n  // 가능한 키워드 인덱스 목록\n  const availableIndices = keywords\n    .map((_, index) => index)\n    .filter(idx => !revealedWrongs.includes(idx));\n  \n  // 이미 공개된 정답 우선 선택\n  const selectedIndices = [...revealedAnswers];\n  \n  // 나머지는 랜덤 선택\n  while (selectedIndices.length < answerCount) {\n    const remaining = availableIndices.filter(idx => !selectedIndices.includes(idx));\n    if (remaining.length === 0) break;\n    \n    const randomIdx = remaining[Math.floor(Math.random() * remaining.length)];\n    selectedIndices.push(randomIdx);\n  }\n  \n  return selectedIndices;\n}`;\n                    updatePlayer(player.id, { aiCode: exampleCode });\n                  }}\n                >\n                  예제 코드\n                </button>\n              </div>\n            </div>\n            \n            <div className=\"editor-wrapper\">\n              <div className=\"line-numbers\">\n                {((player.aiCode || '') + '\\n').split('\\n').map((_, index) => (\n                  <div key={index} className=\"line-number\">{index + 1}</div>\n                ))}\n              </div>\n              <textarea\n                className=\"code-editor\"\n                value={player.aiCode || ''}\n                onChange={(e) => updatePlayer(player.id, { aiCode: e.target.value })}\n                placeholder={player.aiLanguage === 'typescript' \n                  ? \"// TypeScript AI 전략 코드를 작성하세요\\n// 타입 정의와 함께 작성해주세요\"\n                  : \"// JavaScript AI 전략 코드를 작성하세요\\n// function makeGuess(gameState) { ... }\"\n                }\n                spellCheck={false}\n              />\n            </div>\n            \n            <div className=\"editor-footer\">\n              <div className=\"code-stats\">\n                <span>줄: {(player.aiCode || '').split('\\n').length}</span>\n                <span>문자: {(player.aiCode || '').length}</span>\n              </div>\n              <button \n                className=\"btn-large btn-primary\"\n                onClick={() => setCodeEditorModal({ isOpen: false, playerId: null })}\n\n\n              >\n                저장\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const renderModeSelection = () => (\n    <div className=\"game-screen mode-selection\">\n      <h2>게임 모드를 선택하세요</h2>\n      <div className=\"mode-cards\">\n        <div className=\"mode-card\" onClick={() => handleModeSelect('solo')}>\n          <h3>개인전</h3>\n          <p>AI와 1:1 대결하는 모드입니다.<br/>난이도를 선택할 수 있어요.</p>\n        </div>\n        <div className=\"mode-card\" onClick={() => handleModeSelect('multi')}>\n          <h3>멀티플레이</h3>\n          <p>2~6명이 함께 플레이하는 모드입니다.<br/>친구들과 함께 즐겨보세요.</p>\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderDifficultySelection = () => (\n    <div className=\"game-screen difficulty-selection\">\n      <div className=\"setup-actions\">\n        <button \n          className=\"btn-large btn-secondary\" \n          onClick={() => setCurrentScreen('mode-selection')}\n        >\n          ← 뒤로가기\n        </button>\n      </div>\n      \n      <h2>AI 난이도를 선택하세요</h2>\n      <div className=\"difficulty-cards\">\n        <div className=\"difficulty-card\" onClick={() => handleDifficultySelect('easy')}>\n          <h3>🌱 쉬움</h3>\n          <p>AI가 무작위로 키워드를 선택합니다.<br/>편안하게 게임을 즐기세요.</p>\n        </div>\n        <div className=\"difficulty-card\" onClick={() => handleDifficultySelect('medium')}>\n          <h3>🌿 보통</h3>\n          <p>AI가 공개된 정답을 활용합니다.<br/>적당한 도전을 원한다면 선택하세요.</p>\n        </div>\n        <div className=\"difficulty-card\" onClick={() => handleDifficultySelect('hard')}>\n          <h3>🌳 어려움</h3>\n          <p>AI가 이전 추측을 분석합니다.<br/>진정한 실력을 시험해보세요.</p>\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderPlayerSetup = () => (\n    <div className=\"game-screen\">\n      <div className=\"setup-actions\">\n        <button \n          className=\"btn-large btn-secondary\" \n          onClick={() => setCurrentScreen('mode-selection')}\n        >\n          ← 뒤로가기\n        </button>\n      </div>\n\n      {gameMode === 'multi' && players.length === 0 && (\n        <div className=\"form-section\">\n          <h2>플레이어 수를 선택하세요</h2>\n          <div className=\"btn-group\" style={{ justifyContent: 'center', marginTop: '20px' }}>\n            {[2, 3, 4, 5, 6].map(num => (\n              <button\n                key={num}\n                className=\"btn-large btn-secondary\"\n                onClick={() => handlePlayerCountSelect(num)}\n              >\n                {num}명\n              </button>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {players.length > 0 && (\n        <>\n          <h2>{gameMode === 'solo' ? '플레이어 설정' : `${playerCount}명 플레이어 설정`}</h2>\n          <div className=\"players-grid\">\n            {players.filter(player => gameMode === 'solo' ? player.type === 'human' : true).map((player) => (\n              <div key={player.id} className=\"player-setup\">\n                <h4>{gameMode === 'solo' ? '플레이어' : `플레이어 ${player.id}`}</h4>\n                \n                <div className=\"form-section\">\n                  <input\n                    type=\"text\"\n                    className=\"input-field\"\n                    placeholder=\"닉네임을 입력하세요\"\n                    value={player.nickname}\n                    onChange={(e) => updatePlayer(player.id, { nickname: e.target.value })}\n                    maxLength={20}\n                  />\n                </div>\n\n                {gameMode === 'multi' && (\n                  <div className=\"form-section\">\n                    <div className=\"radio-group\">\n                      <div className=\"radio-option\">\n                        <input\n                          type=\"radio\"\n                          id={`human-${player.id}`}\n                          name={`playerType-${player.id}`}\n                          value=\"human\"\n                          checked={player.type === 'human'}\n                          onChange={() => updatePlayer(player.id, { type: 'human', aiCode: '' })}\n                        />\n                        <label htmlFor={`human-${player.id}`}>인간</label>\n                      </div>\n                      <div className=\"radio-option\">\n                        <input\n                          type=\"radio\"\n                          id={`ai-${player.id}`}\n                          name={`playerType-${player.id}`}\n                          value=\"custom-ai\"\n                          checked={player.type === 'custom-ai'}\n                          onChange={() => {\n                            updatePlayer(player.id, { type: 'custom-ai' });\n                            setCodeEditorModal({ isOpen: true, playerId: player.id });\n                          }}\n                        />\n                        <label htmlFor={`ai-${player.id}`}>AI</label>\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                {player.type === 'custom-ai' && (\n                  <div className=\"form-section\">\n                    <button\n                      className=\"btn-large btn-ai-code\"\n                      onClick={() => setCodeEditorModal({ isOpen: true, playerId: player.id })}\n                      style={{ width: '100%' }}\n                    >\n                      <span className=\"btn-ai-icon\">&lt;/&gt;</span>\n                      <span>{player.aiCode ? 'AI 코드 수정' : 'AI 코드 작성'}</span>\n                    </button>\n                    {player.aiCode && (\n                      <div className=\"code-preview\">\n                        <small>코드가 작성되었습니다 ({player.aiCode.split('\\n').length}줄)</small>\n                      </div>\n                    )}\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n\n          <div className=\"setup-actions\">\n            <button\n              className=\"btn-large btn-primary\"\n              onClick={handleStartGame}\n              disabled={!canStartGame()}\n            >\n              게임 시작\n            </button>\n          </div>\n        </>\n      )}\n    </div>\n  );\n\n  const renderGameConfig = () => (\n    <div className=\"game-screen\">\n      <div className=\"setup-actions\" style={{ justifyContent: 'flex-start', marginBottom: '30px' }}>\n        <button \n          className=\"btn-large btn-secondary\" \n          onClick={() => setCurrentScreen('player-setup')}\n        >\n          ← 뒤로가기\n        </button>\n      </div>\n\n      <h2>게임 설정</h2>\n      \n      {/* 난이도 프리셋 */}\n      <div className=\"form-section\">\n        <h3>난이도 프리셋</h3>\n        <div className=\"btn-group\" style={{ justifyContent: 'center', flexWrap: 'wrap' }}>\n          <button\n            className={`btn-large ${gameConfig.difficulty === 'beginner' ? 'btn-primary' : 'btn-secondary'}`}\n            onClick={() => applyPreset('beginner')}\n          >\n            초급\n          </button>\n          <button\n            className={`btn-large ${gameConfig.difficulty === 'intermediate' ? 'btn-primary' : 'btn-secondary'}`}\n            onClick={() => applyPreset('intermediate')}\n          >\n            중급\n          </button>\n          <button\n            className={`btn-large ${gameConfig.difficulty === 'advanced' ? 'btn-primary' : 'btn-secondary'}`}\n            onClick={() => applyPreset('advanced')}\n          >\n            고급\n          </button>\n        </div>\n      </div>\n\n      {/* 상세 설정 */}\n      <div className=\"config-grid\">\n        <div className=\"config-item\">\n          <h4>키워드 풀 크기</h4>\n          <p>전체 키워드 개수</p>\n          <div className=\"number-input-group\">\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ keywordPoolSize: Math.max(20, gameConfig.keywordPoolSize - 10) })}\n            >\n              -\n            </button>\n            <span className=\"number-display\">{gameConfig.keywordPoolSize}개</span>\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ keywordPoolSize: Math.min(100, gameConfig.keywordPoolSize + 10) })}\n            >\n              +\n            </button>\n          </div>\n        </div>\n\n        <div className=\"config-item\">\n          <h4>정답 개수</h4>\n          <p>찾아야 할 정답 수</p>\n          <div className=\"number-input-group\">\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ answerCount: Math.max(2, gameConfig.answerCount - 1) })}\n            >\n              -\n            </button>\n            <span className=\"number-display\">{gameConfig.answerCount}개</span>\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ answerCount: Math.min(15, gameConfig.answerCount + 1) })}\n            >\n              +\n            </button>\n          </div>\n        </div>\n\n        <div className=\"config-item\">\n          <h4>힌트 개수</h4>\n          <p>각 플레이어별 오답 힌트</p>\n          <div className=\"number-input-group\">\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ hintCount: Math.max(2, gameConfig.hintCount - 1) })}\n            >\n              -\n            </button>\n            <span className=\"number-display\">{gameConfig.hintCount}개</span>\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ hintCount: Math.min(20, gameConfig.hintCount + 1) })}\n            >\n              +\n            </button>\n          </div>\n        </div>\n\n        <div className=\"config-item\">\n          <h4>턴 제한시간</h4>\n          <p>각 턴당 시간</p>\n          <div className=\"number-input-group\">\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ timeLimit: Math.max(15, gameConfig.timeLimit - 15) })}\n            >\n              -\n            </button>\n            <span className=\"number-display\">{gameConfig.timeLimit}초</span>\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ timeLimit: Math.min(180, gameConfig.timeLimit + 15) })}\n            >\n              +\n            </button>\n          </div>\n        </div>\n\n        <div className=\"config-item\">\n          <h4>최대 턴 수</h4>\n          <p>게임 종료 조건</p>\n          <div className=\"number-input-group\">\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ maxTurns: gameConfig.maxTurns ? Math.max(5, gameConfig.maxTurns - 5) : 15 })}\n            >\n              -\n            </button>\n            <span className=\"number-display\">{gameConfig.maxTurns ? `${gameConfig.maxTurns}턴` : '무제한'}</span>\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ maxTurns: gameConfig.maxTurns ? Math.min(50, gameConfig.maxTurns + 5) : 20 })}\n            >\n              +\n            </button>\n          </div>\n          <button \n            className=\"btn btn-small\" \n            onClick={() => updateGameConfig({ maxTurns: gameConfig.maxTurns ? undefined : 20 })}\n            style={{ marginTop: '10px' }}\n          >\n            {gameConfig.maxTurns ? '무제한으로 변경' : '제한 설정'}\n          </button>\n        </div>\n      </div>\n\n      {/* 현재 난이도 표시 */}\n      <div className=\"difficulty-indicator\">\n        <span>현재 난이도: <strong>{\n          gameConfig.difficulty === 'beginner' ? '초급' :\n          gameConfig.difficulty === 'intermediate' ? '중급' :\n          gameConfig.difficulty === 'advanced' ? '고급' : '커스텀'\n        }</strong></span>\n      </div>\n\n      <div className=\"setup-actions\">\n        <button\n          className=\"btn-large btn-primary\"\n          onClick={handleConfigComplete}\n        >\n          설정 완료\n        </button>\n      </div>\n    </div>\n  );\n\n  const renderGamePreparation = () => {\n    const preparationSteps = [\n      { title: '게임 초기화', description: '게임 환경을 설정하고 있습니다.' },\n      { title: '키워드 생성', description: `${gameConfig.keywordPoolSize}개의 키워드를 생성하고 있습니다.` },\n      { title: '정답 선택', description: `${gameConfig.answerCount}개의 정답을 무작위로 선택하고 있습니다.` },\n      { title: '힌트 배포', description: '각 플레이어에게 오답 힌트를 배포하고 있습니다.' },\n      { title: '최종 확인', description: '게임 준비를 완료하고 있습니다.' }\n    ];\n\n    return (\n      <div className=\"game-screen\">\n        {preparationStep < 5 ? (\n          <>\n            <h2>게임 준비 중...</h2>\n            <div className=\"preparation-progress\">\n              <div className=\"progress-steps\">\n                {preparationSteps.map((step, index) => (\n                  <div \n                    key={index} \n                    className={`progress-step ${index < preparationStep ? 'completed' : index === preparationStep ? 'active' : 'pending'}`}\n                  >\n                    <div className=\"step-circle\">\n                      {index < preparationStep ? '✓' : index + 1}\n                    </div>\n                    <div className=\"step-content\">\n                      <h4>{step.title}</h4>\n                      <p>{step.description}</p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n              \n              <div className=\"progress-bar-container\">\n                <div \n                  className=\"progress-bar-fill\" \n                  style={{ width: `${(preparationStep / 5) * 100}%` }}\n                />\n              </div>\n            </div>\n          </>\n        ) : (\n          <>\n            <h2>게임 준비 완료!</h2>\n            <div className=\"game-summary\">\n              <div className=\"summary-grid\">\n                <div className=\"summary-item\">\n                  <h4>참가자</h4>\n                  <div className=\"player-chips\">\n                    {players.map(player => (\n                      <span key={player.id} className=\"player-chip\">\n                        {player.nickname} ({player.type === 'built-in-ai' ? 'AI' : player.type === 'custom-ai' ? 'Custom AI' : '인간'})\n                      </span>\n                    ))}\n                  </div>\n                </div>\n                \n                <div className=\"summary-item\">\n                  <h4>게임 정보</h4>\n                  <div className=\"game-info-grid\">\n                    <div>키워드 풀: <strong>{gameConfig.keywordPoolSize}개</strong></div>\n                    <div>정답 개수: <strong>{gameConfig.answerCount}개</strong></div>\n                    <div>힌트 개수: <strong>{gameConfig.hintCount}개</strong></div>\n                    <div>턴 시간: <strong>{gameConfig.timeLimit}초</strong></div>\n                    <div>최대 턴: <strong>{gameConfig.maxTurns || '무제한'}</strong></div>\n                  </div>\n                </div>\n\n              </div>\n              \n              <div className=\"game-start-section\">\n                <div className=\"countdown-info\">\n                  <h3>모든 준비가 완료되었습니다!</h3>\n                  <p>게임을 시작하시겠습니까?</p>\n                </div>\n                \n                <div className=\"setup-actions\">\n                  <button \n                    className=\"btn-large btn-secondary\" \n                    onClick={() => setCurrentScreen('game-config')}\n                  >\n                    ← 설정 변경\n                  </button>\n                  <button \n                    className=\"btn-large btn-primary\" \n                    onClick={startActualGame}\n                  >\n                    게임 시작! 🎮\n                  </button>\n                </div>\n              </div>\n            </div>\n          </>\n        )}\n      </div>\n    );\n  };\n\n  const renderGameScreen = () => {\n    const currentPlayer = getCurrentPlayer();\n    const isGameFinished = isGameOver();\n\n    // 힌트 보기 단계\n    if (hintViewingPhase) {\n      const viewingPlayer = players.find(p => p.id === currentViewingPlayer);\n      const hasViewedHints = gameState.hintsViewed[currentViewingPlayer];\n      \n      // AI 플레이어는 건너뛰기\n      if (viewingPlayer?.type === 'built-in-ai') {\n        const nextPlayer = currentViewingPlayer + 1;\n        if (nextPlayer <= players.length) {\n          setTimeout(() => setCurrentViewingPlayer(nextPlayer), 0);\n        } else {\n          setHintViewingPhase(false);\n          if (gameManagerRef.current) {\n            gameManagerRef.current.startGame(\n              gameState.keywords,\n              gameState.answers,\n              gameState.playerHints\n            );\n          } else {\n            // GameManager 없이 게임 시작 시 타이머 시작\n            setTimeout(() => {\n              setGameState(prev => ({\n                ...prev,\n                currentTurn: 1\n              }));\n              startTimer();\n            }, 100);\n          }\n        }\n        return null;\n      }\n\n      return (\n        <div className=\"game-screen\">\n          <div className=\"hint-viewing-phase\">\n            <div className=\"exit-button-container\">\n              <button \n                className=\"btn btn-exit-small\"\n                onClick={exitGame}\n              >\n                게임 종료\n              </button>\n            </div>\n            <h2>힌트 확인 단계</h2>\n            <div className=\"viewing-instructions\">\n              <h3>{viewingPlayer?.nickname}님의 차례입니다</h3>\n              <p>다른 플레이어는 화면을 보지 마세요!</p>\n              \n              {!hasViewedHints ? (\n                <div className=\"hint-reveal\">\n                  <p>아래 버튼을 눌러 본인만의 힌트를 확인하세요.</p>\n                  <button \n                    className=\"btn-large btn-primary\"\n                    onClick={() => setGameState(prev => ({\n                      ...prev,\n                      hintsViewed: { ...prev.hintsViewed, [currentViewingPlayer]: true }\n                    }))}\n                  >\n                    내 힌트 보기\n                  </button>\n                </div>\n              ) : (\n                <div className=\"hint-display\">\n                  <h4>내 힌트 (이 키워드들은 정답이 아닙니다)</h4>\n                  <div className=\"hint-chips\">\n                    {gameState.playerHints[currentViewingPlayer]?.map(hintIndex => (\n                      <span key={hintIndex} className=\"hint-chip\">\n                        {gameState.keywords[hintIndex]}\n                      </span>\n                    ))}\n                  </div>\n                  <p>힌트를 기억하고 다음 버튼을 눌러주세요.</p>\n                  <button \n                    className=\"btn-large btn-secondary\"\n                    onClick={() => {\n                      const nextPlayer = currentViewingPlayer + 1;\n                      if (nextPlayer <= players.length) {\n                        setCurrentViewingPlayer(nextPlayer);\n                      } else {\n                        setHintViewingPhase(false);\n                        // GameManager로 게임 시작\n                        if (gameManagerRef.current) {\n                          gameManagerRef.current.startGame(\n                            gameState.keywords,\n                            gameState.answers,\n                            gameState.playerHints\n                          );\n                        } else {\n                          // GameManager 없이 게임 시작 시 타이머 시작\n                          setTimeout(() => {\n                            setGameState(prev => ({\n                              ...prev,\n                              currentTurn: 1\n                            }));\n                            startTimer();\n                          }, 100);\n                        }\n                      }\n                    }}\n                  >\n                    확인 완료\n                  </button>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    if (isGameFinished) {\n      return (\n        <div className=\"game-screen\">\n          <div className=\"game-over\">\n            <h2>🎉 게임 종료!</h2>\n            {gameState.winner ? (\n              <div className=\"winner-announcement\">\n                <h3>{players.find(p => p.id === gameState.winner)?.nickname}님이 승리했습니다!</h3>\n                <p>축하합니다! 정답을 모두 맞추셨습니다.</p>\n              </div>\n            ) : (\n              <div className=\"draw-announcement\">\n                <h3>무승부</h3>\n                <p>최대 턴 수에 도달했습니다.</p>\n              </div>\n            )}\n            \n            <div className=\"final-answers\">\n              <h4>정답은:</h4>\n              <div className=\"answer-list\">\n                {gameState.answers.map(answerIndex => (\n                  <span key={answerIndex} className=\"answer-chip\">\n                    {gameState.keywords[answerIndex]}\n                  </span>\n                ))}\n              </div>\n            </div>\n\n            <div className=\"game-history\">\n              <h4>게임 기록</h4>\n              <div className=\"history-list\">\n                {gameState.turnHistory.map((turn, index) => (\n                  <div key={index} className=\"history-item\">\n                    <div className=\"turn-info\">\n                      <strong>턴 {turn.turnNumber}</strong> - {turn.playerName}\n                    </div>\n                    <div className=\"turn-keywords\">\n                      선택: {turn.guessKeywords.join(', ')}\n                    </div>\n                    <div className=\"turn-result\">\n                      {turn.correctCount}/{gameConfig.answerCount} 정답 ({turn.timeUsed}초 소요)\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            <div className=\"setup-actions\">\n              <button \n                className=\"btn-large btn-secondary\" \n                onClick={() => setCurrentScreen('mode-selection')}\n              >\n                새 게임\n              </button>\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"game-screen game-playing\">\n        {/* 게임 상태 헤더 */}\n        <div className=\"game-header-info\">\n          <div className=\"turn-info\">\n            <h3>턴 {gameState.currentTurn}{gameConfig.maxTurns && ` / ${gameConfig.maxTurns}`}</h3>\n            <p>\n              {currentPlayer?.nickname}의 차례\n              {isAIThinking && <span className=\"ai-thinking\"> (생각하는 중...)</span>}\n            </p>\n          </div>\n          <div className=\"header-controls\">\n            <div className=\"timer\">\n              <div className={`time-display ${timeRemaining <= 10 ? 'warning' : ''}`}>\n                {timeRemaining}초\n              </div>\n              <div className=\"timer-bar\">\n                <div \n                  className=\"timer-fill\" \n                  style={{ \n                    width: `${(timeRemaining / gameConfig.timeLimit) * 100}%`,\n                    backgroundColor: timeRemaining <= 10 ? '#FF5722' : \n                                   timeRemaining <= 30 ? '#FFC107' : '#4CAF50'\n                  }}\n                />\n              </div>\n            </div>\n            <button \n              className=\"btn btn-exit\"\n              onClick={exitGame}\n              title=\"게임 종료\"\n            >\n              나가기\n            </button>\n          </div>\n        </div>\n\n        <div className=\"game-layout\">\n          {/* 왼쪽: 키워드 그리드 */}\n          <div className=\"game-main\">\n            <div className=\"keyword-selection\">\n              <h4>키워드를 선택하세요 ({selectedKeywords.length}/{gameConfig.answerCount})</h4>\n              <div className=\"keywords-grid\">\n                {gameState.keywords.map((keyword, index) => {\n                  const isSelected = selectedKeywords.includes(index);\n                  const isRevealedAnswer = gameState.revealedAnswers.includes(index);\n                  const isRevealedWrong = gameState.revealedWrongAnswers.includes(index);\n                  \n                  return (\n                    <button\n                      key={index}\n                      className={`keyword-btn ${isSelected ? 'selected' : ''} ${isRevealedAnswer ? 'revealed-answer' : ''} ${isRevealedWrong ? 'revealed-wrong' : ''}`}\n                      onClick={() => toggleKeywordSelection(index)}\n                      disabled={isSubmitting || isAIThinking || !isMyTurn}\n                    >\n                      {keyword}\n                      {isRevealedAnswer && <span className=\"reveal-indicator\">✓</span>}\n                      {isRevealedWrong && <span className=\"reveal-indicator\">❌</span>}\n                    </button>\n                  );\n                })}\n              </div>\n            </div>\n\n            <div className=\"guess-controls\">\n              <div className=\"selected-display\">\n                <h5>선택된 키워드:</h5>\n                <div className=\"selected-keywords\">\n                  {selectedKeywords.map(index => (\n                    <span key={index} className=\"selected-chip\">\n                      {gameState.keywords[index]}\n                    </span>\n                  ))}\n                </div>\n              </div>\n              \n              <div className=\"control-buttons\">\n                <button \n                  className=\"btn-large btn-secondary\"\n                  onClick={() => setSelectedKeywords([])}\n                  disabled={selectedKeywords.length === 0}\n                >\n                  선택 초기화\n                </button>\n                <button \n                  className=\"btn-large btn-primary\"\n                  onClick={submitGuess}\n                  disabled={selectedKeywords.length !== gameConfig.answerCount || isSubmitting}\n                >\n                  추측 제출\n                </button>\n              </div>\n            </div>\n          </div>\n\n          {/* 오른쪽: 게임 정보 */}\n          <div className=\"game-sidebar\">\n            <div className=\"global-hints\">\n              <h4>게임 힌트</h4>\n              <div className=\"hint-buttons\">\n                <button \n                  className=\"btn btn-hint\"\n                  onClick={revealAnswerHint}\n                  disabled={gameState.answers.length === gameState.revealedAnswers.length}\n                >\n                  정답 1개 공개\n                </button>\n                <button \n                  className=\"btn btn-hint\"\n                  onClick={revealWrongHint}\n                >\n                  오답 1개 공개\n                </button>\n              </div>\n              <div className=\"revealed-info\">\n                {gameState.revealedAnswers.length > 0 && (\n                  <div>\n                    <small>공개된 정답: {gameState.revealedAnswers.length}개</small>\n                  </div>\n                )}\n                {gameState.revealedWrongAnswers.length > 0 && (\n                  <div>\n                    <small>공개된 오답: {gameState.revealedWrongAnswers.length}개</small>\n                  </div>\n                )}\n              </div>\n            </div>\n\n            <div className=\"players-status\">\n              <h4>플레이어 현황</h4>\n              <div className=\"players-list\">\n                {players.map(player => (\n                  <div \n                    key={player.id} \n                    className={`player-status ${currentPlayer?.id === player.id ? 'current' : ''}`}\n                  >\n                    <span className=\"player-name\">{player.nickname}</span>\n                    <span className=\"player-type\">({player.type === 'built-in-ai' ? 'AI' : player.type === 'custom-ai' ? 'Custom AI' : '인간'})</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            <div className=\"turn-history\">\n              <h4>턴 기록</h4>\n              <div className=\"history-scroll\">\n                {gameState.turnHistory.slice(-5).map((turn, index) => (\n                  <div key={index} className=\"history-entry\">\n                    <div className=\"history-header\">\n                      <span>턴 {turn.turnNumber}: {turn.playerName}</span>\n                    </div>\n                    <div className=\"history-keywords\">\n                      {turn.guessKeywords.join(', ')}\n                    </div>\n                    <div className=\"history-result\">\n                      {turn.correctCount}/{gameConfig.answerCount} 정답\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"deduction-game\">\n      <div className=\"game-content\">\n        <div className=\"game-wrapper\">\n          <div className=\"game-header\">\n            <h1>Exclusive Deduction Game</h1>\n            <p>서로 다른 단서로 정답을 추론하는 게임</p>\n          </div>\n          \n          {currentScreen === 'mode-selection' && renderModeSelection()}\n          {currentScreen === 'difficulty-selection' && renderDifficultySelection()}\n          {currentScreen === 'player-setup' && renderPlayerSetup()}\n          {currentScreen === 'game-config' && renderGameConfig()}\n          {currentScreen === 'game-preparation' && renderGamePreparation()}\n          {currentScreen === 'game' && renderGameScreen()}\n        </div>\n        \n        {renderCodeEditorModal()}\n      </div>\n    </div>\n  );\n};\n\nexport default DeductionGame;","import { useParams } from \"react-router-dom\";\nimport './LabPage.css';\n\nimport { Tetris, DeductionGame } from \"../components/lab/subject\";\n\n\nconst LabDetailPage = () => {\n    const { subject } = useParams()\n    console.log(subject)\n\n\n    const renderContetns = () => {\n        switch (subject) {\n            case \"tetris\":\n                return <Tetris />\n            case \"deduction-game\":\n                return <DeductionGame />\n            default:\n                return (\n                    <h1 className=\"lab-title\">준비중...</h1>\n                )\n        }\n    }\n\n    return (\n        <div className=\"lab-page\">\n             <main className=\"lab-content\">\n                {renderContetns()}\n             </main>\n        </div>\n    )\n}\n\nexport default LabDetailPage;"],"names":["Tetris","_jsxs","className","children","_jsx","src","process","title","allow","allowFullScreen","BasePlayer","constructor","playerInfo","ready","this","getInfo","isReady","onTurnStart","onTurnEnd","move","reset","HumanPlayer","super","resolveGuess","makeGuess","gameState","Promise","resolve","submitGuess","indices","undefined","isWaitingForInput","BuiltInAIPlayer","strategy","thinkingTime","startTime","Date","now","selectedIndices","selectKeywords","elapsedTime","remainingTime","Math","max","setTimeout","setThinkingTime","milliseconds","getStrategy","setStrategy","CustomAIPlayer","aiCode","aiLanguage","executeTimeout","customCode","customLanguage","validateCode","result","executeAICode","Array","isArray","Error","validIndices","filter","idx","keywords","length","revealedWrongAnswers","includes","answerCount","slice","availableIndices","from","_","i","randomIdx","floor","random","push","error","console","fallbackStrategy","reject","timeout","Function","concat","func","clearTimeout","revealedAnswers","remaining","trim","updateCode","code","language","getCode","getLanguage","EasyStrategy","previousGuesses","myHints","scores","Map","set","forEach","guess","guessedIndices","correctCount","get","points","excludedIndices","Set","delete","selected","candidates","entries","_ref","has","sort","a","b","needed","candidate","remainingCandidates","c","stillNeeded","getStrategyName","getDescription","MediumStrategy","j","guessA","guessB","setA","setB","diffA","x","diffB","correctDiff","keywordA","keywordB","abs","bonusPoints","finalCandidates","map","shuffled","HardStrategy","validHypotheses","findValidHypotheses","log","mustBeAnswers","mustBeWrongs","mediumGuess","combinedArray","potentialCandidates","searchSpace","findCombinations","startIndex","currentCombo","pop","validateHypothesis","hypothesis","guesses","hypothesisSet","g","PlayerFactory","createPlayer","type","aiDifficulty","difficulty","strategyCache","createBuiltInAIOpponent","id","arguments","nickname","isHumanPlayer","player","isBuiltInAIPlayer","isCustomAIPlayer","GameManager","config","players","currentPlayerIndex","gameContext","isGameRunning","turnTimer","turnStartTime","onGameEnd","onTimerTick","answers","playerHints","currentTurn","turnHistory","addPlayer","setPlayers","getCurrentPlayer","getPlayers","getGameContext","_objectSpread","startGame","startNextTurn","_currentPlayer$onTurn","currentPlayer","call","startTurnTimer","gameStateForAI","createGameStateForAI","then","processTurn","timeLimit","setInterval","handleTimeout","stopTurnTimer","clearInterval","autoGuess","submitHumanGuess","_currentPlayer$onTurn2","isWinner","every","actualTimeUsed","round","turnResult","playerId","playerName","guessKeywords","turnNumber","timeUsed","timestamp","endGame","maxTurns","turn","revealAnswer","unrevealedAnswers","ans","randomAnswer","revealWrongAnswer","wrongAnswers","randomWrong","winner","stopGame","isRunning","setEventHandlers","handlers","DeductionGame","currentScreen","setCurrentScreen","useState","gameMode","setGameMode","playerCount","setPlayerCount","gameConfig","setGameConfig","keywordPoolSize","hintCount","setGameState","gameStatus","hintsViewed","preparationStep","setPreparationStep","selectedKeywords","setSelectedKeywords","timeRemaining","setTimeRemaining","isMyTurn","setIsMyTurn","hintViewingPhase","setHintViewingPhase","currentViewingPlayer","setCurrentViewingPlayer","timerIntervalId","setTimerIntervalId","isSubmitting","setIsSubmitting","aiTimeoutId","setAiTimeoutId","soloDifficulty","setSoloDifficulty","isAIThinking","setIsAIThinking","gameManagerRef","useRef","setTurnStartTime","codeEditorModal","setCodeEditorModal","isOpen","handleModeSelect","mode","handleDifficultySelect","updatePlayer","updates","prev","handleStartGame","handleConfigComplete","initializeGame","keywordCategories","animals","foods","objects","places","actions","async","size","Object","values","flat","answerIndices","shuffledIndices","nonAnswerIndices","hints","availableHints","startActualGame","manager","gamePlayers","context","winnerInfo","current","startTimer","clearTimer","intervalId","handleTimeUp","autoSelection","index","submitGuessWithSelection","exitGame","revealAnswerHint","revealWrongHint","selection","currentPlayerId","find","p","isMaxTurnsReached","difficultyPresets","beginner","intermediate","advanced","applyPreset","preset","updateGameConfig","useEffect","onClick","style","justifyContent","marginTop","num","count","newPlayers","handlePlayerCountSelect","_Fragment","placeholder","value","onChange","e","target","maxLength","name","checked","htmlFor","width","split","disabled","_player$aiCode","marginBottom","flexWrap","min","renderGamePreparation","preparationSteps","description","step","renderGameScreen","isGameFinished","_gameState$playerHint","viewingPlayer","hasViewedHints","nextPlayer","hintIndex","_players$find","answerIndex","join","backgroundColor","keyword","isSelected","isRevealedAnswer","isRevealedWrong","toggleKeywordSelection","keywordIndex","renderCodeEditorModal","stopPropagation","exampleCode","spellCheck","LabDetailPage","subject","useParams","renderContetns"],"sourceRoot":""}