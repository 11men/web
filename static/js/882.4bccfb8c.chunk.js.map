{"version":3,"file":"static/js/882.4bccfb8c.chunk.js","mappings":"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","sources":["components/lab/subject/DeductionGame/ai/sandbox/AICodeValidator.ts","components/lab/subject/Tetris.tsx","components/lab/subject/DeductionGame/ai/players/BasePlayer.ts","components/lab/subject/DeductionGame/ai/players/HumanPlayer.ts","components/lab/subject/DeductionGame/ai/players/BuiltInAIPlayer.ts","components/lab/subject/DeductionGame/ai/sandbox/AICodeExecutor.ts","components/lab/subject/DeductionGame/ai/sandbox/PerformanceMonitor.ts","components/lab/subject/DeductionGame/ai/sandbox/AIExecutionHandler.ts","components/lab/subject/DeductionGame/ai/players/CustomAIPlayer.ts","components/lab/subject/DeductionGame/ai/strategies/BaseStrategy.ts","components/lab/subject/DeductionGame/ai/strategies/EasyStrategy.ts","components/lab/subject/DeductionGame/ai/strategies/MediumStrategy.ts","components/lab/subject/DeductionGame/ai/strategies/HardStrategy.ts","components/lab/subject/DeductionGame/ai/PlayerFactory.ts","components/lab/subject/DeductionGame/ai/GameManager.ts","components/lab/subject/DeductionGame/DeductionGame.tsx","pages/LabDetailPage.tsx"],"sourcesContent":["export interface ValidationResult {\n  isValid: boolean;\n  errors: string[];\n  warnings?: string[];\n}\n\nexport interface ComplexityMetrics {\n  lines: number;\n  loops: number;\n  functions: number;\n  complexity: number;\n}\n\nexport class AICodeValidator {\n  private static readonly FORBIDDEN_PATTERNS: Array<{ pattern: RegExp; message: string }> = [\n    { pattern: /eval\\s*\\(/g, message: 'eval() is not allowed' },\n    { pattern: /Function\\s*\\(/g, message: 'Function constructor is not allowed' },\n    { pattern: /setTimeout/g, message: 'setTimeout is not allowed' },\n    { pattern: /setInterval/g, message: 'setInterval is not allowed' },\n    { pattern: /setImmediate/g, message: 'setImmediate is not allowed' },\n    { pattern: /fetch\\s*\\(/g, message: 'fetch() is not allowed' },\n    { pattern: /XMLHttpRequest/g, message: 'XMLHttpRequest is not allowed' },\n    { pattern: /import\\s+/g, message: 'import statements are not allowed' },\n    { pattern: /require\\s*\\(/g, message: 'require() is not allowed' },\n    { pattern: /process\\./g, message: 'process object is not allowed' },\n    { pattern: /global\\./g, message: 'global object is not allowed' },\n    { pattern: /window\\./g, message: 'window object is not allowed' },\n    { pattern: /document\\./g, message: 'document object is not allowed' },\n    { pattern: /self\\./g, message: 'self object is not allowed' },\n    { pattern: /__proto__/g, message: '__proto__ is not allowed' },\n    { pattern: /constructor\\s*\\[/g, message: 'constructor property access is not allowed' },\n    { pattern: /\\.constructor/g, message: 'constructor property is not allowed' },\n    { pattern: /new\\s+Worker/g, message: 'Worker is not allowed' },\n    { pattern: /postMessage/g, message: 'postMessage is not allowed' },\n    { pattern: /localStorage/g, message: 'localStorage is not allowed' },\n    { pattern: /sessionStorage/g, message: 'sessionStorage is not allowed' },\n    { pattern: /indexedDB/g, message: 'indexedDB is not allowed' },\n    { pattern: /crypto\\./g, message: 'crypto object is not allowed' },\n    { pattern: /WebAssembly/g, message: 'WebAssembly is not allowed' },\n    { pattern: /SharedArrayBuffer/g, message: 'SharedArrayBuffer is not allowed' },\n    { pattern: /Atomics/g, message: 'Atomics is not allowed' },\n  ];\n\n  private static readonly MAX_CODE_LENGTH = 10000;\n  private static readonly MAX_LINES = 500;\n  private static readonly MAX_LOOP_DEPTH = 5;\n  private static readonly MAX_FUNCTION_DEPTH = 10;\n\n  static validate(code: string): ValidationResult {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    // 1. Check code length\n    if (code.length > this.MAX_CODE_LENGTH) {\n      errors.push(`Code exceeds maximum length (${code.length}/${this.MAX_CODE_LENGTH} characters)`);\n    }\n\n    // 2. Check line count\n    const lines = code.split('\\n');\n    if (lines.length > this.MAX_LINES) {\n      errors.push(`Code exceeds maximum lines (${lines.length}/${this.MAX_LINES} lines)`);\n    }\n\n    // 3. Check for forbidden patterns\n    for (const { pattern, message } of this.FORBIDDEN_PATTERNS) {\n      if (pattern.test(code)) {\n        errors.push(message);\n      }\n    }\n\n    // 4. Check syntax\n    try {\n      // Use Function constructor to check syntax (in real implementation, this would be in a sandbox)\n      new Function(code);\n    } catch (e: any) {\n      errors.push(`Syntax error: ${e.message}`);\n    }\n\n    // 5. Check for makeGuess function\n    if (!code.includes('function makeGuess') && !code.includes('makeGuess =')) {\n      errors.push('makeGuess function not found');\n    }\n\n    // 6. Check for infinite loops (basic heuristic)\n    const loopPatterns = [\n      /while\\s*\\(\\s*true\\s*\\)/g,\n      /while\\s*\\(\\s*1\\s*\\)/g,\n      /for\\s*\\(\\s*;\\s*;\\s*\\)/g,\n    ];\n    \n    for (const pattern of loopPatterns) {\n      if (pattern.test(code)) {\n        warnings.push('Potential infinite loop detected');\n      }\n    }\n\n    // 7. Check complexity\n    const complexity = this.analyzeComplexity(code);\n    if (complexity.complexity > 100) {\n      warnings.push(`High code complexity detected (score: ${complexity.complexity})`);\n    }\n\n    // 8. Check for suspicious patterns\n    const suspiciousPatterns = [\n      { pattern: /\\bthis\\b/g, message: 'Use of \"this\" keyword may cause issues' },\n      { pattern: /\\barguments\\b/g, message: 'Use of \"arguments\" object is discouraged' },\n      { pattern: /\\.call\\s*\\(/g, message: 'Use of .call() is suspicious' },\n      { pattern: /\\.apply\\s*\\(/g, message: 'Use of .apply() is suspicious' },\n      { pattern: /\\.bind\\s*\\(/g, message: 'Use of .bind() may affect performance' },\n    ];\n\n    for (const { pattern, message } of suspiciousPatterns) {\n      if (pattern.test(code)) {\n        warnings.push(message);\n      }\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings: warnings.length > 0 ? warnings : undefined\n    };\n  }\n\n  private static analyzeComplexity(code: string): ComplexityMetrics {\n    const lines = code.split('\\n').length;\n    const loops = (code.match(/\\b(for|while|do)\\b/g) || []).length;\n    const functions = (code.match(/\\bfunction\\b/g) || []).length;\n    const conditionals = (code.match(/\\b(if|else|switch|case)\\b/g) || []).length;\n    \n    // Simple cyclomatic complexity estimation\n    const complexity = 1 + conditionals + loops;\n\n    return {\n      lines,\n      loops,\n      functions,\n      complexity\n    };\n  }\n\n  static preprocessCode(code: string): string {\n    // Remove comments\n    let processed = code\n      .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove block comments\n      .replace(/\\/\\/.*$/gm, ''); // Remove line comments\n\n    // Trim whitespace\n    processed = processed.trim();\n\n    // Ensure code ends with the makeGuess function being accessible\n    if (!processed.includes('return makeGuess') && processed.includes('function makeGuess')) {\n      processed += '\\n\\n// Auto-added by preprocessor\\nif (typeof makeGuess === \"function\") { makeGuess; }';\n    }\n\n    return processed;\n  }\n}","import './Tetris.css';\n\nconst Tetris = () => {\n    \n    return (\n        <div className=\"tetris-container\">\n            <div className=\"tetris-header\">\n                <h1>AI 테트리스</h1>\n                <p className=\"tetris-description\">\n                    AI로 시작한 테트리스 게임 만들기 프로젝트입니다.\n                    현재 버전에서는 기본적인 테트리스 게임플레이를 구현했습니다.\n                </p>\n            </div>\n\n            <div className=\"tetris-content\">\n                <iframe\n                    src={process.env.PUBLIC_URL + \"/lab/html/tetris.html\"}\n                    title=\"AI Tetris Game\"\n                    className=\"tetris-frame\"\n                    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                    allowFullScreen\n                />\n            </div>\n\n            <div className=\"tetris-info\">\n                <h2>프로젝트 정보</h2>\n                <div className=\"info-grid\">\n                    <div className=\"info-item\">\n                        <h3>개발 기간</h3>\n                        <p>2024.06.11 ~ 현재</p>\n                    </div>\n                    <div className=\"info-item\">\n                        <h3>사용 기술</h3>\n                        <p>HTML, CSS, JavaScript</p>\n                    </div>\n                    <div className=\"info-item\">\n                        <h3>주요 기능</h3>\n                        <ul>\n                            <li>기본 테트리스 게임플레이</li>\n                            <li>점수 시스템</li>\n                            <li>레벨 시스템</li>\n                        </ul>\n                    </div>\n                    <div className=\"info-item\">\n                        <h3>향후 계획</h3>\n                        <ul>\n                            <li>AI 학습 모델 통합</li>\n                            <li>멀티플레이어 지원</li>\n                            <li>커스텀 테마</li>\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\nexport default Tetris;\n","import { PlayerInfo, PlayerMove } from '../types/PlayerTypes';\nimport { GameStateForAI } from '../types/GameTypes';\n\nexport interface IPlayer {\n  getInfo(): PlayerInfo;\n  \n  makeGuess(gameState: GameStateForAI): Promise<number[]>;\n  \n  isReady(): boolean;\n  \n  onTurnStart?(): void;\n  \n  onTurnEnd?(move: PlayerMove): void;\n  \n  reset(): void;\n}\n\nexport abstract class BasePlayer implements IPlayer {\n  protected playerInfo: PlayerInfo;\n  protected ready: boolean = false;\n\n  constructor(playerInfo: PlayerInfo) {\n    this.playerInfo = playerInfo;\n  }\n\n  getInfo(): PlayerInfo {\n    return this.playerInfo;\n  }\n\n  isReady(): boolean {\n    return this.ready;\n  }\n\n  abstract makeGuess(gameState: GameStateForAI): Promise<number[]>;\n\n  onTurnStart(): void {\n    // Override in subclasses if needed\n  }\n\n  onTurnEnd(move: PlayerMove): void {\n    // Override in subclasses if needed\n  }\n\n  reset(): void {\n    this.ready = false;\n  }\n}","import { BasePlayer } from './BasePlayer';\nimport { PlayerInfo } from '../types/PlayerTypes';\nimport { GameStateForAI } from '../types/GameTypes';\n\nexport class HumanPlayer extends BasePlayer {\n  private resolveGuess?: (indices: number[]) => void;\n  \n  constructor(playerInfo: PlayerInfo) {\n    super(playerInfo);\n    this.ready = true;\n  }\n\n  async makeGuess(gameState: GameStateForAI): Promise<number[]> {\n    return new Promise<number[]>((resolve) => {\n      this.resolveGuess = resolve;\n    });\n  }\n\n  submitGuess(indices: number[]): void {\n    if (this.resolveGuess) {\n      this.resolveGuess(indices);\n      this.resolveGuess = undefined;\n    }\n  }\n\n  isWaitingForInput(): boolean {\n    return this.resolveGuess !== undefined;\n  }\n\n  reset(): void {\n    super.reset();\n    this.resolveGuess = undefined;\n    this.ready = true;\n  }\n}","import { BasePlayer } from './BasePlayer';\nimport { PlayerInfo } from '../types/PlayerTypes';\nimport { GameStateForAI } from '../types/GameTypes';\nimport { AIStrategy } from '../strategies/AIStrategy';\n\nexport class BuiltInAIPlayer extends BasePlayer {\n  private strategy: AIStrategy;\n  private thinkingTime: number = 2000; // 2 seconds by default\n  \n  constructor(playerInfo: PlayerInfo, strategy: AIStrategy) {\n    super(playerInfo);\n    this.strategy = strategy;\n    this.ready = true;\n  }\n\n  async makeGuess(gameState: GameStateForAI): Promise<number[]> {\n    const startTime = Date.now();\n    \n    const selectedIndices = this.strategy.selectKeywords(gameState);\n    \n    const elapsedTime = Date.now() - startTime;\n    const remainingTime = Math.max(0, this.thinkingTime - elapsedTime);\n    \n    if (remainingTime > 0) {\n      await new Promise(resolve => setTimeout(resolve, remainingTime));\n    }\n    \n    return selectedIndices;\n  }\n\n  setThinkingTime(milliseconds: number): void {\n    this.thinkingTime = Math.max(500, milliseconds);\n  }\n\n  getStrategy(): AIStrategy {\n    return this.strategy;\n  }\n\n  setStrategy(strategy: AIStrategy): void {\n    this.strategy = strategy;\n  }\n}","import { GameStateForAI } from '../types/GameTypes';\nimport { AICodeValidator } from './AICodeValidator';\n\nexport interface ExecutionResult {\n  success: boolean;\n  result?: number[];\n  error?: string;\n  executionTime?: number;\n  logs?: string[];\n}\n\nexport interface SecureGameState {\n  readonly keywords: ReadonlyArray<string>;\n  readonly myHints: ReadonlyArray<number>;\n  readonly answerCount: number;\n  readonly previousGuesses: ReadonlyArray<{\n    playerId: number;\n    guess: number[];\n    correctCount: number;\n  }>;\n  readonly revealedAnswers: ReadonlyArray<number>;\n  readonly revealedWrongAnswers: ReadonlyArray<number>;\n  readonly currentTurn: number;\n  readonly timeLimit: number;\n}\n\nexport class AICodeExecutor {\n  private static instance: AICodeExecutor;\n  private executionCounter = 0;\n  private readonly MAX_EXECUTION_TIME = 2500; // 2.5 seconds with buffer\n\n  static getInstance(): AICodeExecutor {\n    if (!AICodeExecutor.instance) {\n      AICodeExecutor.instance = new AICodeExecutor();\n    }\n    return AICodeExecutor.instance;\n  }\n\n  async executeUserAI(\n    code: string,\n    gameState: GameStateForAI,\n    playerId: number\n  ): Promise<ExecutionResult> {\n    const startTime = performance.now();\n    const logs: string[] = [];\n\n    try {\n      // Step 1: Validate code\n      const validation = AICodeValidator.validate(code);\n      if (!validation.isValid) {\n        return {\n          success: false,\n          error: `Code validation failed: ${validation.errors.join('; ')}`,\n          executionTime: performance.now() - startTime\n        };\n      }\n\n      // Log warnings if any\n      if (validation.warnings) {\n        logs.push(...validation.warnings.map(w => `Warning: ${w}`));\n      }\n\n      // Step 2: Preprocess code\n      const processedCode = AICodeValidator.preprocessCode(code);\n\n      // Step 3: Create secure game state\n      const secureGameState = this.createSecureGameState(gameState);\n\n      // Step 4: Execute in worker\n      const result = await this.executeInWorker(processedCode, secureGameState, logs);\n\n      const executionTime = performance.now() - startTime;\n\n      return {\n        success: true,\n        result,\n        executionTime,\n        logs: logs.length > 0 ? logs : undefined\n      };\n\n    } catch (error: any) {\n      const executionTime = performance.now() - startTime;\n      \n      return {\n        success: false,\n        error: error.message || 'Unknown error occurred',\n        executionTime,\n        logs: logs.length > 0 ? logs : undefined\n      };\n    }\n  }\n\n  private createSecureGameState(gameState: GameStateForAI): SecureGameState {\n    // Deep freeze arrays and objects to prevent modification\n    const deepFreeze = <T>(obj: T): T => {\n      Object.freeze(obj);\n      \n      Object.getOwnPropertyNames(obj).forEach(prop => {\n        if (obj[prop as keyof T] !== null\n            && (typeof obj[prop as keyof T] === 'object' || typeof obj[prop as keyof T] === 'function')\n            && !Object.isFrozen(obj[prop as keyof T])) {\n          deepFreeze(obj[prop as keyof T]);\n        }\n      });\n      \n      return obj;\n    };\n\n    return deepFreeze({\n      keywords: [...gameState.keywords],\n      myHints: [...gameState.myHints],\n      answerCount: gameState.answerCount,\n      previousGuesses: gameState.previousGuesses.map(g => ({\n        playerId: g.playerId,\n        guess: [...g.guess],\n        correctCount: g.correctCount\n      })),\n      revealedAnswers: [...gameState.revealedAnswers],\n      revealedWrongAnswers: [...gameState.revealedWrongAnswers],\n      currentTurn: gameState.currentTurn,\n      timeLimit: gameState.timeLimit\n    });\n  }\n\n  private executeInWorker(\n    code: string,\n    gameState: SecureGameState,\n    logs: string[]\n  ): Promise<number[]> {\n    return new Promise((resolve, reject) => {\n      const executionId = `exec_${++this.executionCounter}_${Date.now()}`;\n      \n      // Create worker\n      // Get the correct path for the worker file\n      const publicUrl = process.env.PUBLIC_URL || '';\n      let workerPath = publicUrl + '/ai-worker.js';\n      \n      // In development, if the path starts with /web, use it directly\n      if (window.location.pathname.startsWith('/web') && !workerPath.startsWith('/web')) {\n        workerPath = '/web/ai-worker.js';\n      }\n      \n      const worker = new Worker(workerPath);\n      \n      // Set timeout\n      const timeoutId = setTimeout(() => {\n        worker.terminate();\n        reject(new Error('Execution timeout exceeded (2 seconds)'));\n      }, this.MAX_EXECUTION_TIME);\n\n      // Handle messages\n      worker.onmessage = (event) => {\n        const { type, executionId: msgId, result, error, data } = event.data;\n\n        // Handle console.log messages\n        if (type === 'log' && msgId === executionId) {\n          const logMessage = data.map((arg: any) => \n            typeof arg === 'object' ? JSON.stringify(arg) : String(arg)\n          ).join(' ');\n          logs.push(logMessage);\n          return;\n        }\n\n        // Handle result or error\n        if (msgId === executionId) {\n          clearTimeout(timeoutId);\n          worker.terminate();\n\n          if (error) {\n            reject(new Error(error));\n          } else if (result) {\n            resolve(result);\n          } else {\n            reject(new Error('No result returned from AI'));\n          }\n        }\n      };\n\n      // Handle worker errors\n      worker.onerror = (error) => {\n        clearTimeout(timeoutId);\n        worker.terminate();\n        \n        // More detailed error message\n        let errorMessage = 'Worker error: ';\n        if (error.message) {\n          errorMessage += error.message;\n        } else {\n          errorMessage += 'Failed to load worker file. Make sure ai-worker.js is in the public directory.';\n        }\n        \n        console.error('Worker load error:', error);\n        console.error('Worker path attempted:', workerPath);\n        \n        reject(new Error(errorMessage));\n      };\n\n      // Send execution request\n      worker.postMessage({\n        code,\n        gameState,\n        executionId\n      });\n    });\n  }\n\n  // Helper method to validate guess format\n  static validateGuess(guess: number[], gameState: GameStateForAI): string | null {\n    if (!Array.isArray(guess)) {\n      return 'Guess must be an array';\n    }\n\n    if (guess.length !== gameState.answerCount) {\n      return `Guess must contain exactly ${gameState.answerCount} elements`;\n    }\n\n    const keywordCount = gameState.keywords.length;\n    for (let i = 0; i < guess.length; i++) {\n      const idx = guess[i];\n      \n      if (typeof idx !== 'number' || !Number.isInteger(idx)) {\n        return `Element at index ${i} must be an integer`;\n      }\n\n      if (idx < 0 || idx >= keywordCount) {\n        return `Element at index ${i} (${idx}) is out of bounds`;\n      }\n\n      if (gameState.myHints.includes(idx)) {\n        return `Element at index ${i} (${idx}) is one of your hints`;\n      }\n    }\n\n    const uniqueIndices = new Set(guess);\n    if (uniqueIndices.size !== guess.length) {\n      return 'Guess contains duplicate indices';\n    }\n\n    return null; // Valid\n  }\n}","export interface PerformanceMetrics {\n  executionTime: number;\n  memoryUsage?: number;\n  validationTime?: number;\n  workerCreationTime?: number;\n}\n\nexport interface DetailedMetrics extends PerformanceMetrics {\n  timestamp: number;\n  playerId: number;\n  success: boolean;\n  errorType?: string;\n}\n\nexport class PerformanceMonitor {\n  private static instance: PerformanceMonitor;\n  private metricsHistory: DetailedMetrics[] = [];\n  private readonly MAX_HISTORY_SIZE = 1000;\n\n  static getInstance(): PerformanceMonitor {\n    if (!PerformanceMonitor.instance) {\n      PerformanceMonitor.instance = new PerformanceMonitor();\n    }\n    return PerformanceMonitor.instance;\n  }\n\n  async measureExecution<T>(\n    executor: () => Promise<T>,\n    metadata?: { playerId?: number }\n  ): Promise<[T, PerformanceMetrics]> {\n    const startTime = performance.now();\n    const startMemory = this.getMemoryUsage();\n\n    try {\n      const result = await executor();\n      \n      const endTime = performance.now();\n      const endMemory = this.getMemoryUsage();\n\n      const metrics: PerformanceMetrics = {\n        executionTime: endTime - startTime,\n        memoryUsage: endMemory && startMemory ? endMemory - startMemory : undefined\n      };\n\n      // Record successful execution\n      if (metadata?.playerId !== undefined) {\n        this.recordMetrics({\n          ...metrics,\n          timestamp: Date.now(),\n          playerId: metadata.playerId,\n          success: true\n        });\n      }\n\n      return [result, metrics];\n    } catch (error: any) {\n      const endTime = performance.now();\n      const endMemory = this.getMemoryUsage();\n\n      const metrics: PerformanceMetrics = {\n        executionTime: endTime - startTime,\n        memoryUsage: endMemory && startMemory ? endMemory - startMemory : undefined\n      };\n\n      // Record failed execution\n      if (metadata?.playerId !== undefined) {\n        this.recordMetrics({\n          ...metrics,\n          timestamp: Date.now(),\n          playerId: metadata.playerId,\n          success: false,\n          errorType: error.constructor.name\n        });\n      }\n\n      throw { error, metrics };\n    }\n  }\n\n  measureSync<T>(executor: () => T): [T, PerformanceMetrics] {\n    const startTime = performance.now();\n    const startMemory = this.getMemoryUsage();\n\n    const result = executor();\n    \n    const endTime = performance.now();\n    const endMemory = this.getMemoryUsage();\n\n    const metrics: PerformanceMetrics = {\n      executionTime: endTime - startTime,\n      memoryUsage: endMemory && startMemory ? endMemory - startMemory : undefined\n    };\n\n    return [result, metrics];\n  }\n\n  private getMemoryUsage(): number | undefined {\n    // Check if memory API is available (Chrome/Edge)\n    if ('memory' in performance) {\n      return (performance as any).memory.usedJSHeapSize;\n    }\n    return undefined;\n  }\n\n  private recordMetrics(metrics: DetailedMetrics): void {\n    this.metricsHistory.push(metrics);\n\n    // Keep history size under control\n    if (this.metricsHistory.length > this.MAX_HISTORY_SIZE) {\n      this.metricsHistory = this.metricsHistory.slice(-this.MAX_HISTORY_SIZE);\n    }\n  }\n\n  getPlayerStats(playerId: number): {\n    totalExecutions: number;\n    successRate: number;\n    averageExecutionTime: number;\n    maxExecutionTime: number;\n    recentErrors: string[];\n  } {\n    const playerMetrics = this.metricsHistory.filter(m => m.playerId === playerId);\n    \n    if (playerMetrics.length === 0) {\n      return {\n        totalExecutions: 0,\n        successRate: 0,\n        averageExecutionTime: 0,\n        maxExecutionTime: 0,\n        recentErrors: []\n      };\n    }\n\n    const successful = playerMetrics.filter(m => m.success);\n    const totalTime = playerMetrics.reduce((sum, m) => sum + m.executionTime, 0);\n    const maxTime = Math.max(...playerMetrics.map(m => m.executionTime));\n    \n    const recentErrors = playerMetrics\n      .filter(m => !m.success && m.errorType)\n      .slice(-5)\n      .map(m => m.errorType!);\n\n    return {\n      totalExecutions: playerMetrics.length,\n      successRate: successful.length / playerMetrics.length,\n      averageExecutionTime: totalTime / playerMetrics.length,\n      maxExecutionTime: maxTime,\n      recentErrors\n    };\n  }\n\n  getGlobalStats(): {\n    totalExecutions: number;\n    averageSuccessRate: number;\n    averageExecutionTime: number;\n    peakExecutionTime: number;\n    activePlayerCount: number;\n  } {\n    if (this.metricsHistory.length === 0) {\n      return {\n        totalExecutions: 0,\n        averageSuccessRate: 0,\n        averageExecutionTime: 0,\n        peakExecutionTime: 0,\n        activePlayerCount: 0\n      };\n    }\n\n    const successful = this.metricsHistory.filter(m => m.success);\n    const totalTime = this.metricsHistory.reduce((sum, m) => sum + m.executionTime, 0);\n    const peakTime = Math.max(...this.metricsHistory.map(m => m.executionTime));\n    \n    const uniquePlayers = new Set(this.metricsHistory.map(m => m.playerId));\n\n    return {\n      totalExecutions: this.metricsHistory.length,\n      averageSuccessRate: successful.length / this.metricsHistory.length,\n      averageExecutionTime: totalTime / this.metricsHistory.length,\n      peakExecutionTime: peakTime,\n      activePlayerCount: uniquePlayers.size\n    };\n  }\n\n  clearHistory(): void {\n    this.metricsHistory = [];\n  }\n}","import { GameStateForAI } from '../types/GameTypes';\nimport { AICodeExecutor, ExecutionResult } from './AICodeExecutor';\nimport { PerformanceMonitor, PerformanceMetrics } from './PerformanceMonitor';\n\nexport interface AIExecutionResult {\n  playerId: number;\n  playerName: string;\n  guess: number[];\n  success: boolean;\n  executionTime: number;\n  error?: string;\n  logs?: string[];\n  metrics?: PerformanceMetrics;\n}\n\nexport class AIExecutionHandler {\n  private static instance: AIExecutionHandler;\n  private executor: AICodeExecutor;\n  private monitor: PerformanceMonitor;\n\n  private constructor() {\n    this.executor = AICodeExecutor.getInstance();\n    this.monitor = PerformanceMonitor.getInstance();\n  }\n\n  static getInstance(): AIExecutionHandler {\n    if (!AIExecutionHandler.instance) {\n      AIExecutionHandler.instance = new AIExecutionHandler();\n    }\n    return AIExecutionHandler.instance;\n  }\n\n  async executeWithFallback(\n    userCode: string,\n    gameState: GameStateForAI,\n    playerId: number,\n    playerName: string\n  ): Promise<AIExecutionResult> {\n    try {\n      // Measure execution with performance monitoring\n      const [executionResult, metrics] = await this.monitor.measureExecution(\n        () => this.executor.executeUserAI(userCode, gameState, playerId),\n        { playerId }\n      );\n\n      if (executionResult.success && executionResult.result) {\n        // Log successful execution\n        console.log(`AI execution successful for player ${playerId} (${playerName})`, {\n          executionTime: executionResult.executionTime,\n          guess: executionResult.result,\n          logs: executionResult.logs\n        });\n\n        return {\n          playerId,\n          playerName,\n          guess: executionResult.result,\n          success: true,\n          executionTime: executionResult.executionTime || 0,\n          logs: executionResult.logs,\n          metrics\n        };\n      } else {\n        // Execution failed but was caught properly\n        throw new Error(executionResult.error || 'Unknown execution error');\n      }\n\n    } catch (error: any) {\n      console.error(`AI execution failed for player ${playerId} (${playerName}):`, error);\n\n      // Generate fallback guess\n      const fallbackGuess = this.generateFallbackGuess(gameState);\n      \n      const errorDetails = error.metrics ? {\n        error: error.error?.message || 'Unknown error',\n        executionTime: error.metrics.executionTime\n      } : {\n        error: error.message || 'Unknown error',\n        executionTime: 0\n      };\n\n      return {\n        playerId,\n        playerName,\n        guess: fallbackGuess,\n        success: false,\n        ...errorDetails,\n        metrics: error.metrics\n      };\n    }\n  }\n\n  private generateFallbackGuess(gameState: GameStateForAI): number[] {\n    const available: number[] = [];\n    \n    // Find all available keywords (not hints, not revealed wrong answers)\n    for (let i = 0; i < gameState.keywords.length; i++) {\n      if (!gameState.myHints.includes(i) && \n          !gameState.revealedWrongAnswers.includes(i)) {\n        available.push(i);\n      }\n    }\n\n    // Start with revealed answers\n    const guess = [...gameState.revealedAnswers];\n\n    // Fill remaining slots randomly\n    while (guess.length < gameState.answerCount && available.length > 0) {\n      const randomIndex = Math.floor(Math.random() * available.length);\n      const selected = available.splice(randomIndex, 1)[0];\n      \n      if (!guess.includes(selected)) {\n        guess.push(selected);\n      }\n    }\n\n    // If still not enough (edge case), fill with any valid indices\n    if (guess.length < gameState.answerCount) {\n      for (let i = 0; i < gameState.keywords.length && guess.length < gameState.answerCount; i++) {\n        if (!gameState.myHints.includes(i) && !guess.includes(i)) {\n          guess.push(i);\n        }\n      }\n    }\n\n    return guess.slice(0, gameState.answerCount);\n  }\n\n  // Get execution statistics for a player\n  getPlayerStats(playerId: number) {\n    return this.monitor.getPlayerStats(playerId);\n  }\n\n  // Get global execution statistics\n  getGlobalStats() {\n    return this.monitor.getGlobalStats();\n  }\n\n  // Validate AI code without executing\n  async validateCode(code: string): Promise<{ valid: boolean; errors?: string[]; warnings?: string[] }> {\n    const { AICodeValidator } = await import('./AICodeValidator');\n    \n    const result = AICodeValidator.validate(code);\n    \n    return {\n      valid: result.isValid,\n      errors: result.errors.length > 0 ? result.errors : undefined,\n      warnings: result.warnings\n    };\n  }\n\n  // Test AI code with a sample game state\n  async testAICode(\n    code: string,\n    sampleGameState?: GameStateForAI\n  ): Promise<{\n    success: boolean;\n    result?: number[];\n    error?: string;\n    executionTime?: number;\n    logs?: string[];\n  }> {\n    // Use provided game state or create a sample one\n    const testGameState = sampleGameState || this.createSampleGameState();\n    \n    try {\n      const result = await this.executor.executeUserAI(code, testGameState, -1); // -1 for test player ID\n      return result;\n    } catch (error: any) {\n      return {\n        success: false,\n        error: error.message || 'Test execution failed'\n      };\n    }\n  }\n\n  private createSampleGameState(): GameStateForAI {\n    return {\n      keywords: ['사과', '바나나', '체리', '포도', '망고', '복숭아', '딸기', '수박', '멜론', '키위'],\n      myHints: [1, 3], // 바나나, 포도는 정답이 아님\n      answerCount: 3,\n      previousGuesses: [\n        { playerId: 1, guess: [0, 2, 4], correctCount: 2 },\n        { playerId: 2, guess: [2, 5, 6], correctCount: 1 }\n      ],\n      revealedAnswers: [],\n      revealedWrongAnswers: [7], // 수박은 정답이 아님\n      currentTurn: 3,\n      timeLimit: 60\n    };\n  }\n}","import { BasePlayer } from './BasePlayer';\nimport { PlayerInfo } from '../types/PlayerTypes';\nimport { GameStateForAI } from '../types/GameTypes';\nimport { AIExecutionHandler } from '../sandbox/AIExecutionHandler';\n\nexport class CustomAIPlayer extends BasePlayer {\n  private aiCode: string;\n  private aiLanguage: 'javascript' | 'typescript';\n  private executionHandler: AIExecutionHandler;\n  \n  constructor(playerInfo: PlayerInfo) {\n    super(playerInfo);\n    this.aiCode = playerInfo.customCode || '';\n    this.aiLanguage = playerInfo.customLanguage || 'javascript';\n    this.executionHandler = AIExecutionHandler.getInstance();\n    this.ready = this.validateCode();\n  }\n\n  async makeGuess(gameState: GameStateForAI): Promise<number[]> {\n    try {\n      // Use the secure sandbox execution\n      const result = await this.executionHandler.executeWithFallback(\n        this.aiCode,\n        gameState,\n        this.playerInfo.id,\n        this.playerInfo.nickname\n      );\n\n      if (!result.success) {\n        console.error(`Custom AI execution failed for ${this.playerInfo.nickname}:`, result.error);\n        if (result.logs && result.logs.length > 0) {\n          console.log(`AI logs for ${this.playerInfo.nickname}:`, result.logs);\n        }\n      }\n\n      return result.guess;\n    } catch (error) {\n      console.error('Unexpected error in Custom AI execution:', error);\n      return this.fallbackStrategy(gameState);\n    }\n  }\n\n  private fallbackStrategy(gameState: GameStateForAI): number[] {\n    const availableIndices = Array.from(\n      { length: gameState.keywords.length }, \n      (_, i) => i\n    ).filter(idx => !gameState.revealedWrongAnswers.includes(idx));\n    \n    const selectedIndices = [...gameState.revealedAnswers];\n    \n    while (selectedIndices.length < gameState.answerCount && availableIndices.length > 0) {\n      const remaining = availableIndices.filter(idx => !selectedIndices.includes(idx));\n      if (remaining.length === 0) break;\n      \n      const randomIdx = remaining[Math.floor(Math.random() * remaining.length)];\n      selectedIndices.push(randomIdx);\n    }\n    \n    return selectedIndices;\n  }\n\n  private validateCode(): boolean {\n    if (!this.aiCode.trim()) return false;\n    \n    // Use the execution handler's validation\n    const validationPromise = this.executionHandler.validateCode(this.aiCode);\n    \n    // Since constructor can't be async, we'll do a simple check here\n    // and rely on full validation during execution\n    try {\n      // Basic syntax check\n      new Function(this.aiCode);\n      return true;\n    } catch (error) {\n      console.error('AI code validation error:', error);\n      return false;\n    }\n  }\n\n  async validateCodeAsync(): Promise<{ valid: boolean; errors?: string[]; warnings?: string[] }> {\n    return await this.executionHandler.validateCode(this.aiCode);\n  }\n\n  updateCode(code: string, language: 'javascript' | 'typescript'): void {\n    this.aiCode = code;\n    this.aiLanguage = language;\n    this.ready = this.validateCode();\n  }\n\n  getCode(): string {\n    return this.aiCode;\n  }\n\n  getLanguage(): 'javascript' | 'typescript' {\n    return this.aiLanguage;\n  }\n}","import { AIStrategy } from './AIStrategy';\nimport { GameStateForAI, GuessHistory } from '../types/GameTypes';\n\n// 전역 게임 메모리 - 모든 AI 인스턴스가 공유\nexport class GlobalGameMemory {\n  private static instance: GlobalGameMemory;\n  private allCombinations: Set<string> = new Set();\n  private keywordStats: Map<number, { appearances: number; correctGuesses: number; totalGuesses: number }> = new Map();\n  private playerPatterns: Map<number, Map<number, number>> = new Map(); // playerId -> keywordIdx -> 선택 횟수\n  \n  private constructor() {}\n  \n  static getInstance(): GlobalGameMemory {\n    if (!GlobalGameMemory.instance) {\n      GlobalGameMemory.instance = new GlobalGameMemory();\n    }\n    return GlobalGameMemory.instance;\n  }\n  \n  reset(): void {\n    this.allCombinations.clear();\n    this.keywordStats.clear();\n    this.playerPatterns.clear();\n    console.log('[메모리] 게임 메모리 초기화');\n  }\n  \n  addCombination(combination: number[]): void {\n    const key = [...combination].sort((a, b) => a - b).join(',');\n    this.allCombinations.add(key);\n  }\n  \n  hasCombination(combination: number[]): boolean {\n    const key = [...combination].sort((a, b) => a - b).join(',');\n    return this.allCombinations.has(key);\n  }\n  \n  getAllCombinations(): Set<string> {\n    return new Set(this.allCombinations);\n  }\n  \n  updateKeywordStats(guess: GuessHistory): void {\n    guess.guess.forEach(keywordIdx => {\n      const stats = this.keywordStats.get(keywordIdx) || { appearances: 0, correctGuesses: 0, totalGuesses: 0 };\n      stats.appearances++;\n      stats.totalGuesses += guess.guess.length;\n      stats.correctGuesses += guess.correctCount;\n      this.keywordStats.set(keywordIdx, stats);\n    });\n  }\n  \n  getKeywordScore(keywordIdx: number): number {\n    const stats = this.keywordStats.get(keywordIdx);\n    if (!stats || stats.appearances === 0) return 50; // 중립 점수\n    \n    // 평균 정답률 계산\n    const avgCorrectRate = stats.correctGuesses / stats.totalGuesses;\n    return avgCorrectRate * 100;\n  }\n  \n  updatePlayerPattern(playerId: number, keywords: number[]): void {\n    if (!this.playerPatterns.has(playerId)) {\n      this.playerPatterns.set(playerId, new Map());\n    }\n    const pattern = this.playerPatterns.get(playerId)!;\n    \n    keywords.forEach(keywordIdx => {\n      pattern.set(keywordIdx, (pattern.get(keywordIdx) || 0) + 1);\n    });\n  }\n  \n  getFrequentlyChosenKeywords(minFrequency: number = 3): number[] {\n    const frequentKeywords: Map<number, number> = new Map();\n    \n    this.playerPatterns.forEach((pattern) => {\n      pattern.forEach((count, keywordIdx) => {\n        frequentKeywords.set(keywordIdx, (frequentKeywords.get(keywordIdx) || 0) + count);\n      });\n    });\n    \n    return Array.from(frequentKeywords.entries())\n      .filter(([_, count]) => count >= minFrequency)\n      .sort((a, b) => b[1] - a[1])\n      .map(([idx, _]) => idx);\n  }\n}\n\nexport abstract class BaseStrategy implements AIStrategy {\n  private gameMemory: GlobalGameMemory = GlobalGameMemory.getInstance();\n  \n  selectKeywords(gameState: GameStateForAI): number[] {\n    console.log('=== 지능형 AI 실행 ===');\n    console.log(`턴 ${gameState.currentTurn}: 키워드 ${gameState.keywords.length}개 중 정답 ${gameState.answerCount}개 찾기`);\n    \n    // 게임 메모리 업데이트 - 모든 이전 추측을 전역 메모리에 저장\n    this.updateGlobalMemory(gameState);\n    \n    // 1. 확실한 정답과 오답 수집\n    const definiteAnswers = new Set<number>(gameState.revealedAnswers);\n    const definiteWrongs = new Set<number>();\n    \n    // 내 힌트는 모두 오답\n    gameState.myHints.forEach(hint => definiteWrongs.add(hint));\n    \n    // 공개된 오답 추가\n    gameState.revealedWrongAnswers.forEach(wrong => definiteWrongs.add(wrong));\n    \n    // 공개된 다른 플레이어의 힌트도 오답\n    if (gameState.revealedOtherHints && gameState.revealedOtherHints.length > 0) {\n      gameState.revealedOtherHints.forEach(({ hints }) => {\n        hints.forEach(hintIdx => definiteWrongs.add(hintIdx));\n      });\n    }\n    \n    console.log(`내 힌트 (오답): ${gameState.myHints.map(i => gameState.keywords[i])}`);\n    console.log(`공개된 오답: ${gameState.revealedWrongAnswers.map(i => gameState.keywords[i])}`);\n    console.log(`공개된 정답: ${gameState.revealedAnswers.map(i => gameState.keywords[i])}`);\n    \n    // 2. 이전 추측 분석으로 추가 정보 획득\n    this.analyzeAllGuesses(gameState, definiteAnswers, definiteWrongs);\n    \n    // 3. 자주 선택되는 키워드 확인\n    const frequentKeywords = this.gameMemory.getFrequentlyChosenKeywords(3);\n    console.log(`자주 선택되는 키워드: ${frequentKeywords.map(i => gameState.keywords[i]).join(', ')}`);\n    \n    // 4. 선택 가능한 키워드 목록 생성\n    const possibleKeywords: number[] = [];\n    for (let i = 0; i < gameState.keywords.length; i++) {\n      if (!definiteWrongs.has(i)) {\n        possibleKeywords.push(i);\n      }\n    }\n    \n    console.log(`확실한 정답: ${definiteAnswers.size}개`);\n    console.log(`확실한 오답: ${definiteWrongs.size}개`);\n    console.log(`선택 가능한 키워드: ${possibleKeywords.length}개`);\n    \n    // 5. 이미 충분한 정답을 아는 경우\n    if (definiteAnswers.size >= gameState.answerCount) {\n      console.log('모든 정답을 알고 있음! 게임 종료!');\n      return Array.from(definiteAnswers).slice(0, gameState.answerCount);\n    }\n    \n    // 6. 각 키워드의 점수 계산 (메모리 기반 점수 포함)\n    const scores = this.calculateScoresWithMemory(gameState, possibleKeywords, definiteAnswers, definiteWrongs, frequentKeywords);\n    \n    // 7. 최종 추측 구성\n    let finalGuess = this.buildFinalGuess(scores, definiteAnswers, gameState.answerCount);\n    \n    // 8. 중복 추측 방지: 전역 메모리 기반 확인\n    finalGuess = this.preventDuplicateGuessWithGlobalMemory(finalGuess, gameState, scores);\n    \n    // 9. 이번 추측을 전역 메모리에 추가\n    this.gameMemory.addCombination(finalGuess);\n    \n    console.log('최종 선택:', finalGuess.map(i => gameState.keywords[i]));\n    return finalGuess;\n  }\n\n  // 전역 메모리 업데이트\n  private updateGlobalMemory(gameState: GameStateForAI): void {\n    // 모든 이전 추측을 전역 메모리에 추가\n    gameState.previousGuesses.forEach(guess => {\n      this.gameMemory.addCombination(guess.guess);\n      this.gameMemory.updateKeywordStats(guess);\n      this.gameMemory.updatePlayerPattern(guess.playerId, guess.guess);\n    });\n  }\n  \n  // 메모리 기반 점수 계산\n  private calculateScoresWithMemory(\n    gameState: GameStateForAI,\n    possibleKeywords: number[],\n    definiteAnswers: Set<number>,\n    definiteWrongs: Set<number>,\n    frequentKeywords: number[]\n  ): Map<number, number> {\n    const scores = new Map<number, number>();\n    \n    // 확실한 정답은 최고 점수\n    definiteAnswers.forEach(idx => {\n      scores.set(idx, 1000);\n    });\n    \n    // 가능한 키워드들의 점수 계산\n    possibleKeywords.forEach(idx => {\n      if (!definiteAnswers.has(idx) && !definiteWrongs.has(idx)) {\n        // 기본 점수 계산\n        let score = this.calculateKeywordScore(idx, gameState, definiteAnswers, definiteWrongs);\n        \n        // 메모리 기반 점수 보정\n        const memoryScore = this.gameMemory.getKeywordScore(idx);\n        score = score * 0.7 + memoryScore * 0.3; // 가중 평균\n        \n        // 자주 선택되는 키워드 보너스\n        if (frequentKeywords.includes(idx)) {\n          score *= 1.5;\n          console.log(`[메모리] ${gameState.keywords[idx]}는 자주 선택됨 - 보너스 적용`);\n        }\n        \n        scores.set(idx, score);\n      }\n    });\n    \n    // 점수별로 정렬하여 출력\n    const sorted = Array.from(scores.entries())\n      .sort((a, b) => b[1] - a[1])\n      .slice(0, 10);\n    \n    console.log('상위 10개 키워드 점수 (메모리 반영):');\n    sorted.forEach(([idx, score]) => {\n      console.log(`  ${gameState.keywords[idx]}: ${score.toFixed(2)}점`);\n    });\n    \n    return scores;\n  }\n  \n  // 전역 메모리 기반 중복 방지\n  private preventDuplicateGuessWithGlobalMemory(\n    guess: number[],\n    gameState: GameStateForAI,\n    scores: Map<number, number>\n  ): number[] {\n    // 전역 메모리에서 중복 확인\n    if (this.gameMemory.hasCombination(guess)) {\n      console.log('[메모리] 전역 중복 감지! 새로운 조합 생성 중...');\n      console.log(`[메모리] 중복 조합: ${guess.map(i => gameState.keywords[i]).join(', ')}`);\n      \n      // 체계적으로 새로운 조합 생성\n      return this.generateNewCombinationWithMemory(guess, gameState, scores);\n    }\n    \n    return guess;\n  }\n  \n  // 메모리 기반 새로운 조합 생성\n  private generateNewCombinationWithMemory(\n    originalGuess: number[],\n    gameState: GameStateForAI,\n    scores: Map<number, number>\n  ): number[] {\n    const allCombinations = this.gameMemory.getAllCombinations();\n    console.log(`[메모리] 현재까지 ${allCombinations.size}개의 조합이 시도됨`);\n    \n    // 확실한 정답은 유지\n    const mustInclude = originalGuess.filter(idx => \n      gameState.revealedAnswers.includes(idx)\n    );\n    \n    // 점수 높은 순으로 후보 정렬\n    const candidates = Array.from(scores.entries())\n      .filter(([idx]) => !mustInclude.includes(idx))\n      .sort((a, b) => b[1] - a[1]);\n    \n    // 새로운 조합 시도 (최대 50회)\n    for (let attempt = 0; attempt < 50; attempt++) {\n      const newGuess = [...mustInclude];\n      const needed = gameState.answerCount - newGuess.length;\n      \n      // 상위 후보 중에서 선택 (약간의 무작위성 추가)\n      const pool = candidates.slice(0, needed * 2);\n      const shuffled = [...pool].sort(() => Math.random() - 0.5);\n      \n      for (let i = 0; i < needed && i < shuffled.length; i++) {\n        newGuess.push(shuffled[i][0]);\n      }\n      \n      // 중복 확인\n      if (!this.gameMemory.hasCombination(newGuess)) {\n        console.log(`[메모리] ${attempt + 1}번 시도 후 새로운 조합 생성 성공`);\n        console.log(`[메모리] 새 조합: ${newGuess.map(i => gameState.keywords[i]).join(', ')}`);\n        return newGuess;\n      }\n    }\n    \n    // 모든 시도가 실패하면 최선의 선택 반환\n    console.log('[메모리] 경고: 새로운 조합 생성 실패');\n    return originalGuess;\n  }\n\n  // 모든 추측 분석\n  private analyzeAllGuesses(gameState: GameStateForAI, definiteAnswers: Set<number>, definiteWrongs: Set<number>): void {\n    // 1. 정답이 0개인 추측 - 모든 키워드가 오답\n    gameState.previousGuesses.forEach(guess => {\n      if (guess.correctCount === 0) {\n        guess.guess.forEach(idx => {\n          definiteWrongs.add(idx);\n        });\n        console.log(`정답 0개 추측에서 오답 발견: ${guess.guess.map(i => gameState.keywords[i])}`);\n      }\n    });\n    \n    // 2. 추측 간 비교로 확실한 정답/오답 찾기\n    for (let i = 0; i < gameState.previousGuesses.length - 1; i++) {\n      for (let j = i + 1; j < gameState.previousGuesses.length; j++) {\n        this.compareGuesses(\n          gameState.previousGuesses[i], \n          gameState.previousGuesses[j], \n          definiteAnswers, \n          definiteWrongs,\n          gameState\n        );\n      }\n    }\n    \n    // 3. 제약 조건 확인\n    gameState.previousGuesses.forEach(guess => {\n      this.checkConstraints(guess, definiteAnswers, definiteWrongs, gameState);\n    });\n  }\n\n  // 두 추측 비교\n  private compareGuesses(\n    guess1: GuessHistory, \n    guess2: GuessHistory, \n    definiteAnswers: Set<number>, \n    definiteWrongs: Set<number>, \n    gameState: GameStateForAI\n  ): void {\n    // 두 추측의 차이 계산\n    const onlyIn1 = guess1.guess.filter(x => !guess2.guess.includes(x));\n    const onlyIn2 = guess2.guess.filter(x => !guess1.guess.includes(x));\n    \n    // 정확히 하나씩만 다른 경우\n    if (onlyIn1.length === 1 && onlyIn2.length === 1) {\n      const idx1 = onlyIn1[0];\n      const idx2 = onlyIn2[0];\n      \n      if (guess1.correctCount > guess2.correctCount) {\n        // idx1은 정답, idx2는 오답\n        if (!definiteAnswers.has(idx1) && !definiteWrongs.has(idx1)) {\n          definiteAnswers.add(idx1);\n          console.log(`비교 분석: ${gameState.keywords[idx1]}는 정답!`);\n        }\n        if (!definiteWrongs.has(idx2) && !definiteAnswers.has(idx2)) {\n          definiteWrongs.add(idx2);\n          console.log(`비교 분석: ${gameState.keywords[idx2]}는 오답!`);\n        }\n      } else if (guess2.correctCount > guess1.correctCount) {\n        // idx2는 정답, idx1은 오답\n        if (!definiteAnswers.has(idx2) && !definiteWrongs.has(idx2)) {\n          definiteAnswers.add(idx2);\n          console.log(`비교 분석: ${gameState.keywords[idx2]}는 정답!`);\n        }\n        if (!definiteWrongs.has(idx1) && !definiteAnswers.has(idx1)) {\n          definiteWrongs.add(idx1);\n          console.log(`비교 분석: ${gameState.keywords[idx1]}은 오답!`);\n        }\n      }\n    }\n  }\n\n  // 제약 조건 확인\n  private checkConstraints(\n    guess: GuessHistory, \n    definiteAnswers: Set<number>, \n    definiteWrongs: Set<number>, \n    gameState: GameStateForAI\n  ): void {\n    let knownAnswers = 0;\n    let knownWrongs = 0;\n    const unknownIndices: number[] = [];\n    \n    guess.guess.forEach(idx => {\n      if (definiteAnswers.has(idx)) {\n        knownAnswers++;\n      } else if (definiteWrongs.has(idx)) {\n        knownWrongs++;\n      } else {\n        unknownIndices.push(idx);\n      }\n    });\n    \n    // 알려진 정답만으로 이미 correctCount를 달성한 경우\n    if (knownAnswers === guess.correctCount) {\n      // 나머지 unknown은 모두 오답\n      unknownIndices.forEach(idx => {\n        if (!definiteWrongs.has(idx)) {\n          definiteWrongs.add(idx);\n          console.log(`제약 조건: ${gameState.keywords[idx]}는 오답 (이미 충분한 정답)`);\n        }\n      });\n    }\n    \n    // unknown과 known answers의 합이 정확히 correctCount인 경우\n    if (knownAnswers + unknownIndices.length === guess.correctCount && unknownIndices.length > 0) {\n      // 모든 unknown이 정답\n      unknownIndices.forEach(idx => {\n        if (!definiteAnswers.has(idx)) {\n          definiteAnswers.add(idx);\n          console.log(`제약 조건: ${gameState.keywords[idx]}는 정답 (나머지 모두 정답)`);\n        }\n      });\n    }\n  }\n\n\n  // 개별 키워드 점수 계산\n  private calculateKeywordScore(\n    keywordIdx: number, \n    gameState: GameStateForAI, \n    definiteAnswers: Set<number>, \n    definiteWrongs: Set<number>\n  ): number {\n    let totalAppearances = 0;\n    let weightedCorrect = 0;\n    \n    gameState.previousGuesses.forEach(guess => {\n      if (guess.guess.includes(keywordIdx)) {\n        totalAppearances++;\n        \n        // 이 추측에서 알려진 정답/오답 개수\n        let knownAnswers = 0;\n        let knownWrongs = 0;\n        let unknownCount = 0;\n        \n        guess.guess.forEach(idx => {\n          if (definiteAnswers.has(idx)) knownAnswers++;\n          else if (definiteWrongs.has(idx)) knownWrongs++;\n          else unknownCount++;\n        });\n        \n        // 남은 정답 개수\n        const remainingCorrect = Math.max(0, guess.correctCount - knownAnswers);\n        \n        // 이 키워드가 정답일 확률\n        if (unknownCount > 0 && remainingCorrect > 0) {\n          const probability = remainingCorrect / unknownCount;\n          weightedCorrect += probability;\n        }\n      }\n    });\n    \n    // 기본 점수 (아직 선택되지 않은 키워드는 중립적)\n    if (totalAppearances === 0) {\n      return 50; // 중립 점수\n    }\n    \n    // 평균 확률을 점수로 변환\n    return (weightedCorrect / totalAppearances) * 100;\n  }\n\n  // 최종 추측 구성\n  private buildFinalGuess(scores: Map<number, number>, definiteAnswers: Set<number>, answerCount: number): number[] {\n    // 점수 순으로 정렬\n    const sorted = Array.from(scores.entries())\n      .sort((a, b) => b[1] - a[1]);\n    \n    const finalGuess: number[] = [];\n    \n    // 높은 점수부터 선택\n    for (const [idx, score] of sorted) {\n      if (finalGuess.length >= answerCount) break;\n      finalGuess.push(idx);\n    }\n    \n    // 혹시 부족하면 (이런 일은 없어야 함)\n    if (finalGuess.length < answerCount) {\n      console.error('경고: 선택 가능한 키워드가 부족합니다!');\n    }\n    \n    return finalGuess;\n  }\n  \n\n  abstract getStrategyName(): string;\n  abstract getDescription(): string;\n}","import { BaseStrategy } from './BaseStrategy';\n\nexport class EasyStrategy extends BaseStrategy {\n  getStrategyName(): string {\n    return 'Easy AI';\n  }\n\n  getDescription(): string {\n    return '논리적 추론과 제약 조건 분석을 통해 정답을 찾습니다.';\n  }\n}\n","import { BaseStrategy } from './BaseStrategy';\n\nexport class MediumStrategy extends BaseStrategy {\n\n  getStrategyName(): string {\n    return 'Medium AI';\n  }\n\n  getDescription(): string {\n    return '논리적 추론과 제약 조건 분석을 통해 정답을 찾습니다.';\n  }\n}","import { BaseStrategy } from './BaseStrategy';\nimport { GameStateForAI, GuessHistory } from '../types/GameTypes';\n\nexport class HardStrategy extends BaseStrategy {\n  selectKeywords(gameState: GameStateForAI): number[] {\n    // 기본 전략 실행\n    const baseResult = super.selectKeywords(gameState);\n    \n    // Hard AI 전용: 고급 추론 모드\n    const optimizedResult = this.advancedReasoning(gameState, baseResult);\n    \n    return optimizedResult;\n  }\n  \n  private advancedReasoning(gameState: GameStateForAI, baseGuess: number[]): number[] {\n    const { keywords, answerCount, previousGuesses, revealedAnswers } = gameState;\n    \n    // 이미 충분한 정답을 알고 있으면 그대로 반환\n    if (revealedAnswers.length >= answerCount) {\n      return baseGuess;\n    }\n    \n    // 남은 정답 개수가 적을 때 특별 알고리즘 발동\n    const remainingAnswers = answerCount - revealedAnswers.length;\n    if (remainingAnswers <= 3) {\n      console.log(`[Hard AI] 마지막 ${remainingAnswers}개 정답 찾기 모드 활성화`);\n      \n      // 가능한 모든 조합을 시뮬레이션\n      const optimizedGuess = this.findOptimalCombination(gameState);\n      if (optimizedGuess.length > 0) {\n        console.log('[Hard AI] 최적 조합 발견!');\n        return optimizedGuess;\n      }\n    }\n    \n    // 추가 교집합/차집합 분석\n    const refinedGuess = this.refineWithSetAnalysis(gameState, baseGuess);\n    \n    return refinedGuess;\n  }\n  \n  private findOptimalCombination(gameState: GameStateForAI): number[] {\n    const { keywords, answerCount, previousGuesses, revealedAnswers, revealedWrongAnswers, myHints, revealedOtherHints } = gameState;\n    \n    // 확실한 오답 수집\n    const definiteWrongs = new Set<number>([\n      ...revealedWrongAnswers,\n      ...myHints\n    ]);\n    \n    // 공개된 다른 플레이어의 힌트도 오답\n    if (revealedOtherHints) {\n      revealedOtherHints.forEach(({ hints }) => {\n        hints.forEach(h => definiteWrongs.add(h));\n      });\n    }\n    \n    // 과거 추측에서 확실한 오답 추가\n    previousGuesses.forEach(guess => {\n      if (guess.correctCount === 0) {\n        guess.guess.forEach(idx => definiteWrongs.add(idx));\n      }\n    });\n    \n    // 가능한 후보들\n    const possibleIndices: number[] = [];\n    for (let i = 0; i < keywords.length; i++) {\n      if (!definiteWrongs.has(i) && !revealedAnswers.includes(i)) {\n        possibleIndices.push(i);\n      }\n    }\n    \n    // 가능한 조합이 적으면 모든 조합 검증\n    const remainingSlots = answerCount - revealedAnswers.length;\n    if (possibleIndices.length <= 15 && remainingSlots <= 3) {\n      console.log(`[Hard AI] ${possibleIndices.length}개 후보에서 ${remainingSlots}개 선택 조합 검증`);\n      \n      // 모든 조합 생성 및 검증\n      const validCombinations = this.findValidCombinations(\n        possibleIndices, \n        remainingSlots, \n        revealedAnswers,\n        previousGuesses\n      );\n      \n      if (validCombinations.length === 1) {\n        // 유일한 해를 찾음!\n        console.log('[Hard AI] 유일한 정답 조합 발견!');\n        return [...revealedAnswers, ...validCombinations[0]];\n      } else if (validCombinations.length > 1) {\n        // 여러 가능성이 있을 때 가장 확률 높은 것 선택\n        console.log(`[Hard AI] ${validCombinations.length}개의 가능한 조합 중 최적 선택`);\n        return [...revealedAnswers, ...validCombinations[0]];\n      }\n    }\n    \n    return [];\n  }\n  \n  private findValidCombinations(\n    candidates: number[], \n    slots: number, \n    knownAnswers: number[],\n    previousGuesses: GuessHistory[]\n  ): number[][] {\n    const validCombinations: number[][] = [];\n    \n    // 조합 생성 함수\n    const generateCombinations = (start: number, current: number[]): void => {\n      if (current.length === slots) {\n        // 이 조합이 모든 과거 추측과 일치하는지 검증\n        const testAnswer = [...knownAnswers, ...current];\n        if (this.isValidHypothesis(testAnswer, previousGuesses)) {\n          validCombinations.push([...current]);\n        }\n        return;\n      }\n      \n      for (let i = start; i < candidates.length; i++) {\n        current.push(candidates[i]);\n        generateCombinations(i + 1, current);\n        current.pop();\n      }\n    };\n    \n    generateCombinations(0, []);\n    return validCombinations;\n  }\n  \n  private isValidHypothesis(hypothesis: number[], guesses: GuessHistory[]): boolean {\n    const hypothesisSet = new Set(hypothesis);\n    \n    for (const guess of guesses) {\n      const correctInGuess = guess.guess.filter(g => hypothesisSet.has(g)).length;\n      if (correctInGuess !== guess.correctCount) {\n        return false;\n      }\n    }\n    \n    return true;\n  }\n  \n  private refineWithSetAnalysis(gameState: GameStateForAI, currentGuess: number[]): number[] {\n    const { previousGuesses, answerCount } = gameState;\n    \n    // 이전 추측들의 교집합/차집합 분석으로 확실한 정답 찾기\n    const confirmedAnswers = new Set<number>();\n    \n    // 높은 정답률을 가진 추측들의 교집합 분석\n    const highScoreGuesses = previousGuesses.filter(g => \n      g.correctCount >= answerCount * 0.6\n    );\n    \n    if (highScoreGuesses.length >= 2) {\n      // 교집합에서 공통으로 나타나는 키워드 찾기\n      const firstGuessSet = new Set(highScoreGuesses[0].guess);\n      let intersection = [...firstGuessSet];\n      \n      for (let i = 1; i < highScoreGuesses.length; i++) {\n        intersection = intersection.filter(idx => \n          highScoreGuesses[i].guess.includes(idx)\n        );\n      }\n      \n      // 교집합 크기가 적절하면 신뢰\n      if (intersection.length > 0 && intersection.length <= answerCount) {\n        intersection.forEach(idx => confirmedAnswers.add(idx));\n        console.log(`[Hard AI] 교집합 분석으로 ${intersection.length}개 정답 후보 발견`);\n      }\n    }\n    \n    // 확실한 정답을 우선 포함\n    const refinedGuess = [...confirmedAnswers];\n    \n    // 나머지는 기존 추측에서 채움\n    for (const idx of currentGuess) {\n      if (refinedGuess.length >= answerCount) break;\n      if (!refinedGuess.includes(idx)) {\n        refinedGuess.push(idx);\n      }\n    }\n    \n    return refinedGuess;\n  }\n\n  getStrategyName(): string {\n    return 'Hard AI';\n  }\n\n  getDescription(): string {\n    return '고급 추론과 완전 탐색을 통해 최적의 답을 찾습니다.';\n  }\n}\n","import { IPlayer } from './players/BasePlayer';\nimport { HumanPlayer } from './players/HumanPlayer';\nimport { BuiltInAIPlayer } from './players/BuiltInAIPlayer';\nimport { CustomAIPlayer } from './players/CustomAIPlayer';\nimport { PlayerInfo, PlayerType } from './types/PlayerTypes';\nimport { AIStrategy } from './strategies/AIStrategy';\nimport { EasyStrategy } from './strategies/EasyStrategy';\nimport { MediumStrategy } from './strategies/MediumStrategy';\nimport { HardStrategy } from './strategies/HardStrategy';\n\nexport class PlayerFactory {\n  static createPlayer(playerInfo: PlayerInfo): IPlayer {\n    switch (playerInfo.type) {\n      case 'human':\n        return new HumanPlayer(playerInfo);\n        \n      case 'built-in-ai':\n        const strategy = this.createStrategy(playerInfo.aiDifficulty || 'medium');\n        return new BuiltInAIPlayer(playerInfo, strategy);\n        \n      case 'custom-ai':\n        return new CustomAIPlayer(playerInfo);\n        \n      default:\n        throw new Error(`Unknown player type: ${playerInfo.type}`);\n    }\n  }\n\n  private static createStrategy(difficulty: 'easy' | 'medium' | 'hard'): AIStrategy {\n    // 각 플레이어마다 새로운 strategy 인스턴스 생성\n    switch (difficulty) {\n      case 'easy':\n        return new EasyStrategy();\n      case 'medium':\n        return new MediumStrategy();\n      case 'hard':\n        return new HardStrategy();\n      default:\n        return new MediumStrategy();\n    }\n  }\n\n  static createBuiltInAIOpponent(\n    id: number, \n    difficulty: 'easy' | 'medium' | 'hard' = 'medium'\n  ): IPlayer {\n    const playerInfo: PlayerInfo = {\n      id,\n      nickname: `AI (${difficulty === 'easy' ? '쉬움' : difficulty === 'medium' ? '보통' : '어려움'})`,\n      type: 'built-in-ai',\n      aiDifficulty: difficulty\n    };\n    \n    return this.createPlayer(playerInfo);\n  }\n\n  static isHumanPlayer(player: IPlayer): player is HumanPlayer {\n    return player instanceof HumanPlayer;\n  }\n\n  static isBuiltInAIPlayer(player: IPlayer): player is BuiltInAIPlayer {\n    return player instanceof BuiltInAIPlayer;\n  }\n\n  static isCustomAIPlayer(player: IPlayer): player is CustomAIPlayer {\n    return player instanceof CustomAIPlayer;\n  }\n}","import { IPlayer } from './players/BasePlayer';\nimport { HumanPlayer } from './players/HumanPlayer';\nimport { GameContext, GameStateForAI, TurnResult } from './types/GameTypes';\nimport { PlayerInfo } from './types/PlayerTypes';\nimport { PlayerFactory } from './PlayerFactory';\nimport { GlobalGameMemory } from './strategies/BaseStrategy';\n\nexport interface GameManagerConfig {\n  keywordPoolSize: number;\n  answerCount: number;\n  hintCount: number;\n  timeLimit: number;\n  maxTurns?: number;\n}\n\nexport class GameManager {\n  private players: IPlayer[] = [];\n  private currentPlayerIndex: number = 0;\n  private gameContext: GameContext;\n  private config: GameManagerConfig;\n  private isGameRunning: boolean = false;\n  private turnTimer?: NodeJS.Timeout;\n  private turnStartTime: number = 0;\n  private revealedHintsPerPlayer: Map<number, { playerId: number; hints: number[] }[]> = new Map();\n  private lastHintRevealTurn: Map<number, number> = new Map(); // 각 플레이어의 마지막 힌트 공개 턴\n  \n  private onTurnStart?: (player: IPlayer) => void;\n  private onTurnEnd?: (result: TurnResult) => void;\n  private onGameEnd?: (winner?: IPlayer) => void;\n  private onTimerTick?: (remainingTime: number) => void;\n  private onAIThinking?: (thinking: boolean) => void;\n\n  constructor(config: GameManagerConfig) {\n    this.config = config;\n    this.gameContext = {\n      keywords: [],\n      answers: [],\n      playerHints: {},\n      currentTurn: 0,\n      turnHistory: [],\n      revealedAnswers: [],\n      revealedWrongAnswers: []\n    };\n  }\n\n  addPlayer(player: IPlayer): void {\n    if (this.isGameRunning) {\n      throw new Error('Cannot add players while game is running');\n    }\n    this.players.push(player);\n  }\n\n  setPlayers(players: IPlayer[]): void {\n    if (this.isGameRunning) {\n      throw new Error('Cannot set players while game is running');\n    }\n    this.players = players;\n  }\n\n  getCurrentPlayer(): IPlayer | null {\n    if (!this.isGameRunning || this.players.length === 0) return null;\n    return this.players[this.currentPlayerIndex];\n  }\n\n  getPlayers(): IPlayer[] {\n    return [...this.players];\n  }\n\n  getGameContext(): GameContext {\n    return { ...this.gameContext };\n  }\n\n  async startGame(keywords: string[], answers: number[], playerHints: { [playerId: number]: number[] }): Promise<void> {\n    if (this.players.length === 0) {\n      throw new Error('No players added to the game');\n    }\n\n    // 새 게임 시작 시 전역 메모리 초기화\n    GlobalGameMemory.getInstance().reset();\n\n    this.gameContext = {\n      keywords,\n      answers,\n      playerHints,\n      currentTurn: 1,\n      turnHistory: [],\n      revealedAnswers: [],\n      revealedWrongAnswers: []\n    };\n\n    this.currentPlayerIndex = 0;\n    this.isGameRunning = true;\n    this.revealedHintsPerPlayer.clear();\n    this.lastHintRevealTurn.clear();\n    \n    // 게임 시작 시 설정 정보 로그\n    console.log('=== 게임 설정 ===');\n    console.log(`키워드 풀: ${this.config.keywordPoolSize}개`);\n    console.log(`정답 개수: ${this.config.answerCount}개`);\n    console.log(`힌트 개수: ${this.config.hintCount}개`);\n    console.log(`플레이어 수: ${this.players.length}명`);\n    console.log(`게임 복잡도: ${this.calculateGameComplexity().toFixed(2)}`);\n    console.log(`예상 게임 길이: ${this.calculateExpectedTurns(this.calculateGameComplexity())}턴`);\n    console.log('================');\n\n    await this.startNextTurn();\n  }\n\n  private async startNextTurn(): Promise<void> {\n    if (!this.isGameRunning) return;\n\n    const currentPlayer = this.getCurrentPlayer();\n    if (!currentPlayer) return;\n\n    // 턴 시작 시간 기록\n    this.turnStartTime = Date.now();\n\n    if (this.onTurnStart) {\n      this.onTurnStart(currentPlayer);\n    }\n\n    currentPlayer.onTurnStart?.();\n\n    if (PlayerFactory.isHumanPlayer(currentPlayer)) {\n      this.startTurnTimer();\n      // 인간 플레이어의 경우에도 makeGuess를 호출하여 Promise를 생성\n      const gameStateForAI = this.createGameStateForAI(currentPlayer);\n      currentPlayer.makeGuess(gameStateForAI).then(guess => {\n        this.processTurn(guess);\n      });\n    } else {\n      // AI 플레이어의 경우에도 타이머 시작\n      this.startTurnTimer();\n      \n      // AI 플레이어의 경우, 사람처럼 보이도록 약간의 딜레이 추가\n      if (this.onAIThinking) {\n        this.onAIThinking(true);\n      }\n      \n      const thinkingTime = Math.random() * 2000 + 1500; // 1.5초 ~ 3.5초 사이의 랜덤 시간\n      \n      await new Promise(resolve => setTimeout(resolve, thinkingTime));\n      \n      const gameStateForAI = this.createGameStateForAI(currentPlayer);\n      const guess = await currentPlayer.makeGuess(gameStateForAI);\n      \n      if (this.onAIThinking) {\n        this.onAIThinking(false);\n      }\n      \n      await this.processTurn(guess);\n    }\n  }\n\n  private startTurnTimer(): void {\n    let remainingTime = this.config.timeLimit;\n    \n    if (this.onTimerTick) {\n      this.onTimerTick(remainingTime);\n    }\n\n    this.turnTimer = setInterval(() => {\n      remainingTime--;\n      \n      if (this.onTimerTick) {\n        this.onTimerTick(remainingTime);\n      }\n\n      if (remainingTime <= 0) {\n        this.handleTimeout();\n      }\n    }, 1000);\n  }\n\n  private stopTurnTimer(): void {\n    if (this.turnTimer) {\n      clearInterval(this.turnTimer);\n      this.turnTimer = undefined;\n    }\n  }\n\n  private handleTimeout(): void {\n    this.stopTurnTimer();\n    \n    const currentPlayer = this.getCurrentPlayer();\n    if (!currentPlayer) return;\n    \n    const availableIndices = Array.from(\n      { length: this.gameContext.keywords.length },\n      (_, i) => i\n    ).filter(idx => !this.gameContext.revealedWrongAnswers.includes(idx));\n    \n    const shuffled = [...availableIndices].sort(() => Math.random() - 0.5);\n    const autoGuess = shuffled.slice(0, this.config.answerCount);\n    \n    if (PlayerFactory.isHumanPlayer(currentPlayer)) {\n      // HumanPlayer의 경우 submitGuess를 통해 Promise를 resolve\n      currentPlayer.submitGuess(autoGuess);\n    } else {\n      this.processTurn(autoGuess);\n    }\n  }\n\n  async submitHumanGuess(indices: number[]): Promise<void> {\n    const currentPlayer = this.getCurrentPlayer();\n    \n    if (!currentPlayer || !PlayerFactory.isHumanPlayer(currentPlayer)) {\n      throw new Error('Current player is not a human player');\n    }\n\n    this.stopTurnTimer();\n    currentPlayer.submitGuess(indices);\n    // processTurn은 makeGuess Promise가 resolve될 때 자동으로 호출됨\n  }\n\n  private async processTurn(guess: number[]): Promise<void> {\n    const currentPlayer = this.getCurrentPlayer();\n    if (!currentPlayer) return;\n\n    // 타이머 중지 (중요: AI 플레이어도 타이머를 사용하므로)\n    this.stopTurnTimer();\n\n    const correctCount = guess.filter(idx => \n      this.gameContext.answers.includes(idx)\n    ).length;\n\n    const isWinner = correctCount === this.config.answerCount && \n                     guess.every(idx => this.gameContext.answers.includes(idx));\n\n    // 실제 사용 시간 계산\n    const actualTimeUsed = Math.round((Date.now() - this.turnStartTime) / 1000);\n    \n    const turnResult: TurnResult = {\n      playerId: currentPlayer.getInfo().id,\n      playerName: currentPlayer.getInfo().nickname,\n      guess: [...guess],\n      guessKeywords: guess.map(idx => this.gameContext.keywords[idx]),\n      correctCount,\n      turnNumber: this.gameContext.currentTurn,\n      timeUsed: actualTimeUsed\n    };\n\n    this.gameContext.turnHistory.push(turnResult);\n    \n    currentPlayer.onTurnEnd?.({\n      selectedIndices: guess,\n      timeUsed: turnResult.timeUsed,\n      timestamp: Date.now()\n    });\n\n    if (this.onTurnEnd) {\n      this.onTurnEnd(turnResult);\n    }\n\n    if (isWinner) {\n      this.endGame(currentPlayer);\n    } else if (this.config.maxTurns && this.gameContext.currentTurn >= this.config.maxTurns) {\n      this.endGame();\n    } else {\n      this.gameContext.currentTurn++;\n      this.currentPlayerIndex = (this.currentPlayerIndex + 1) % this.players.length;\n      await this.startNextTurn();\n    }\n  }\n\n  private createGameStateForAI(player: IPlayer): GameStateForAI {\n    const playerInfo = player.getInfo();\n    const myHints = this.gameContext.playerHints[playerInfo.id] || [];\n    \n    const previousGuesses = this.gameContext.turnHistory.map(turn => ({\n      playerId: turn.playerId,\n      guess: turn.guess,\n      correctCount: turn.correctCount\n    }));\n\n    // 난이도별 힌트 공개 주기 설정\n    const hintRevealSchedule = this.getHintRevealSchedule(playerInfo);\n    const revealedOtherHints = this.updateAndGetRevealedHints(playerInfo.id, hintRevealSchedule);\n\n    return {\n      keywords: [...this.gameContext.keywords],\n      myHints,\n      previousGuesses,\n      revealedAnswers: [...this.gameContext.revealedAnswers],\n      revealedWrongAnswers: [...this.gameContext.revealedWrongAnswers],\n      answerCount: this.config.answerCount,\n      currentTurn: this.gameContext.currentTurn,\n      maxTurns: this.config.maxTurns,\n      timeLimit: this.config.timeLimit,\n      revealedOtherHints\n    };\n  }\n\n  private getHintRevealSchedule(playerInfo: PlayerInfo): { startTurn: number; initialInterval: number; accelerationFactor: number } {\n    // AI 난이도에 따른 힌트 공개 스케줄을 동적으로 계산\n    if (playerInfo.type === 'built-in-ai') {\n      // 게임 복잡도 계산\n      const complexity = this.calculateGameComplexity();\n      const expectedTurns = this.calculateExpectedTurns(complexity);\n      \n      // 난이도별 AI 성장 구간 비율 정의 (Medium 강화)\n      const difficultyProfiles = {\n        easy: { \n          startRatio: 0.25,      // 25%에서 시작\n          initialInterval: 4,    // 초기 간격\n          accelerationFactor: 1.5 // 가속도 계수\n        },\n        medium: { \n          startRatio: 0.08,      // 8%에서 시작 (더 빠른 시작)\n          initialInterval: 2,    // 초기 간격 (더 짧게)\n          accelerationFactor: 3.0 // 가속도 계수 (더 빠른 성장)\n        },\n        hard: { \n          startRatio: 0.05,      // 5%에서 시작\n          initialInterval: 1,    // 초기 간격\n          accelerationFactor: 8.0 // 가속도 계수\n        }\n      };\n      \n      const profile = difficultyProfiles[playerInfo.aiDifficulty || 'medium'];\n      \n      // 시작 턴 계산\n      const startTurn = Math.max(1, Math.floor(expectedTurns * profile.startRatio));\n      \n      console.log(`[${playerInfo.aiDifficulty} AI] 예상 게임 길이: ${expectedTurns}턴, 시작: ${startTurn}턴, 초기 간격: ${profile.initialInterval}턴`);\n      \n      return { \n        startTurn, \n        initialInterval: profile.initialInterval,\n        accelerationFactor: profile.accelerationFactor\n      };\n    }\n    // 커스텀 AI나 휴먼 플레이어는 힌트 공개 없음\n    return { startTurn: Infinity, initialInterval: Infinity, accelerationFactor: 1 };\n  }\n  \n  private calculateGameComplexity(): number {\n    // 게임 복잡도 = (키워드 풀 크기 - 정답 개수) / 정답 개수\n    return (this.config.keywordPoolSize - this.config.answerCount) / this.config.answerCount;\n  }\n  \n  private calculateExpectedTurns(complexity: number): number {\n    // 복잡도 기반 예상 게임 길이 계산\n    // 기본 공식: 복잡도 * 난이도 계수 + 최소 턴 수\n    const baseTurns = Math.ceil(complexity * 1.5 + 10);\n    \n    // 최대 턴 수가 설정되어 있으면 그것도 고려\n    if (this.config.maxTurns) {\n      return Math.min(baseTurns, this.config.maxTurns * 0.8); // 최대 턴의 80%를 예상 길이로\n    }\n    \n    return baseTurns;\n  }\n\n  private updateAndGetRevealedHints(playerId: number, schedule: { startTurn: number; initialInterval: number; accelerationFactor: number }): { playerId: number; hints: number[] }[] {\n    const currentTurn = this.gameContext.currentTurn;\n    \n    // 아직 힌트 공개 시작 턴이 안 됐으면 빈 배열 반환\n    if (currentTurn < schedule.startTurn) {\n      return [];\n    }\n\n    // 마지막 힌트 공개 턴 가져오기\n    const lastRevealTurn = this.lastHintRevealTurn.get(playerId) || schedule.startTurn - 1;\n    const turnsPassedSinceStart = currentTurn - schedule.startTurn;\n    \n    // 가속도 기반 간격 계산: 간격 = 초기간격 / (경과턴 / 10 + 1)\n    const acceleratedInterval = Math.max(1, Math.floor(\n      schedule.initialInterval / (1 + turnsPassedSinceStart / (10 / schedule.accelerationFactor))\n    ));\n    \n    // 이번 턴에 공개할 힌트 수 계산: 난이도별로 다르게\n    let revealMultiplier = 0.3;\n    if (schedule.accelerationFactor >= 3.0 && schedule.accelerationFactor < 8.0) { // Medium\n      revealMultiplier = 0.5;\n    } else if (schedule.accelerationFactor >= 8.0) { // Hard\n      revealMultiplier = 1.5; // 더 많이 공개\n    }\n    const hintsToRevealThisTurn = Math.max(1, Math.floor(turnsPassedSinceStart * revealMultiplier));\n    \n    // 간격이 지났는지 확인\n    const shouldReveal = currentTurn >= lastRevealTurn + acceleratedInterval;\n    \n    // 이미 공개된 힌트 가져오기\n    let revealedHints = this.revealedHintsPerPlayer.get(playerId) || [];\n    \n    if (shouldReveal) {\n      // 다른 플레이어들의 힌트 중 아직 공개하지 않은 것들\n      const otherPlayers = this.players.filter(p => p.getInfo().id !== playerId);\n      const availableHints: { playerId: number; hints: number[] }[] = [];\n\n      for (const otherPlayer of otherPlayers) {\n        const otherPlayerId = otherPlayer.getInfo().id;\n        const otherHints = this.gameContext.playerHints[otherPlayerId] || [];\n        \n        // 이미 공개된 플레이어인지 확인\n        if (!revealedHints.find(rh => rh.playerId === otherPlayerId)) {\n          availableHints.push({ playerId: otherPlayerId, hints: otherHints });\n        }\n      }\n\n      // 이번 턴에 여러 힌트 공개\n      let revealedThisTurn = 0;\n      while (revealedThisTurn < hintsToRevealThisTurn && availableHints.length > 0) {\n        const randomIndex = Math.floor(Math.random() * availableHints.length);\n        const newHint = availableHints.splice(randomIndex, 1)[0];\n        revealedHints.push(newHint);\n        revealedThisTurn++;\n        \n        // 힌트 공개 로그\n        const playerInfo = this.players.find(p => p.getInfo().id === playerId)?.getInfo();\n        if (playerInfo) {\n          console.log(`[턴 ${currentTurn}] ${playerInfo.nickname}이(가) 플레이어 ${newHint.playerId}의 힌트 ${newHint.hints.length}개를 알게 되었습니다.`);\n        }\n      }\n      \n      // 난이도별 임계점: Medium은 40%, Hard는 즉시 전체 공개\n      let thresholdRatio = 0.5; // Easy\n      if (schedule.accelerationFactor >= 3.0 && schedule.accelerationFactor < 8.0) { // Medium\n        thresholdRatio = 0.4;\n      } else if (schedule.accelerationFactor >= 8.0) { // Hard\n        thresholdRatio = 0.1; // 10%만 되어도 모두 공개\n      }\n      \n      // Hard AI는 게임 후반(마지막 10%)에 모든 힌트 즉시 공개\n      const gameProgress = currentTurn / (this.config.maxTurns || 30);\n      const isHardAI = schedule.accelerationFactor >= 8.0;\n      const isEndgame = gameProgress >= 0.7; // 70% 진행 시점\n      \n      const totalAvailableHints = (this.players.length - 1);\n      if ((revealedHints.length >= totalAvailableHints * thresholdRatio || (isHardAI && isEndgame)) && availableHints.length > 0) {\n        console.log(`[턴 ${currentTurn}] ${isHardAI && isEndgame ? 'Hard AI 후반 모드 -' : '임계점 도달 -'} 나머지 모든 힌트 공개`);\n        for (const hint of availableHints) {\n          revealedHints.push(hint);\n          const playerInfo = this.players.find(p => p.getInfo().id === playerId)?.getInfo();\n          if (playerInfo) {\n            console.log(`[턴 ${currentTurn}] ${playerInfo.nickname}이(가) 플레이어 ${hint.playerId}의 힌트 ${hint.hints.length}개를 추가로 알게 되었습니다.`);\n          }\n        }\n      }\n      \n      // 마지막 공개 턴 업데이트\n      this.lastHintRevealTurn.set(playerId, currentTurn);\n      \n      // 다음 간격 로그\n      const nextInterval = Math.max(1, Math.floor(\n        schedule.initialInterval / (1 + (turnsPassedSinceStart + 1) / (10 / schedule.accelerationFactor))\n      ));\n      console.log(`[${this.players.find(p => p.getInfo().id === playerId)?.getInfo().nickname}] 다음 힌트 공개까지: ${nextInterval}턴`);\n    }\n\n    // 업데이트된 힌트 저장\n    this.revealedHintsPerPlayer.set(playerId, revealedHints);\n\n    return [...revealedHints];\n  }\n\n  revealAnswer(): boolean {\n    const unrevealedAnswers = this.gameContext.answers.filter(\n      ans => !this.gameContext.revealedAnswers.includes(ans)\n    );\n    \n    if (unrevealedAnswers.length === 0) return false;\n    \n    const randomAnswer = unrevealedAnswers[\n      Math.floor(Math.random() * unrevealedAnswers.length)\n    ];\n    \n    this.gameContext.revealedAnswers.push(randomAnswer);\n    return true;\n  }\n\n  revealWrongAnswer(): boolean {\n    const wrongAnswers = Array.from(\n      { length: this.gameContext.keywords.length },\n      (_, i) => i\n    ).filter(idx => \n      !this.gameContext.answers.includes(idx) && \n      !this.gameContext.revealedWrongAnswers.includes(idx)\n    );\n    \n    if (wrongAnswers.length === 0) return false;\n    \n    const randomWrong = wrongAnswers[\n      Math.floor(Math.random() * wrongAnswers.length)\n    ];\n    \n    this.gameContext.revealedWrongAnswers.push(randomWrong);\n    return true;\n  }\n\n  private endGame(winner?: IPlayer): void {\n    this.stopTurnTimer();\n    this.isGameRunning = false;\n    \n    if (this.onGameEnd) {\n      this.onGameEnd(winner);\n    }\n  }\n\n  stopGame(): void {\n    this.stopTurnTimer();\n    this.isGameRunning = false;\n    this.players.forEach(player => player.reset());\n    this.revealedHintsPerPlayer.clear();\n    this.lastHintRevealTurn.clear();\n    \n    // 게임 종료 시 전역 메모리 초기화\n    GlobalGameMemory.getInstance().reset();\n  }\n\n  isRunning(): boolean {\n    return this.isGameRunning;\n  }\n\n  setEventHandlers(handlers: {\n    onTurnStart?: (player: IPlayer) => void;\n    onTurnEnd?: (result: TurnResult) => void;\n    onGameEnd?: (winner?: IPlayer) => void;\n    onTimerTick?: (remainingTime: number) => void;\n    onAIThinking?: (thinking: boolean) => void;\n  }): void {\n    this.onTurnStart = handlers.onTurnStart;\n    this.onTurnEnd = handlers.onTurnEnd;\n    this.onGameEnd = handlers.onGameEnd;\n    this.onTimerTick = handlers.onTimerTick;\n    this.onAIThinking = handlers.onAIThinking;\n  }\n}","import React, { useState, useEffect, useRef } from 'react';\nimport './DeductionGame.css';\nimport { GameManager } from './ai/GameManager';\nimport { PlayerFactory } from './ai/PlayerFactory';\nimport { IPlayer } from './ai/players/BasePlayer';\nimport { HumanPlayer } from './ai/players/HumanPlayer';\nimport { PlayerInfo, PlayerType } from './ai/types/PlayerTypes';\n\ntype GameScreen = 'mode-selection' | 'difficulty-selection' | 'player-setup' | 'game-config' | 'game-preparation' | 'game';\ntype GameMode = 'solo' | 'multi';\n\ninterface GameConfig {\n  keywordPoolSize: number;\n  answerCount: number;\n  hintCount: number;\n  timeLimit: number;\n  maxTurns?: number;\n  difficulty: 'beginner' | 'intermediate' | 'advanced' | 'custom';\n}\n\ninterface GameState {\n  keywords: string[];\n  answers: number[];\n  playerHints: { [playerId: number]: number[] };\n  isReady: boolean;\n  currentTurn: number;\n  turnHistory: TurnResult[];\n  gameStatus: 'playing' | 'finished';\n  winner?: number;\n  revealedAnswers: number[];\n  revealedWrongAnswers: number[];\n  hintsViewed: { [playerId: number]: boolean };\n}\n\ninterface TurnResult {\n  playerId: number;\n  playerName: string;\n  guess: number[];\n  guessKeywords: string[];\n  correctCount: number;\n  turnNumber: number;\n  timeUsed: number;\n}\n\ninterface PlayerConfig {\n  id: number;\n  nickname: string;\n  type: PlayerType;\n  aiCode?: string;\n  aiLanguage?: 'javascript' | 'typescript';\n  aiDifficulty?: 'easy' | 'medium' | 'hard';\n}\n\nconst DeductionGame: React.FC = () => {\n  const [guideSlideIndex, setGuideSlideIndex] = useState(0);\n  const [isGuideModalOpen, setIsGuideModalOpen] = useState(false);\n  const [currentScreen, setCurrentScreen] = useState<GameScreen>('mode-selection');\n  const [gameMode, setGameMode] = useState<GameMode>('solo');\n  const [playerCount, setPlayerCount] = useState(2);\n  const [players, setPlayers] = useState<PlayerConfig[]>([]);\n  const [gameConfig, setGameConfig] = useState<GameConfig>({\n    keywordPoolSize: 50,\n    answerCount: 5,\n    hintCount: 5,\n    timeLimit: 60,\n    maxTurns: 20,\n    difficulty: 'intermediate'\n  });\n  const [gameState, setGameState] = useState<GameState>({\n    keywords: [],\n    answers: [],\n    playerHints: {},\n    isReady: false,\n    currentTurn: 0,\n    turnHistory: [],\n    gameStatus: 'playing',\n    revealedAnswers: [],\n    revealedWrongAnswers: [],\n    hintsViewed: {}\n  });\n  const [preparationStep, setPreparationStep] = useState(0);\n  const [selectedKeywords, setSelectedKeywords] = useState<number[]>([]);\n  const [timeRemaining, setTimeRemaining] = useState(0);\n  const [isMyTurn, setIsMyTurn] = useState(false);\n  const [hintViewingPhase, setHintViewingPhase] = useState(false);\n  const [currentViewingPlayer, setCurrentViewingPlayer] = useState(0);\n  const [timerIntervalId, setTimerIntervalId] = useState<NodeJS.Timeout | null>(null);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [aiTimeoutId, setAiTimeoutId] = useState<NodeJS.Timeout | null>(null);\n  const [soloDifficulty, setSoloDifficulty] = useState<'easy' | 'medium' | 'hard'>('medium');\n  const [isAIThinking, setIsAIThinking] = useState(false);\n  const gameManagerRef = useRef<GameManager | null>(null);\n  const [turnStartTime, setTurnStartTime] = useState<number>(0);\n  const [codeEditorModal, setCodeEditorModal] = useState<{ isOpen: boolean; playerId: number | null }>({ \n    isOpen: false, \n    playerId: null \n  });\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n  const [isMobile, setIsMobile] = useState(false);\n\n  // 모바일 감지\n  useEffect(() => {\n    const checkMobile = () => {\n      setIsMobile(window.innerWidth <= 768);\n    };\n    \n    checkMobile();\n    window.addEventListener('resize', checkMobile);\n    \n    return () => window.removeEventListener('resize', checkMobile);\n  }, []);\n\n  const handleModeSelect = (mode: GameMode) => {\n    setGameMode(mode);\n    if (mode === 'solo') {\n      // 솔로 모드는 난이도 선택 화면으로\n      setCurrentScreen('difficulty-selection');\n    } else {\n      // 멀티 모드는 플레이어 수 선택 후 설정\n      setPlayers([]);\n      setCurrentScreen('player-setup');\n    }\n  };\n\n  const handleDifficultySelect = (difficulty: 'easy' | 'medium' | 'hard') => {\n    setSoloDifficulty(difficulty);\n    setPlayerCount(2);\n    setPlayers([\n      { id: 1, nickname: '', type: 'human', aiLanguage: 'javascript' },\n      { id: 2, nickname: `AI (${difficulty === 'easy' ? '쉬움' : difficulty === 'medium' ? '보통' : '어려움'})`, type: 'built-in-ai', aiDifficulty: difficulty }\n    ]);\n    setCurrentScreen('player-setup');\n  };\n\n  const handlePlayerCountSelect = (count: number) => {\n    setPlayerCount(count);\n    const newPlayers: PlayerConfig[] = [];\n    for (let i = 1; i <= count; i++) {\n      newPlayers.push({\n        id: i,\n        nickname: '',\n        type: 'human',\n        aiLanguage: 'javascript'\n      });\n    }\n    setPlayers(newPlayers);\n  };\n\n  const updatePlayer = (id: number, updates: Partial<PlayerConfig>) => {\n    setPlayers(prev => prev.map(player => \n      player.id === id ? { ...player, ...updates } : player\n    ));\n  };\n\n  const canStartGame = () => {\n    return players.every(player => {\n      if (!player.nickname.trim()) return false;\n      if (player.type === 'custom-ai' && !player.aiCode?.trim()) return false;\n      return true;\n    });\n  };\n\n  const handleStartGame = () => {\n    console.log('Moving to game config with players:', players);\n    setCurrentScreen('game-config');\n  };\n\n  const handleConfigComplete = () => {\n    console.log('Game config complete:', gameConfig);\n    setPreparationStep(0);\n    setCurrentScreen('game-preparation');\n    initializeGame();\n  };\n\n  // 키워드 풀 (실제로는 더 많은 키워드가 필요)\n  const keywordCategories = {\n    animals: ['사자', '호랑이', '코끼리', '기린', '원숭이', '코알라', '판다', '펭귄', '독수리', '상어', '고래', '돌고래', '토끼', '고양이', '강아지', '말', '소', '돼지', '양', '염소'],\n    foods: ['피자', '햄버거', '스파게티', '초밥', '김치찌개', '불고기', '치킨', '라면', '떡볶이', '김밥', '샐러드', '스테이크', '카레', '우동', '냉면', '비빔밥', '갈비', '삼겹살', '회', '족발'],\n    objects: ['컴퓨터', '스마트폰', '자동차', '비행기', '기차', '자전거', '책', '연필', '가방', '시계', '안경', '모자', '신발', '옷', '침대', '의자', '책상', '냉장고', '세탁기', '텔레비전'],\n    places: ['학교', '병원', '은행', '카페', '식당', '공원', '해변', '산', '도서관', '박물관', '영화관', '쇼핑몰', '시장', '교회', '지하철역', '공항', '호텔', '집', '회사', '체육관'],\n    actions: ['걷기', '뛰기', '수영', '춤추기', '노래하기', '요리하기', '공부하기', '운전하기', '그림그리기', '글쓰기', '읽기', '잠자기', '먹기', '마시기', '웃기', '울기', '생각하기', '말하기', '듣기', '보기']\n  };\n\n  const generateKeywords = (size: number): string[] => {\n    const allKeywords = Object.values(keywordCategories).flat();\n    const shuffled = [...allKeywords].sort(() => Math.random() - 0.5);\n    return shuffled.slice(0, size);\n  };\n\n  const initializeGame = async () => {\n    // 1단계: 키워드 생성\n    setPreparationStep(1);\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    const keywords = generateKeywords(gameConfig.keywordPoolSize);\n    \n    // 2단계: 정답 선택\n    setPreparationStep(2);\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    const answerIndices: number[] = [];\n    const shuffledIndices = Array.from({length: keywords.length}, (_, i) => i).sort(() => Math.random() - 0.5);\n    for (let i = 0; i < gameConfig.answerCount; i++) {\n      answerIndices.push(shuffledIndices[i]);\n    }\n    \n    // 3단계: 힌트 배포\n    setPreparationStep(3);\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    const playerHints: { [playerId: number]: number[] } = {};\n    const nonAnswerIndices = shuffledIndices.filter(i => !answerIndices.includes(i));\n    \n    players.forEach(player => {\n      const hints: number[] = [];\n      const availableHints = [...nonAnswerIndices].sort(() => Math.random() - 0.5);\n      for (let i = 0; i < gameConfig.hintCount && i < availableHints.length; i++) {\n        hints.push(availableHints[i]);\n      }\n      playerHints[player.id] = hints;\n    });\n    \n    // 4단계: 준비 완료\n    setPreparationStep(4);\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    setGameState({\n      keywords,\n      answers: answerIndices,\n      playerHints,\n      isReady: true,\n      currentTurn: 0,  // GameManager가 관리하므로 0으로 시작\n      turnHistory: [],\n      gameStatus: 'playing',\n      revealedAnswers: [],\n      revealedWrongAnswers: [],\n      hintsViewed: {}\n    });\n    \n    setPreparationStep(5); // 완료 상태\n  };\n\n\n  const startActualGame = () => {\n    // GameManager 초기화\n    const manager = new GameManager({\n      keywordPoolSize: gameConfig.keywordPoolSize,\n      answerCount: gameConfig.answerCount,\n      hintCount: gameConfig.hintCount,\n      timeLimit: gameConfig.timeLimit,\n      maxTurns: gameConfig.maxTurns\n    });\n\n    // 플레이어 생성\n    const gamePlayers: IPlayer[] = players.map(config => {\n      const playerInfo: PlayerInfo = {\n        id: config.id,\n        nickname: config.nickname,\n        type: config.type,\n        aiDifficulty: config.aiDifficulty,\n        customCode: config.aiCode,\n        customLanguage: config.aiLanguage\n      };\n      return PlayerFactory.createPlayer(playerInfo);\n    });\n\n    manager.setPlayers(gamePlayers);\n\n    // 이벤트 핸들러 설정\n    manager.setEventHandlers({\n      onTurnStart: (player) => {\n        const playerInfo = player.getInfo();\n        setIsMyTurn(playerInfo.type === 'human');\n        // 턴 시작 시간 기록\n        setTurnStartTime(Date.now());\n        // GameManager의 currentTurn과 동기화\n        const context = manager.getGameContext();\n        setGameState(prev => ({\n          ...prev,\n          currentTurn: context.currentTurn\n        }));\n      },\n      onTurnEnd: (result) => {\n        setIsAIThinking(false);\n        setGameState(prev => ({\n          ...prev,\n          turnHistory: [...prev.turnHistory, result]\n        }));\n      },\n      onGameEnd: (winner) => {\n        if (winner) {\n          const winnerInfo = winner.getInfo();\n          setGameState(prev => ({\n            ...prev,\n            gameStatus: 'finished',\n            winner: winnerInfo.id\n          }));\n        } else {\n          setGameState(prev => ({\n            ...prev,\n            gameStatus: 'finished'\n          }));\n        }\n      },\n      onTimerTick: (remainingTime) => {\n        setTimeRemaining(remainingTime);\n      },\n      onAIThinking: (thinking) => {\n        setIsAIThinking(thinking);\n      }\n    });\n\n    gameManagerRef.current = manager;\n\n    setHintViewingPhase(true);\n    setCurrentViewingPlayer(1);\n    setCurrentScreen('game');\n  };\n\n  const startTimer = () => {\n    // GameManager를 사용하는 경우 타이머를 직접 관리하지 않음\n    if (gameManagerRef.current) {\n      return;\n    }\n    \n    // 기존 타이머가 있다면 먼저 정리\n    clearTimer();\n    \n    // 턴 시작 시간 기록\n    setTurnStartTime(Date.now());\n    setTimeRemaining(gameConfig.timeLimit);\n    \n    const intervalId = setInterval(() => {\n      setTimeRemaining(prev => {\n        if (prev <= 1) {\n          // 타이머를 먼저 정리하고 handleTimeUp 호출\n          clearInterval(intervalId);\n          setTimerIntervalId(null);\n          // setTimeout으로 다음 프레임에서 실행하여 상태 업데이트 충돌 방지\n          setTimeout(() => {\n            handleTimeUp();\n          }, 0);\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n    \n    setTimerIntervalId(intervalId);\n  };\n\n  const clearTimer = () => {\n    if (timerIntervalId) {\n      clearInterval(timerIntervalId);\n      setTimerIntervalId(null);\n    }\n  };\n\n  const handleTimeUp = () => {\n    // 시간 초과시 랜덤하게 키워드 선택하여 자동 제출\n    const availableKeywords = gameState.keywords\n      .map((_, index) => index)\n      .filter(index => !gameState.revealedWrongAnswers.includes(index));\n    \n    const shuffled = [...availableKeywords].sort(() => Math.random() - 0.5);\n    const autoSelection = shuffled.slice(0, gameConfig.answerCount);\n    \n    setSelectedKeywords(autoSelection);\n    \n    // 잠시 후 자동 제출\n    setTimeout(() => {\n      submitGuessWithSelection(autoSelection);\n    }, 500);\n  };\n\n  const exitGame = () => {\n    clearTimer();\n    // AI 타임아웃도 정리\n    if (aiTimeoutId) {\n      clearTimeout(aiTimeoutId);\n      setAiTimeoutId(null);\n    }\n    // GameManager 정리\n    if (gameManagerRef.current) {\n      gameManagerRef.current.stopGame();\n      gameManagerRef.current = null;\n    }\n    setCurrentScreen('mode-selection');\n    // 게임 상태 초기화\n    setGameState({\n      keywords: [],\n      answers: [],\n      playerHints: {},\n      isReady: false,\n      currentTurn: 0,\n      turnHistory: [],\n      gameStatus: 'playing',\n      revealedAnswers: [],\n      revealedWrongAnswers: [],\n      hintsViewed: {}\n    });\n    setSelectedKeywords([]);\n    setTimeRemaining(0);\n    setIsMyTurn(false);\n    setIsAIThinking(false);\n    setHintViewingPhase(false);\n    setCurrentViewingPlayer(0);\n    setIsSubmitting(false);\n  };\n\n\n  const revealAnswerHint = () => {\n    if (gameManagerRef.current) {\n      const success = gameManagerRef.current.revealAnswer();\n      if (success) {\n        const context = gameManagerRef.current.getGameContext();\n        setGameState(prev => ({\n          ...prev,\n          revealedAnswers: context.revealedAnswers\n        }));\n      }\n    } else {\n      const unrevealedAnswers = gameState.answers.filter(ans => !gameState.revealedAnswers.includes(ans));\n      if (unrevealedAnswers.length > 0) {\n        const randomAnswer = unrevealedAnswers[Math.floor(Math.random() * unrevealedAnswers.length)];\n        setGameState(prev => ({\n          ...prev,\n          revealedAnswers: [...prev.revealedAnswers, randomAnswer]\n        }));\n      }\n    }\n  };\n\n  const revealWrongHint = () => {\n    if (gameManagerRef.current) {\n      const success = gameManagerRef.current.revealWrongAnswer();\n      if (success) {\n        const context = gameManagerRef.current.getGameContext();\n        setGameState(prev => ({\n          ...prev,\n          revealedWrongAnswers: context.revealedWrongAnswers\n        }));\n      }\n    } else {\n      const wrongAnswers = gameState.keywords\n        .map((_, index) => index)\n        .filter(index => !gameState.answers.includes(index) && !gameState.revealedWrongAnswers.includes(index));\n      \n      if (wrongAnswers.length > 0) {\n        const randomWrong = wrongAnswers[Math.floor(Math.random() * wrongAnswers.length)];\n        setGameState(prev => ({\n          ...prev,\n          revealedWrongAnswers: [...prev.revealedWrongAnswers, randomWrong]\n        }));\n      }\n    }\n  };\n\n  const toggleKeywordSelection = (keywordIndex: number) => {\n    setSelectedKeywords(prev => {\n      if (prev.includes(keywordIndex)) {\n        return prev.filter(index => index !== keywordIndex);\n      } else if (prev.length < gameConfig.answerCount) {\n        return [...prev, keywordIndex];\n      }\n      return prev;\n    });\n  };\n\n  const submitGuess = async () => {\n    if (selectedKeywords.length !== gameConfig.answerCount || isSubmitting) return;\n    \n    if (gameManagerRef.current) {\n      setIsSubmitting(true);\n      try {\n        await gameManagerRef.current.submitHumanGuess(selectedKeywords);\n        setSelectedKeywords([]);\n      } catch (error) {\n        console.error('Failed to submit guess:', error);\n      } finally {\n        setIsSubmitting(false);\n      }\n    } else {\n      submitGuessWithSelection(selectedKeywords);\n    }\n  };\n\n  const submitGuessWithSelection = (selection: number[]) => {\n    // GameManager를 사용하는 경우 이 함수를 사용하지 않음\n    if (gameManagerRef.current) return;\n    \n    if (isSubmitting) return;\n    \n    setIsSubmitting(true);\n    \n    // 타이머 정리 (새로운 타이머 시작 전에)\n    clearTimer();\n\n    const correctCount = selection.filter(index => \n      gameState.answers.includes(index)\n    ).length;\n\n    const isWinner = correctCount === gameConfig.answerCount && \n                     selection.every(index => gameState.answers.includes(index));\n\n    const currentPlayerId = ((gameState.currentTurn - 1) % players.length) + 1;\n    const currentPlayer = players.find(p => p.id === currentPlayerId);\n\n    // 실제 사용 시간 계산\n    const actualTimeUsed = turnStartTime ? Math.round((Date.now() - turnStartTime) / 1000) : gameConfig.timeLimit - timeRemaining;\n    \n    const turnResult: TurnResult = {\n      playerId: currentPlayerId,\n      playerName: currentPlayer?.nickname || `플레이어 ${currentPlayerId}`,\n      guess: [...selection],\n      guessKeywords: selection.map(index => gameState.keywords[index]),\n      correctCount,\n      turnNumber: gameState.currentTurn,\n      timeUsed: actualTimeUsed\n    };\n\n    // 최대 턴 수 확인\n    const isMaxTurnsReached = gameConfig.maxTurns && gameState.currentTurn >= gameConfig.maxTurns;\n    \n    setGameState(prev => ({\n      ...prev,\n      turnHistory: [...prev.turnHistory, turnResult],\n      currentTurn: prev.currentTurn + 1,\n      gameStatus: isWinner ? 'finished' : (isMaxTurnsReached ? 'finished' : 'playing'),\n      winner: isWinner ? currentPlayerId : undefined\n    }));\n\n    setSelectedKeywords([]);\n    \n    if (!isWinner && !isMaxTurnsReached) {\n      // 다음 턴을 위해 타이머 재시작\n      setTimeout(() => {\n        startTimer();\n      }, 100);\n    }\n    \n    // 제출 상태 리셋\n    setTimeout(() => {\n      setIsSubmitting(false);\n    }, 500);\n  };\n\n  const getCurrentPlayer = () => {\n    if (gameManagerRef.current) {\n      const currentPlayer = gameManagerRef.current.getCurrentPlayer();\n      if (currentPlayer) {\n        const playerInfo = currentPlayer.getInfo();\n        return players.find(p => p.id === playerInfo.id);\n      }\n    }\n    const currentPlayerId = ((gameState.currentTurn - 1) % players.length) + 1;\n    return players.find(p => p.id === currentPlayerId);\n  };\n\n  const isGameOver = () => {\n    return gameState.gameStatus === 'finished' || \n           (gameConfig.maxTurns && gameState.currentTurn > gameConfig.maxTurns);\n  };\n\n  const difficultyPresets = {\n    beginner: { keywordPoolSize: 30, answerCount: 3, hintCount: 5, timeLimit: 90, maxTurns: 15 },\n    intermediate: { keywordPoolSize: 50, answerCount: 5, hintCount: 5, timeLimit: 60, maxTurns: 20 },\n    advanced: { keywordPoolSize: 80, answerCount: 7, hintCount: 4, timeLimit: 45, maxTurns: 25 }\n  };\n\n  const applyPreset = (difficulty: 'beginner' | 'intermediate' | 'advanced') => {\n    const preset = difficultyPresets[difficulty];\n    setGameConfig({ ...preset, difficulty });\n  };\n\n  const updateGameConfig = (updates: Partial<GameConfig>) => {\n    setGameConfig(prev => ({ ...prev, ...updates, difficulty: 'custom' }));\n  };\n\n  // 컴포넌트 언마운트 시 타이머 정리\n  useEffect(() => {\n    return () => {\n      clearTimer();\n      if (aiTimeoutId) {\n        clearTimeout(aiTimeoutId);\n      }\n    };\n  }, []);\n\n  const renderCodeEditorModal = () => {\n    if (!codeEditorModal.isOpen || !codeEditorModal.playerId) return null;\n    \n    const player = players.find(p => p.id === codeEditorModal.playerId);\n    if (!player) return null;\n\n    return (\n      <div className=\"modal-overlay\" onClick={() => setCodeEditorModal({ isOpen: false, playerId: null })}>\n        <div className=\"modal-content code-editor-modal\" onClick={(e) => e.stopPropagation()}>\n          <div className=\"modal-header\">\n            <h3>{player.nickname} AI 코드 에디터</h3>\n            <button \n              className=\"modal-close\"\n              onClick={() => setCodeEditorModal({ isOpen: false, playerId: null })}\n            >\n              ×\n            </button>\n          </div>\n          \n          <div className=\"code-editor-container\">\n            <div className=\"editor-toolbar\">\n              <div className=\"editor-left\">\n                <span className=\"editor-info\">코드 작성</span>\n                <div className=\"language-selector\">\n                  <button\n                    className={`lang-btn ${player.aiLanguage === 'javascript' ? 'active' : ''}`}\n                    onClick={() => updatePlayer(player.id, { aiLanguage: 'javascript' })}\n                  >\n                    JavaScript\n                  </button>\n                  <button\n                    className={`lang-btn ${player.aiLanguage === 'typescript' ? 'active' : ''}`}\n                    onClick={() => updatePlayer(player.id, { aiLanguage: 'typescript' })}\n                  >\n                    TypeScript\n                  </button>\n                </div>\n              </div>\n              <div className=\"editor-actions\">\n                <button \n                  className=\"btn btn-small\"\n                  onClick={() => updatePlayer(player.id, { aiCode: '' })}\n                >\n                  초기화\n                </button>\n                <button \n                  className=\"btn btn-small\"\n                  onClick={() => {\n                    const exampleCode = player.aiLanguage === 'typescript' \n                      ? `// AI 전략 함수 (TypeScript)\ninterface GameState {\n  keywords: string[];\n  myHints: number[];\n  previousGuesses: number[][];\n  revealedAnswers: number[];\n  revealedWrongs: number[];\n  answerCount: number;\n}\n\nfunction makeGuess(gameState: GameState): number[] {\n  const { keywords, myHints, previousGuesses, revealedAnswers, revealedWrongs, answerCount } = gameState;\n  \n  // 가능한 키워드 인덱스 목록\n  const availableIndices: number[] = keywords\n    .map((_, index) => index)\n    .filter(idx => !revealedWrongs.includes(idx));\n  \n  // 이미 공개된 정답 우선 선택\n  const selectedIndices: number[] = [...revealedAnswers];\n  \n  // 나머지는 랜덤 선택\n  while (selectedIndices.length < answerCount) {\n    const remaining = availableIndices.filter(idx => !selectedIndices.includes(idx));\n    if (remaining.length === 0) break;\n    \n    const randomIdx = remaining[Math.floor(Math.random() * remaining.length)];\n    selectedIndices.push(randomIdx);\n  }\n  \n  return selectedIndices;\n}`\n                      : `// AI 전략 함수 (JavaScript)\nfunction makeGuess(gameState) {\n  const { keywords, myHints, previousGuesses, revealedAnswers, revealedWrongs, answerCount } = gameState;\n  \n  // 가능한 키워드 인덱스 목록\n  const availableIndices = keywords\n    .map((_, index) => index)\n    .filter(idx => !revealedWrongs.includes(idx));\n  \n  // 이미 공개된 정답 우선 선택\n  const selectedIndices = [...revealedAnswers];\n  \n  // 나머지는 랜덤 선택\n  while (selectedIndices.length < answerCount) {\n    const remaining = availableIndices.filter(idx => !selectedIndices.includes(idx));\n    if (remaining.length === 0) break;\n    \n    const randomIdx = remaining[Math.floor(Math.random() * remaining.length)];\n    selectedIndices.push(randomIdx);\n  }\n  \n  return selectedIndices;\n}`;\n                    updatePlayer(player.id, { aiCode: exampleCode });\n                  }}\n                >\n                  예제 코드\n                </button>\n              </div>\n            </div>\n            \n            <div className=\"editor-wrapper\">\n              <div className=\"line-numbers\" onScroll={(e) => {\n                const textarea = e.currentTarget.nextElementSibling as HTMLTextAreaElement;\n                if (textarea) textarea.scrollTop = e.currentTarget.scrollTop;\n              }}>\n                {((player.aiCode || '') + '\\n').split('\\n').map((_, index) => (\n                  <div key={index} className=\"line-number\">{index + 1}</div>\n                ))}\n              </div>\n              <textarea\n                className=\"code-editor\"\n                value={player.aiCode || ''}\n                onChange={(e) => updatePlayer(player.id, { aiCode: e.target.value })}\n                onScroll={(e) => {\n                  const lineNumbers = e.currentTarget.previousElementSibling as HTMLDivElement;\n                  if (lineNumbers) lineNumbers.scrollTop = e.currentTarget.scrollTop;\n                }}\n                placeholder={player.aiLanguage === 'typescript' \n                  ? \"// TypeScript AI 전략 코드를 작성하세요\\n// 타입 정의와 함께 작성해주세요\"\n                  : \"// JavaScript AI 전략 코드를 작성하세요\\n// function makeGuess(gameState) { ... }\"\n                }\n                spellCheck={false}\n              />\n            </div>\n            \n            <div className=\"editor-footer\">\n              <div className=\"code-stats\">\n                <span>줄: {(player.aiCode || '').split('\\n').length}</span>\n                <span>문자: {(player.aiCode || '').length}</span>\n              </div>\n              <button \n                className=\"btn-large btn-primary\"\n                onClick={() => setCodeEditorModal({ isOpen: false, playerId: null })}\n\n\n              >\n                저장\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const renderModeSelection = () => (\n    <div className=\"game-screen mode-selection\">\n      <div className=\"guide-link-container\">\n        <button onClick={() => setIsGuideModalOpen(true)} className=\"guide-link\">?<span>게임 방법</span></button>\n      </div>\n      <h2 style={{ marginTop: '60px' }}>게임 모드를 선택하세요</h2>\n      <div className=\"mode-cards\">\n        <div className=\"mode-card\" onClick={() => handleModeSelect('solo')}>\n          <h3>개인전</h3>\n          <p>AI와 1:1 대결하는 모드입니다.<br/>난이도를 선택할 수 있어요.</p>\n        </div>\n        <div className=\"mode-card\" onClick={() => handleModeSelect('multi')}>\n          <h3>멀티플레이</h3>\n          <p>2~6명이 함께 플레이하는 모드입니다.<br/>친구들과 함께 즐겨보세요.</p>\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderDifficultySelection = () => (\n    <div className=\"game-screen difficulty-selection\">\n      <div className=\"back-button-container\">\n        <button \n          className=\"btn-large btn-secondary\" \n          onClick={() => setCurrentScreen('mode-selection')}\n        >\n          ← 뒤로가기\n        </button>\n      </div>\n      \n      <h2>AI 난이도를 선택하세요</h2>\n      <div className=\"difficulty-cards\">\n        <div className=\"difficulty-card\" onClick={() => handleDifficultySelect('easy')}>\n          <h3>🌱 쉬움</h3>\n          <p>AI가 무작위로 키워드를 선택합니다.<br/>편안하게 게임을 즐기세요.</p>\n        </div>\n        <div className=\"difficulty-card\" onClick={() => handleDifficultySelect('medium')}>\n          <h3>🌿 보통</h3>\n          <p>AI가 공개된 정답을 활용합니다.<br/>적당한 도전을 원한다면 선택하세요.</p>\n        </div>\n        <div className=\"difficulty-card\" onClick={() => handleDifficultySelect('hard')}>\n          <h3>🌳 어려움</h3>\n          <p>AI가 이전 추측을 분석합니다.<br/>진정한 실력을 시험해보세요.</p>\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderPlayerSetup = () => (\n    <div className=\"game-screen\">\n      <div className=\"back-button-container\">\n        <button \n          className=\"btn-large btn-secondary\" \n          onClick={() => setCurrentScreen(gameMode === 'solo' ? 'difficulty-selection' : 'mode-selection')}\n        >\n          ← 뒤로가기\n        </button>\n      </div>\n\n      {gameMode === 'multi' && players.length === 0 && (\n        <div className=\"form-section\" style={{ marginTop: '60px' }}>\n          <h2 style={{ textAlign: 'center' }}>플레이어 수를 선택하세요</h2>\n          <div className=\"btn-group\" style={{ justifyContent: 'center', marginTop: '40px' }}>\n            {[2, 3, 4, 5, 6].map(num => (\n              <button\n                key={num}\n                className=\"btn-large btn-secondary\"\n                onClick={() => handlePlayerCountSelect(num)}\n              >\n                {num}명\n              </button>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {players.length > 0 && (\n        <>\n          <h2 style={{ textAlign: 'center', marginTop: '60px' }}>{gameMode === 'solo' ? '플레이어 설정' : `${playerCount}명 플레이어 설정`}</h2>\n          <div className=\"players-grid\">\n            {players.filter(player => gameMode === 'solo' ? player.id === 1 : true).map((player) => (\n              <div key={player.id} className=\"player-setup\">\n                <h4>{gameMode === 'solo' ? '플레이어' : `플레이어 ${player.id}`}</h4>\n                \n                <div className=\"form-section\">\n                  <input\n                    type=\"text\"\n                    className=\"input-field\"\n                    placeholder=\"닉네임을 입력하세요\"\n                    value={player.nickname}\n                    onChange={(e) => updatePlayer(player.id, { nickname: e.target.value })}\n                    maxLength={20}\n                  />\n                </div>\n\n                {(gameMode === 'multi' || (gameMode === 'solo' && player.id === 1)) && (\n                  <div className=\"form-section\">\n                    <div className=\"radio-group\">\n                      <div className=\"radio-option\">\n                        <input\n                          type=\"radio\"\n                          id={`human-${player.id}`}\n                          name={`playerType-${player.id}`}\n                          value=\"human\"\n                          checked={player.type === 'human'}\n                          onChange={() => updatePlayer(player.id, { type: 'human', aiCode: '' })}\n                        />\n                        <label htmlFor={`human-${player.id}`}>인간</label>\n                      </div>\n                      <div className=\"radio-option\">\n                        <input\n                          type=\"radio\"\n                          id={`ai-${player.id}`}\n                          name={`playerType-${player.id}`}\n                          value=\"custom-ai\"\n                          checked={player.type === 'custom-ai'}\n                          onChange={() => {\n                            updatePlayer(player.id, { type: 'custom-ai' });\n                            setCodeEditorModal({ isOpen: true, playerId: player.id });\n                          }}\n                        />\n                        <label htmlFor={`ai-${player.id}`}>{gameMode === 'solo' ? '커스텀 AI' : 'AI'}</label>\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                {player.type === 'custom-ai' && (\n                  <div className=\"form-section\">\n                    <button\n                      className=\"btn-large btn-ai-code\"\n                      onClick={() => setCodeEditorModal({ isOpen: true, playerId: player.id })}\n                      style={{ width: '100%' }}\n                    >\n                      <span className=\"btn-ai-icon\">&lt;/&gt;</span>\n                      <span>{player.aiCode ? 'AI 코드 수정' : 'AI 코드 작성'}</span>\n                    </button>\n                    {player.aiCode && (\n                      <div className=\"code-preview\">\n                        <small>코드가 작성되었습니다 ({player.aiCode.split('\\n').length}줄)</small>\n                      </div>\n                    )}\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n\n          <div className=\"setup-actions\">\n            <button\n              className=\"btn-large btn-primary\"\n              onClick={handleStartGame}\n              disabled={!canStartGame()}\n            >\n              게임 시작\n            </button>\n          </div>\n        </>\n      )}\n    </div>\n  );\n\n  const renderGameConfig = () => (\n    <div className=\"game-screen\">\n      <div className=\"back-button-container\">\n        <button \n          className=\"btn-large btn-secondary\" \n          onClick={() => setCurrentScreen('player-setup')}\n        >\n          ← 뒤로가기\n        </button>\n      </div>\n\n      <h2 style={{ textAlign: 'center' }}>게임 설정</h2>\n      \n      {/* 난이도 프리셋 */}\n      <div className=\"form-section\">\n        <h3 style={{ textAlign: 'center' }}>난이도 프리셋</h3>\n        <div className=\"btn-group\" style={{ justifyContent: 'center', flexWrap: 'wrap' }}>\n          <button\n            className={`btn-large ${gameConfig.difficulty === 'beginner' ? 'btn-primary' : 'btn-secondary'}`}\n            onClick={() => applyPreset('beginner')}\n          >\n            초급\n          </button>\n          <button\n            className={`btn-large ${gameConfig.difficulty === 'intermediate' ? 'btn-primary' : 'btn-secondary'}`}\n            onClick={() => applyPreset('intermediate')}\n          >\n            중급\n          </button>\n          <button\n            className={`btn-large ${gameConfig.difficulty === 'advanced' ? 'btn-primary' : 'btn-secondary'}`}\n            onClick={() => applyPreset('advanced')}\n          >\n            고급\n          </button>\n        </div>\n      </div>\n\n      {/* 상세 설정 */}\n      <div className=\"config-grid\">\n        <div className=\"config-item\">\n          <h4>키워드 풀 크기</h4>\n          <p>전체 키워드 개수</p>\n          <div className=\"number-input-group\">\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ keywordPoolSize: Math.max(20, gameConfig.keywordPoolSize - 10) })}\n            >\n              -\n            </button>\n            <span className=\"number-display\">{gameConfig.keywordPoolSize}개</span>\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ keywordPoolSize: Math.min(100, gameConfig.keywordPoolSize + 10) })}\n            >\n              +\n            </button>\n          </div>\n        </div>\n\n        <div className=\"config-item\">\n          <h4>정답 개수</h4>\n          <p>찾아야 할 정답 수</p>\n          <div className=\"number-input-group\">\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ answerCount: Math.max(2, gameConfig.answerCount - 1) })}\n            >\n              -\n            </button>\n            <span className=\"number-display\">{gameConfig.answerCount}개</span>\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ answerCount: Math.min(15, gameConfig.answerCount + 1) })}\n            >\n              +\n            </button>\n          </div>\n        </div>\n\n        <div className=\"config-item\">\n          <h4>힌트 개수</h4>\n          <p>각 플레이어별 오답 힌트</p>\n          <div className=\"number-input-group\">\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ hintCount: Math.max(2, gameConfig.hintCount - 1) })}\n            >\n              -\n            </button>\n            <span className=\"number-display\">{gameConfig.hintCount}개</span>\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ hintCount: Math.min(20, gameConfig.hintCount + 1) })}\n            >\n              +\n            </button>\n          </div>\n        </div>\n\n        <div className=\"config-item\">\n          <h4>턴 제한시간</h4>\n          <p>각 턴당 시간</p>\n          <div className=\"number-input-group\">\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ timeLimit: Math.max(15, gameConfig.timeLimit - 15) })}\n            >\n              -\n            </button>\n            <span className=\"number-display\">{gameConfig.timeLimit}초</span>\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ timeLimit: Math.min(180, gameConfig.timeLimit + 15) })}\n            >\n              +\n            </button>\n          </div>\n        </div>\n\n        <div className=\"config-item\">\n          <h4>최대 턴 수</h4>\n          <p>게임 종료 조건</p>\n          <div className=\"number-input-group\">\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ maxTurns: gameConfig.maxTurns ? Math.max(5, gameConfig.maxTurns - 5) : 15 })}\n            >\n              -\n            </button>\n            <span className=\"number-display\">{gameConfig.maxTurns ? `${gameConfig.maxTurns}턴` : '무제한'}</span>\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ maxTurns: gameConfig.maxTurns ? Math.min(50, gameConfig.maxTurns + 5) : 20 })}\n            >\n              +\n            </button>\n          </div>\n          <button \n            className=\"btn btn-small\" \n            onClick={() => updateGameConfig({ maxTurns: gameConfig.maxTurns ? undefined : 20 })}\n            style={{ marginTop: '10px' }}\n          >\n            {gameConfig.maxTurns ? '무제한으로 변경' : '제한 설정'}\n          </button>\n        </div>\n      </div>\n\n      {/* 현재 난이도 표시 */}\n      <div className=\"difficulty-indicator\">\n        <span>현재 난이도: <strong>{\n          gameConfig.difficulty === 'beginner' ? '초급' :\n          gameConfig.difficulty === 'intermediate' ? '중급' :\n          gameConfig.difficulty === 'advanced' ? '고급' : '커스텀'\n        }</strong></span>\n      </div>\n\n      <div className=\"setup-actions\">\n        <button\n          className=\"btn-large btn-primary\"\n          onClick={handleConfigComplete}\n        >\n          설정 완료\n        </button>\n      </div>\n    </div>\n  );\n\n  const renderGamePreparation = () => {\n    const preparationSteps = [\n      { title: '게임 초기화', description: '게임 환경을 설정하고 있습니다.' },\n      { title: '키워드 생성', description: `${gameConfig.keywordPoolSize}개의 키워드를 생성하고 있습니다.` },\n      { title: '정답 선택', description: `${gameConfig.answerCount}개의 정답을 무작위로 선택하고 있습니다.` },\n      { title: '힌트 배포', description: '각 플레이어에게 오답 힌트를 배포하고 있습니다.' },\n      { title: '최종 확인', description: '게임 준비를 완료하고 있습니다.' }\n    ];\n\n    return (\n      <div className=\"game-screen\">\n        {preparationStep < 5 ? (\n          <>\n            <h2>게임 준비 중...</h2>\n            <div className=\"preparation-progress\">\n              <div className=\"progress-steps\">\n                {preparationSteps.map((step, index) => (\n                  <div \n                    key={index} \n                    className={`progress-step ${index < preparationStep ? 'completed' : index === preparationStep ? 'active' : 'pending'}`}\n                  >\n                    <div className=\"step-circle\">\n                      {index < preparationStep ? '✓' : index + 1}\n                    </div>\n                    <div className=\"step-content\">\n                      <h4>{step.title}</h4>\n                      <p>{step.description}</p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n              \n              <div className=\"progress-bar-container\">\n                <div \n                  className=\"progress-bar-fill\" \n                  style={{ width: `${(preparationStep / 5) * 100}%` }}\n                />\n              </div>\n            </div>\n          </>\n        ) : (\n          <>\n            <h2>게임 준비 완료!</h2>\n            <div className=\"game-summary\">\n              <div className=\"summary-grid\">\n                <div className=\"summary-item\">\n                  <h4>참가자</h4>\n                  <div className=\"player-chips\">\n                    {players.map(player => (\n                      <span key={player.id} className=\"player-chip\">\n                        {player.nickname} ({player.type === 'built-in-ai' ? 'AI' : player.type === 'custom-ai' ? 'Custom AI' : '인간'})\n                      </span>\n                    ))}\n                  </div>\n                </div>\n                \n                <div className=\"summary-item\">\n                  <h4>게임 정보</h4>\n                  <div className=\"game-info-grid\">\n                    <div>키워드 풀: <strong>{gameConfig.keywordPoolSize}개</strong></div>\n                    <div>정답 개수: <strong>{gameConfig.answerCount}개</strong></div>\n                    <div>힌트 개수: <strong>{gameConfig.hintCount}개</strong></div>\n                    <div>턴 시간: <strong>{gameConfig.timeLimit}초</strong></div>\n                    <div>최대 턴: <strong>{gameConfig.maxTurns || '무제한'}</strong></div>\n                  </div>\n                </div>\n\n              </div>\n              \n              <div className=\"game-start-section\">\n                <div className=\"countdown-info\">\n                  <h3>모든 준비가 완료되었습니다!</h3>\n                  <p>게임을 시작하시겠습니까?</p>\n                </div>\n                \n                <div className=\"setup-actions\" style={{ justifyContent: 'flex-start' }}>\n                  <button \n                    className=\"btn-large btn-secondary\" \n                    onClick={() => setCurrentScreen('game-config')}\n                  >\n                    ← 설정 변경\n                  </button>\n                  <button \n                    className=\"btn-large btn-primary\" \n                    onClick={startActualGame}\n                  >\n                    게임 시작! 🎮\n                  </button>\n                </div>\n              </div>\n            </div>\n          </>\n        )}\n      </div>\n    );\n  };\n\n  const renderGameScreen = () => {\n    const currentPlayer = getCurrentPlayer();\n    const isGameFinished = isGameOver();\n\n    // 힌트 보기 단계\n    if (hintViewingPhase) {\n      const viewingPlayer = players.find(p => p.id === currentViewingPlayer);\n      const hasViewedHints = gameState.hintsViewed[currentViewingPlayer];\n      \n      // AI 플레이어는 건너뛰기\n      if (viewingPlayer?.type === 'built-in-ai') {\n        const nextPlayer = currentViewingPlayer + 1;\n        if (nextPlayer <= players.length) {\n          setTimeout(() => setCurrentViewingPlayer(nextPlayer), 0);\n        } else {\n          setHintViewingPhase(false);\n          if (gameManagerRef.current) {\n            gameManagerRef.current.startGame(\n              gameState.keywords,\n              gameState.answers,\n              gameState.playerHints\n            );\n          } else {\n            // GameManager 없이 게임 시작 시 타이머 시작\n            setTimeout(() => {\n              setGameState(prev => ({\n                ...prev,\n                currentTurn: 1\n              }));\n              startTimer();\n            }, 100);\n          }\n        }\n        return null;\n      }\n\n      return (\n        <div className=\"game-screen\">\n          <div className=\"hint-viewing-phase\">\n            <div className=\"exit-button-container\">\n              <button \n                className=\"btn btn-exit-small\"\n                onClick={exitGame}\n              >\n                게임 종료\n              </button>\n            </div>\n            <h2>힌트 확인 단계</h2>\n            <div className=\"viewing-instructions\">\n              <h3>{viewingPlayer?.nickname}님의 차례입니다</h3>\n              <p>다른 플레이어는 화면을 보지 마세요!</p>\n              \n              {!hasViewedHints ? (\n                <div className=\"hint-reveal\">\n                  <p>아래 버튼을 눌러 본인만의 힌트를 확인하세요.</p>\n                  <button \n                    className=\"btn-large btn-primary\"\n                    onClick={() => setGameState(prev => ({\n                      ...prev,\n                      hintsViewed: { ...prev.hintsViewed, [currentViewingPlayer]: true }\n                    }))}\n                  >\n                    내 힌트 보기\n                  </button>\n                </div>\n              ) : (\n                <div className=\"hint-display\">\n                  <h4>내 힌트 (이 키워드들은 정답이 아닙니다)</h4>\n                  <div className=\"hint-chips\">\n                    {gameState.playerHints[currentViewingPlayer]?.map(hintIndex => (\n                      <span key={hintIndex} className=\"hint-chip\">\n                        {gameState.keywords[hintIndex]}\n                      </span>\n                    ))}\n                  </div>\n                  <p>힌트를 기억하고 다음 버튼을 눌러주세요.</p>\n                  <button \n                    className=\"btn-large btn-secondary\"\n                    onClick={() => {\n                      const nextPlayer = currentViewingPlayer + 1;\n                      if (nextPlayer <= players.length) {\n                        setCurrentViewingPlayer(nextPlayer);\n                      } else {\n                        setHintViewingPhase(false);\n                        // GameManager로 게임 시작\n                        if (gameManagerRef.current) {\n                          gameManagerRef.current.startGame(\n                            gameState.keywords,\n                            gameState.answers,\n                            gameState.playerHints\n                          );\n                        } else {\n                          // GameManager 없이 게임 시작 시 타이머 시작\n                          setTimeout(() => {\n                            setGameState(prev => ({\n                              ...prev,\n                              currentTurn: 1\n                            }));\n                            startTimer();\n                          }, 100);\n                        }\n                      }\n                    }}\n                  >\n                    확인 완료\n                  </button>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    if (isGameFinished) {\n      return (\n        <div className=\"game-screen\">\n          <div className=\"game-over\">\n            <h2>🎉 게임 종료!</h2>\n            {gameState.winner ? (\n              <div className=\"winner-announcement\">\n                <h3>{players.find(p => p.id === gameState.winner)?.nickname}님이 승리했습니다!</h3>\n                <p>축하합니다! 정답을 모두 맞추셨습니다.</p>\n              </div>\n            ) : (\n              <div className=\"draw-announcement\">\n                <h3>무승부</h3>\n                <p>최대 턴 수에 도달했습니다.</p>\n              </div>\n            )}\n            \n            <div className=\"final-answers\">\n              <h4>정답은:</h4>\n              <div className=\"answer-list\">\n                {gameState.answers.map(answerIndex => (\n                  <span key={answerIndex} className=\"answer-chip\">\n                    {gameState.keywords[answerIndex]}\n                  </span>\n                ))}\n              </div>\n            </div>\n\n            <div className=\"game-history\">\n              <h4>게임 기록</h4>\n              <div className=\"history-list\">\n                {gameState.turnHistory.map((turn, index) => (\n                  <div key={index} className=\"history-item\">\n                    <div className=\"turn-info\">\n                      <strong>턴 {turn.turnNumber}</strong> - {turn.playerName}\n                    </div>\n                    <div className=\"turn-keywords\">\n                      선택: {turn.guessKeywords.join(', ')}\n                    </div>\n                    <div className=\"turn-result\">\n                      {turn.correctCount}/{gameConfig.answerCount} 정답 ({turn.timeUsed}초 소요)\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            <div className=\"setup-actions\">\n              <button \n                className=\"btn-large btn-secondary\" \n                onClick={() => setCurrentScreen('mode-selection')}\n              >\n                새 게임\n              </button>\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"game-screen game-playing\">\n        {/* 게임 상태 헤더 */}\n        <div className=\"game-header-info\">\n          <div className=\"turn-info\">\n            <h3>턴 {gameState.currentTurn}{gameConfig.maxTurns && ` / ${gameConfig.maxTurns}`}</h3>\n            <p>\n              {currentPlayer?.nickname}의 차례\n              {isAIThinking && <span className=\"ai-thinking\"> (생각하는 중...)</span>}\n            </p>\n          </div>\n          <div className=\"header-controls\">\n            <div className=\"timer\">\n              <div className={`time-display ${timeRemaining <= 10 ? 'warning' : ''}`}>\n                {timeRemaining}초\n              </div>\n              <div className=\"timer-bar\">\n                <div \n                  className=\"timer-fill\" \n                  style={{ \n                    width: `${(timeRemaining / gameConfig.timeLimit) * 100}%`,\n                    backgroundColor: timeRemaining <= 10 ? '#FF5722' : \n                                   timeRemaining <= 30 ? '#FFC107' : '#4CAF50'\n                  }}\n                />\n              </div>\n            </div>\n            <button \n              className=\"btn btn-exit\"\n              onClick={exitGame}\n              title=\"게임 종료\"\n            >\n              나가기\n            </button>\n          </div>\n        </div>\n\n        <div className=\"game-layout\">\n          {/* 왼쪽: 키워드 그리드 */}\n          <div className=\"game-main\">\n            <div className=\"keyword-selection\">\n              <h4>키워드를 선택하세요 ({selectedKeywords.length}/{gameConfig.answerCount})</h4>\n              <div className=\"keywords-grid\">\n                {gameState.keywords.map((keyword, index) => {\n                  const isSelected = selectedKeywords.includes(index);\n                  const isRevealedAnswer = gameState.revealedAnswers.includes(index);\n                  const isRevealedWrong = gameState.revealedWrongAnswers.includes(index);\n                  \n                  return (\n                    <button\n                      key={index}\n                      className={`keyword-btn ${isSelected ? 'selected' : ''} ${isRevealedAnswer ? 'revealed-answer' : ''} ${isRevealedWrong ? 'revealed-wrong' : ''}`}\n                      onClick={() => toggleKeywordSelection(index)}\n                      disabled={isSubmitting || isAIThinking || !isMyTurn}\n                    >\n                      {keyword}\n                      {isRevealedAnswer && <span className=\"reveal-indicator\">✓</span>}\n                      {isRevealedWrong && <span className=\"reveal-indicator\">❌</span>}\n                    </button>\n                  );\n                })}\n              </div>\n            </div>\n\n            <div className=\"guess-controls\">\n              <div className=\"selected-display\">\n                <h5>선택된 키워드:</h5>\n                <div className=\"selected-keywords\">\n                  {selectedKeywords.map(index => (\n                    <span key={index} className=\"selected-chip\">\n                      {gameState.keywords[index]}\n                    </span>\n                  ))}\n                </div>\n              </div>\n              \n              <div className=\"control-buttons\">\n                <button \n                  className=\"btn-large btn-secondary\"\n                  onClick={() => setSelectedKeywords([])}\n                  disabled={selectedKeywords.length === 0}\n                >\n                  선택 초기화\n                </button>\n                <button \n                  className=\"btn-large btn-primary\"\n                  onClick={submitGuess}\n                  disabled={selectedKeywords.length !== gameConfig.answerCount || isSubmitting}\n                >\n                  추측 제출\n                </button>\n              </div>\n            </div>\n          </div>\n\n          {/* 오른쪽: 게임 정보 */}\n          <div className={`game-sidebar ${isMobile && isSidebarOpen ? 'open' : ''}`}>\n            <div className=\"global-hints\">\n              <h4>게임 힌트</h4>\n              <div className=\"hint-buttons\">\n                <button \n                  className=\"btn btn-hint\"\n                  onClick={revealAnswerHint}\n                  disabled={gameState.answers.length === gameState.revealedAnswers.length}\n                >\n                  정답 1개 공개\n                </button>\n                <button \n                  className=\"btn btn-hint\"\n                  onClick={revealWrongHint}\n                >\n                  오답 1개 공개\n                </button>\n              </div>\n              <div className=\"revealed-info\">\n                {gameState.revealedAnswers.length > 0 && (\n                  <div>\n                    <small>공개된 정답: {gameState.revealedAnswers.length}개</small>\n                  </div>\n                )}\n                {gameState.revealedWrongAnswers.length > 0 && (\n                  <div>\n                    <small>공개된 오답: {gameState.revealedWrongAnswers.length}개</small>\n                  </div>\n                )}\n              </div>\n            </div>\n\n            <div className=\"players-status\">\n              <h4>플레이어 현황</h4>\n              <div className=\"players-list\">\n                {players.map(player => (\n                  <div \n                    key={player.id} \n                    className={`player-status ${currentPlayer?.id === player.id ? 'current' : ''}`}\n                  >\n                    <span className=\"player-name\">{player.nickname}</span>\n                    <span className=\"player-type\">({player.type === 'built-in-ai' ? 'AI' : player.type === 'custom-ai' ? 'Custom AI' : '인간'})</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            <div className=\"turn-history\">\n              <h4>턴 기록</h4>\n              <div className=\"history-scroll\">\n                {gameState.turnHistory.slice(-5).map((turn, index) => (\n                  <div key={index} className=\"history-entry\">\n                    <div className=\"history-header\">\n                      <span>턴 {turn.turnNumber}: {turn.playerName}</span>\n                    </div>\n                    <div className=\"history-keywords\">\n                      {turn.guessKeywords.join(', ')}\n                    </div>\n                    <div className=\"history-result\">\n                      {turn.correctCount}/{gameConfig.answerCount} 정답\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        {/* 모바일 사이드바 토글 버튼 */}\n        {isMobile && (\n          <button \n            className=\"sidebar-toggle\"\n            onClick={() => setIsSidebarOpen(!isSidebarOpen)}\n            aria-label={isSidebarOpen ? '정보 패널 닫기' : '정보 패널 열기'}\n          >\n            {isSidebarOpen ? '✕' : '☰'}\n          </button>\n        )}\n      </div>\n    );\n  };\n\n  const renderGuideModal = () => {\n    if (!isGuideModalOpen) return null;\n\n    const guideSlides = [\n      {\n        title: \"게임 목표: 숨겨진 키워드를 찾아라!\",\n        content: \"수많은 키워드 풀에서 정답으로 지정된 몇 개의 키워드를 가장 먼저 찾아내는 플레이어가 승리합니다.\"\n      },\n      {\n        title: \"핵심 규칙: 단서와 추론\",\n        content: \"각 플레이어는 자신만 아는 '힌트(정답이 아닌 키워드)'를 받습니다. 매 턴, 정답이라 생각하는 키워드들을 추측하면, 그중에 진짜 정답이 '몇 개'인지 결과만 알려줍니다.\"\n      },\n      {\n        title: \"승리 조건: 완벽한 추리\",\n        content: \"모든 정답 키워드를 정확히 맞추는 추측을 가장 먼저 한 플레이어가 게임의 승자가 됩니다. 제한 시간이 있으니 신속하고 정확한 추리가 필요합니다!\"\n      }\n    ];\n\n    const goToNextSlide = () => {\n      setGuideSlideIndex(prev => (prev + 1) % guideSlides.length);\n    };\n\n    const goToPrevSlide = () => {\n      setGuideSlideIndex(prev => (prev - 1 + guideSlides.length) % guideSlides.length);\n    };\n\n    return (\n      <div className=\"modal-overlay\" onClick={() => setIsGuideModalOpen(false)}>\n        <div className=\"modal-content guide-modal\" onClick={(e) => e.stopPropagation()}>\n          <div className=\"modal-header\">\n            <h3>게임 가이드</h3>\n            <button className=\"modal-close\" onClick={() => setIsGuideModalOpen(false)}>×</button>\n          </div>\n          <div className=\"guide-slides-container\">\n            <div className=\"guide-slide\">\n              <h4>{guideSlides[guideSlideIndex].title}</h4>\n              <p>{guideSlides[guideSlideIndex].content}</p>\n            </div>\n          </div>\n          <div className=\"guide-controls\">\n            <button onClick={goToPrevSlide}>이전</button>\n            <div className=\"slide-indicators\">\n              {guideSlides.map((_, index) => (\n                <span key={index} className={`indicator ${guideSlideIndex === index ? 'active' : ''}`}></span>\n              ))}\n            </div>\n            <button onClick={goToNextSlide}>다음</button>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"deduction-game\">\n      <div className=\"game-content\">\n        <div className=\"game-wrapper\">\n          <div className=\"game-header\">\n            <h1>Exclusive Deduction Game</h1>\n            <p>서로 다른 단서로 정답을 추론하는 게임</p>\n          </div>\n          \n          {currentScreen === 'mode-selection' && renderModeSelection()}\n          {currentScreen === 'difficulty-selection' && renderDifficultySelection()}\n          {currentScreen === 'player-setup' && renderPlayerSetup()}\n          {currentScreen === 'game-config' && renderGameConfig()}\n          {currentScreen === 'game-preparation' && renderGamePreparation()}\n          {currentScreen === 'game' && renderGameScreen()}\n        </div>\n        \n        {renderCodeEditorModal()}\n        {renderGuideModal()}\n      </div>\n    </div>\n  );\n};\n\nexport default DeductionGame;","import { useParams } from \"react-router-dom\";\nimport './LabPage.css';\n\nimport { Tetris, DeductionGame } from \"../components/lab/subject\";\n\n\nconst LabDetailPage = () => {\n    const { subject } = useParams()\n    console.log(subject)\n\n\n    const renderContetns = () => {\n        switch (subject) {\n            case \"tetris\":\n                return <Tetris />\n            case \"deduction-game\":\n                return <DeductionGame />\n            default:\n                return (\n                    <h1 className=\"lab-title\">준비중...</h1>\n                )\n        }\n    }\n\n    return (\n        <div className=\"lab-page\">\n             <main className=\"lab-content\">\n                {renderContetns()}\n             </main>\n        </div>\n    )\n}\n\nexport default LabDetailPage;"],"names":["AICodeValidator","validate","code","errors","warnings","length","this","MAX_CODE_LENGTH","push","concat","lines","split","MAX_LINES","pattern","message","FORBIDDEN_PATTERNS","test","Function","e","includes","loopPatterns","complexity","analyzeComplexity","suspiciousPatterns","isValid","undefined","loops","match","functions","preprocessCode","processed","replace","trim","MAX_LOOP_DEPTH","MAX_FUNCTION_DEPTH","Tetris","_jsxs","className","children","_jsx","src","process","title","allow","allowFullScreen","BasePlayer","constructor","playerInfo","ready","getInfo","isReady","onTurnStart","onTurnEnd","move","reset","HumanPlayer","super","resolveGuess","makeGuess","gameState","Promise","resolve","submitGuess","indices","isWaitingForInput","BuiltInAIPlayer","strategy","thinkingTime","startTime","Date","now","selectedIndices","selectKeywords","elapsedTime","remainingTime","Math","max","setTimeout","setThinkingTime","milliseconds","getStrategy","setStrategy","AICodeExecutor","executionCounter","MAX_EXECUTION_TIME","getInstance","instance","executeUserAI","playerId","performance","logs","validation","success","error","join","executionTime","map","w","processedCode","secureGameState","createSecureGameState","result","executeInWorker","deepFreeze","obj","Object","freeze","getOwnPropertyNames","forEach","prop","isFrozen","keywords","myHints","answerCount","previousGuesses","g","guess","correctCount","revealedAnswers","revealedWrongAnswers","currentTurn","timeLimit","reject","executionId","workerPath","publicUrl","window","location","pathname","startsWith","worker","Worker","timeoutId","terminate","Error","onmessage","event","type","msgId","data","clearTimeout","logMessage","arg","JSON","stringify","String","onerror","errorMessage","console","postMessage","validateGuess","Array","isArray","keywordCount","i","idx","Number","isInteger","Set","size","PerformanceMonitor","metricsHistory","MAX_HISTORY_SIZE","measureExecution","executor","metadata","startMemory","getMemoryUsage","endTime","endMemory","metrics","memoryUsage","recordMetrics","_objectSpread","timestamp","errorType","name","measureSync","memory","usedJSHeapSize","slice","getPlayerStats","playerMetrics","filter","m","totalExecutions","successRate","averageExecutionTime","maxExecutionTime","recentErrors","successful","totalTime","reduce","sum","maxTime","getGlobalStats","averageSuccessRate","peakExecutionTime","activePlayerCount","peakTime","uniquePlayers","clearHistory","AIExecutionHandler","monitor","executeWithFallback","userCode","playerName","executionResult","log","_error$error","fallbackGuess","generateFallbackGuess","errorDetails","available","randomIndex","floor","random","selected","splice","validateCode","valid","testAICode","sampleGameState","testGameState","createSampleGameState","CustomAIPlayer","aiCode","aiLanguage","executionHandler","customCode","customLanguage","id","nickname","fallbackStrategy","availableIndices","from","_","remaining","randomIdx","validateCodeAsync","updateCode","language","getCode","getLanguage","GlobalGameMemory","allCombinations","keywordStats","Map","playerPatterns","clear","addCombination","combination","key","sort","a","b","add","hasCombination","has","getAllCombinations","updateKeywordStats","keywordIdx","stats","get","appearances","correctGuesses","totalGuesses","set","getKeywordScore","updatePlayerPattern","getFrequentlyChosenKeywords","minFrequency","arguments","frequentKeywords","count","entries","_ref","_ref2","BaseStrategy","gameMemory","updateGlobalMemory","definiteAnswers","definiteWrongs","hint","wrong","revealedOtherHints","_ref3","hints","hintIdx","analyzeAllGuesses","possibleKeywords","scores","calculateScoresWithMemory","finalGuess","buildFinalGuess","preventDuplicateGuessWithGlobalMemory","score","calculateKeywordScore","sorted","_ref4","toFixed","generateNewCombinationWithMemory","originalGuess","mustInclude","candidates","_ref5","attempt","newGuess","needed","shuffled","j","compareGuesses","checkConstraints","guess1","guess2","onlyIn1","x","onlyIn2","idx1","idx2","knownAnswers","unknownIndices","knownWrongs","totalAppearances","weightedCorrect","unknownCount","remainingCorrect","EasyStrategy","getStrategyName","getDescription","MediumStrategy","HardStrategy","baseResult","advancedReasoning","baseGuess","remainingAnswers","optimizedGuess","findOptimalCombination","refineWithSetAnalysis","h","possibleIndices","remainingSlots","validCombinations","findValidCombinations","slots","generateCombinations","start","current","pop","testAnswer","isValidHypothesis","hypothesis","guesses","hypothesisSet","currentGuess","confirmedAnswers","highScoreGuesses","intersection","refinedGuess","PlayerFactory","createPlayer","createStrategy","aiDifficulty","difficulty","createBuiltInAIOpponent","isHumanPlayer","player","isBuiltInAIPlayer","isCustomAIPlayer","GameManager","config","players","currentPlayerIndex","gameContext","isGameRunning","turnTimer","turnStartTime","revealedHintsPerPlayer","lastHintRevealTurn","onGameEnd","onTimerTick","onAIThinking","answers","playerHints","turnHistory","addPlayer","setPlayers","getCurrentPlayer","getPlayers","getGameContext","startGame","keywordPoolSize","hintCount","calculateGameComplexity","calculateExpectedTurns","startNextTurn","_currentPlayer$onTurn","currentPlayer","call","startTurnTimer","gameStateForAI","createGameStateForAI","then","processTurn","setInterval","handleTimeout","stopTurnTimer","clearInterval","autoGuess","submitHumanGuess","_currentPlayer$onTurn2","isWinner","every","actualTimeUsed","round","turnResult","guessKeywords","turnNumber","timeUsed","endGame","maxTurns","turn","hintRevealSchedule","getHintRevealSchedule","updateAndGetRevealedHints","expectedTurns","profile","easy","startRatio","initialInterval","accelerationFactor","medium","hard","startTurn","Infinity","baseTurns","ceil","min","schedule","lastRevealTurn","turnsPassedSinceStart","acceleratedInterval","revealMultiplier","hintsToRevealThisTurn","shouldReveal","revealedHints","_this$players$find3","otherPlayers","p","availableHints","otherPlayer","otherPlayerId","otherHints","find","rh","revealedThisTurn","_this$players$find","newHint","thresholdRatio","gameProgress","isHardAI","isEndgame","totalAvailableHints","_this$players$find2","nextInterval","revealAnswer","unrevealedAnswers","ans","randomAnswer","revealWrongAnswer","wrongAnswers","randomWrong","winner","stopGame","isRunning","setEventHandlers","handlers","DeductionGame","guideSlideIndex","setGuideSlideIndex","useState","isGuideModalOpen","setIsGuideModalOpen","currentScreen","setCurrentScreen","gameMode","setGameMode","playerCount","setPlayerCount","gameConfig","setGameConfig","setGameState","gameStatus","hintsViewed","preparationStep","setPreparationStep","selectedKeywords","setSelectedKeywords","timeRemaining","setTimeRemaining","isMyTurn","setIsMyTurn","hintViewingPhase","setHintViewingPhase","currentViewingPlayer","setCurrentViewingPlayer","timerIntervalId","setTimerIntervalId","isSubmitting","setIsSubmitting","aiTimeoutId","setAiTimeoutId","soloDifficulty","setSoloDifficulty","isAIThinking","setIsAIThinking","gameManagerRef","useRef","setTurnStartTime","codeEditorModal","setCodeEditorModal","isOpen","isSidebarOpen","setIsSidebarOpen","isMobile","setIsMobile","useEffect","checkMobile","innerWidth","addEventListener","removeEventListener","handleModeSelect","mode","handleDifficultySelect","updatePlayer","updates","prev","handleStartGame","handleConfigComplete","initializeGame","keywordCategories","animals","foods","objects","places","actions","async","values","flat","answerIndices","shuffledIndices","nonAnswerIndices","startActualGame","manager","gamePlayers","context","winnerInfo","thinking","startTimer","clearTimer","intervalId","handleTimeUp","autoSelection","index","submitGuessWithSelection","exitGame","revealAnswerHint","revealWrongHint","selection","currentPlayerId","isMaxTurnsReached","difficultyPresets","beginner","intermediate","advanced","applyPreset","preset","updateGameConfig","onClick","style","marginTop","textAlign","justifyContent","num","newPlayers","handlePlayerCountSelect","_Fragment","placeholder","value","onChange","target","maxLength","checked","htmlFor","width","disabled","_player$aiCode","flexWrap","renderGamePreparation","preparationSteps","description","step","renderGameScreen","isGameFinished","_gameState$playerHint","viewingPlayer","hasViewedHints","nextPlayer","hintIndex","_players$find","answerIndex","backgroundColor","keyword","isSelected","isRevealedAnswer","isRevealedWrong","toggleKeywordSelection","keywordIndex","renderCodeEditorModal","stopPropagation","exampleCode","onScroll","textarea","currentTarget","nextElementSibling","scrollTop","lineNumbers","previousElementSibling","spellCheck","renderGuideModal","guideSlides","content","goToPrevSlide","goToNextSlide","LabDetailPage","subject","useParams","renderContetns"],"sourceRoot":""}