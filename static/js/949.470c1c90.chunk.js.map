{"version":3,"file":"static/js/949.470c1c90.chunk.js","mappings":"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","sources":["components/lab/playground/DeductionGame/AIGuidePanel.tsx","components/lab/playground/DeductionGame/DeductionGame.tsx","components/lab/playground/DeductionGame/ai/GameManager.ts","components/lab/playground/DeductionGame/ai/players/BasePlayer.ts","components/lab/playground/DeductionGame/ai/players/HumanPlayer.ts","components/lab/playground/DeductionGame/ai/players/BuiltInAIPlayer.ts","components/lab/playground/DeductionGame/ai/sandbox/AICodeExecutor.ts","components/lab/playground/DeductionGame/ai/sandbox/PerformanceMonitor.ts","components/lab/playground/DeductionGame/ai/sandbox/AIExecutionHandler.ts","components/lab/playground/DeductionGame/ai/players/CustomAIPlayer.ts","components/lab/playground/DeductionGame/ai/strategies/EasyStrategy.ts","components/lab/playground/DeductionGame/ai/strategies/BaseStrategy.ts","components/lab/playground/DeductionGame/ai/strategies/MediumStrategy.ts","components/lab/playground/DeductionGame/ai/strategies/HardStrategy.ts","components/lab/playground/DeductionGame/ai/PlayerFactory.ts","components/lab/playground/DeductionGame/ai/sandbox/AICodeValidator.ts","components/lab/playground/Tetris/Tetris.tsx","pages/LabDetailPage.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport './AIGuidePanel.css';\n\ninterface AIGuidePanelProps {\n  isExpanded: boolean;\n  onToggle: () => void;\n  onInsertTemplate?: (template: string) => void;\n}\n\nconst AIGuidePanel: React.FC<AIGuidePanelProps> = ({ isExpanded, onToggle, onInsertTemplate }) => {\n  const [activeTab, setActiveTab] = useState<'structure' | 'gamestate' | 'tips' | 'template'>('structure');\n\n  const renderTabContent = () => {\n    switch (activeTab) {\n      case 'structure':\n        return (\n          <div className=\"guide-content\">\n            <h4>makeGuess 함수 구조</h4>\n            <p>AI는 반드시 <code>makeGuess</code> 함수를 구현해야 합니다.</p>\n            \n            <div className=\"code-block\">\n              <pre>{`function makeGuess(gameState) {\n  // 게임 상태 분석\n  // 전략 로직 구현\n  \n  return [0, 1, 2, 3, 4]; // 선택한 키워드 인덱스 배열\n}`}</pre>\n            </div>\n            \n            <h5>필수 요구사항</h5>\n            <ul>\n              <li>함수명은 반드시 <code>makeGuess</code>여야 합니다</li>\n              <li>매개변수로 <code>gameState</code> 객체를 받습니다</li>\n              <li>정수 배열을 반환해야 합니다</li>\n              <li>배열 길이는 <code>gameState.answerCount</code>와 일치해야 합니다</li>\n              <li>각 값은 0부터 <code>keywords.length-1</code> 사이의 인덱스여야 합니다</li>\n            </ul>\n          </div>\n        );\n\n      case 'gamestate':\n        return (\n          <div className=\"guide-content\">\n            <h4>GameState 객체 구조</h4>\n            <p><code>gameState</code> 객체는 현재 게임의 모든 정보를 담고 있습니다.</p>\n            \n            <table className=\"gamestate-table\">\n              <thead>\n                <tr>\n                  <th>속성</th>\n                  <th>타입</th>\n                  <th>설명</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <td><code>keywords</code></td>\n                  <td>string[]</td>\n                  <td>전체 키워드 목록</td>\n                </tr>\n                <tr>\n                  <td><code>myHints</code></td>\n                  <td>number[]</td>\n                  <td>내가 받은 오답 힌트 인덱스들</td>\n                </tr>\n                <tr>\n                  <td><code>previousGuesses</code></td>\n                  <td>object[]</td>\n                  <td>이전 추측 기록 (playerId, guess, correctCount)</td>\n                </tr>\n                <tr>\n                  <td><code>revealedAnswers</code></td>\n                  <td>number[]</td>\n                  <td>공개된 정답 인덱스들</td>\n                </tr>\n                <tr>\n                  <td><code>revealedWrongAnswers</code></td>\n                  <td>number[]</td>\n                  <td>공개된 오답 인덱스들</td>\n                </tr>\n                <tr>\n                  <td><code>answerCount</code></td>\n                  <td>number</td>\n                  <td>찾아야 할 정답 개수</td>\n                </tr>\n                <tr>\n                  <td><code>currentTurn</code></td>\n                  <td>number</td>\n                  <td>현재 턴 번호</td>\n                </tr>\n                <tr>\n                  <td><code>maxTurns</code></td>\n                  <td>number?</td>\n                  <td>최대 턴 수 (없으면 무제한)</td>\n                </tr>\n                <tr>\n                  <td><code>timeLimit</code></td>\n                  <td>number</td>\n                  <td>턴당 제한 시간 (초)</td>\n                </tr>\n                <tr>\n                  <td><code>revealedOtherHints</code></td>\n                  <td>object[]</td>\n                  <td>다른 플레이어의 힌트 정보</td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n        );\n\n      case 'tips':\n        return (\n          <div className=\"guide-content\">\n            <h4>AI 작성 팁</h4>\n            \n            <h5>기본 전략</h5>\n            <ul>\n              <li><strong>확실한 정보 활용</strong>: revealedAnswers는 100% 정답입니다</li>\n              <li><strong>제외 방식</strong>: myHints와 revealedWrongAnswers는 정답이 아닙니다</li>\n              <li><strong>추론</strong>: previousGuesses의 correctCount를 분석하여 정답 후보를 좁힐 수 있습니다</li>\n            </ul>\n\n            <h5>디버깅 방법</h5>\n            <div className=\"code-block\">\n              <pre>{`// 디버깅을 위한 로그 출력\nconsole.log('현재 턴:', gameState.currentTurn);\nconsole.log('가능한 후보:', candidates.length);`}</pre>\n            </div>\n\n            <h5>주의사항</h5>\n            <ul>\n              <li>실행 시간은 2초를 초과하면 안 됩니다</li>\n              <li>무한 루프에 빠지지 않도록 주의하세요</li>\n              <li>외부 라이브러리는 사용할 수 없습니다</li>\n              <li>전역 변수 사용은 피하세요</li>\n            </ul>\n          </div>\n        );\n\n      case 'template':\n        return (\n          <div className=\"guide-content\">\n            <h4>코드 템플릿</h4>\n            <p>아래 템플릿 중 하나를 선택하여 시작하세요.</p>\n            \n            <h5>기초 템플릿</h5>\n            {onInsertTemplate && (\n              <button \n                className=\"insert-template-btn\"\n                onClick={() => onInsertTemplate(`function makeGuess(gameState) {\n  const { keywords, myHints, revealedAnswers, \n          revealedWrongAnswers, answerCount } = gameState;\n  \n  // 선택 가능한 인덱스 구하기\n  const candidates = [];\n  for (let i = 0; i < keywords.length; i++) {\n    if (!myHints.includes(i) && \n        !revealedWrongAnswers.includes(i)) {\n      candidates.push(i);\n    }\n  }\n  \n  // 정답 우선 선택\n  const result = [...revealedAnswers];\n  \n  // 나머지 랜덤 선택\n  while (result.length < answerCount && candidates.length > 0) {\n    const idx = Math.floor(Math.random() * candidates.length);\n    const selected = candidates[idx];\n    if (!result.includes(selected)) {\n      result.push(selected);\n      candidates.splice(idx, 1);\n    }\n  }\n  \n  return result;\n}`)}\n              >\n                이 템플릿 사용하기\n              </button>\n            )}\n            <div className=\"code-block\">\n              <pre>{`function makeGuess(gameState) {\n  const { keywords, myHints, revealedAnswers, \n          revealedWrongAnswers, answerCount } = gameState;\n  \n  // 선택 가능한 인덱스 구하기\n  const candidates = [];\n  for (let i = 0; i < keywords.length; i++) {\n    if (!myHints.includes(i) && \n        !revealedWrongAnswers.includes(i)) {\n      candidates.push(i);\n    }\n  }\n  \n  // 정답 우선 선택\n  const result = [...revealedAnswers];\n  \n  // 나머지 랜덤 선택\n  while (result.length < answerCount && candidates.length > 0) {\n    const idx = Math.floor(Math.random() * candidates.length);\n    const selected = candidates[idx];\n    if (!result.includes(selected)) {\n      result.push(selected);\n      candidates.splice(idx, 1);\n    }\n  }\n  \n  return result;\n}`}</pre>\n            </div>\n\n            <h5>중급 템플릿 (추론 포함)</h5>\n            {onInsertTemplate && (\n              <button \n                className=\"insert-template-btn\"\n                onClick={() => onInsertTemplate(`function makeGuess(gameState) {\n  const { keywords, myHints, previousGuesses,\n          revealedAnswers, revealedWrongAnswers, \n          answerCount } = gameState;\n  \n  // 후보 점수 계산\n  const scores = new Array(keywords.length).fill(0);\n  \n  // 이전 추측 분석\n  for (const prev of previousGuesses) {\n    // 추론 로직 구현\n    // prev.guess와 prev.correctCount 활용\n  }\n  \n  // 최고 점수 후보 선택\n  // ... 구현\n  \n  return selectedIndices;\n}`)}\n              >\n                이 템플릿 사용하기\n              </button>\n            )}\n            <div className=\"code-block\">\n              <pre>{`function makeGuess(gameState) {\n  const { keywords, myHints, previousGuesses,\n          revealedAnswers, revealedWrongAnswers, \n          answerCount } = gameState;\n  \n  // 후보 점수 계산\n  const scores = new Array(keywords.length).fill(0);\n  \n  // 이전 추측 분석\n  for (const prev of previousGuesses) {\n    // 추론 로직 구현\n    // prev.guess와 prev.correctCount 활용\n  }\n  \n  // 최고 점수 후보 선택\n  // ... 구현\n  \n  return selectedIndices;\n}`}</pre>\n            </div>\n          </div>\n        );\n    }\n  };\n\n  return (\n    <div className={`ai-guide-panel ${isExpanded ? 'expanded' : 'collapsed'}`}>\n      <button className=\"guide-toggle\" onClick={onToggle}>\n        {isExpanded ? '◀' : '▶'}\n        <span className=\"toggle-text\">가이드</span>\n      </button>\n      \n      {isExpanded && (\n        <div className=\"guide-panel-content\">\n          <div className=\"guide-tabs\">\n            <button \n              className={`guide-tab ${activeTab === 'structure' ? 'active' : ''}`}\n              onClick={() => setActiveTab('structure')}\n            >\n              함수 구조\n            </button>\n            <button \n              className={`guide-tab ${activeTab === 'gamestate' ? 'active' : ''}`}\n              onClick={() => setActiveTab('gamestate')}\n            >\n              GameState\n            </button>\n            <button \n              className={`guide-tab ${activeTab === 'tips' ? 'active' : ''}`}\n              onClick={() => setActiveTab('tips')}\n            >\n              작성 팁\n            </button>\n            <button \n              className={`guide-tab ${activeTab === 'template' ? 'active' : ''}`}\n              onClick={() => setActiveTab('template')}\n            >\n              템플릿\n            </button>\n          </div>\n          \n          <div className=\"guide-tab-content\">\n            {renderTabContent()}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AIGuidePanel;","import React, { useState, useEffect, useRef } from 'react';\nimport './DeductionGame.css';\nimport { GameManager } from './ai/GameManager';\nimport { PlayerFactory } from './ai/PlayerFactory';\nimport { IPlayer } from './ai/players/BasePlayer';\nimport { HumanPlayer } from './ai/players/HumanPlayer';\nimport { PlayerInfo, PlayerType } from './ai/types/PlayerTypes';\nimport AIGuidePanel from './AIGuidePanel';\n\ntype GameScreen = 'mode-selection' | 'difficulty-selection' | 'player-setup' | 'game-config' | 'game-preparation' | 'game';\ntype GameMode = 'solo' | 'multi';\n\ninterface GameConfig {\n  keywordPoolSize: number;\n  answerCount: number;\n  hintCount: number;\n  timeLimit: number;\n  maxTurns?: number;\n  difficulty: 'beginner' | 'intermediate' | 'advanced' | 'custom';\n}\n\ninterface GameState {\n  keywords: string[];\n  answers: number[];\n  playerHints: { [playerId: number]: number[] };\n  isReady: boolean;\n  currentTurn: number;\n  turnHistory: TurnResult[];\n  gameStatus: 'playing' | 'finished';\n  winner?: number;\n  revealedAnswers: number[];\n  revealedWrongAnswers: number[];\n  hintsViewed: { [playerId: number]: boolean };\n}\n\ninterface TurnResult {\n  playerId: number;\n  playerName: string;\n  guess: number[];\n  guessKeywords: string[];\n  correctCount: number;\n  turnNumber: number;\n  timeUsed: number;\n}\n\ninterface PlayerConfig {\n  id: number;\n  nickname: string;\n  type: PlayerType;\n  aiCode?: string;\n  aiLanguage?: 'javascript' | 'typescript';\n  aiDifficulty?: 'easy' | 'medium' | 'hard';\n}\n\nconst DeductionGame: React.FC = () => {\n  const [guideSlideIndex, setGuideSlideIndex] = useState(0);\n  const [isGuideModalOpen, setIsGuideModalOpen] = useState(false);\n  const [currentScreen, setCurrentScreen] = useState<GameScreen>('mode-selection');\n  const [gameMode, setGameMode] = useState<GameMode>('solo');\n  const [playerCount, setPlayerCount] = useState(2);\n  const [players, setPlayers] = useState<PlayerConfig[]>([]);\n  const [gameConfig, setGameConfig] = useState<GameConfig>({\n    keywordPoolSize: 50,\n    answerCount: 5,\n    hintCount: 5,\n    timeLimit: 60,\n    maxTurns: 20,\n    difficulty: 'intermediate'\n  });\n  const [gameState, setGameState] = useState<GameState>({\n    keywords: [],\n    answers: [],\n    playerHints: {},\n    isReady: false,\n    currentTurn: 0,\n    turnHistory: [],\n    gameStatus: 'playing',\n    revealedAnswers: [],\n    revealedWrongAnswers: [],\n    hintsViewed: {}\n  });\n  const [preparationStep, setPreparationStep] = useState(0);\n  const [selectedKeywords, setSelectedKeywords] = useState<number[]>([]);\n  const [timeRemaining, setTimeRemaining] = useState(0);\n  const [isMyTurn, setIsMyTurn] = useState(false);\n  const [hintViewingPhase, setHintViewingPhase] = useState(false);\n  const [currentViewingPlayer, setCurrentViewingPlayer] = useState(0);\n  const [timerIntervalId, setTimerIntervalId] = useState<NodeJS.Timeout | null>(null);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [aiTimeoutId, setAiTimeoutId] = useState<NodeJS.Timeout | null>(null);\n  const [soloDifficulty, setSoloDifficulty] = useState<'easy' | 'medium' | 'hard'>('medium');\n  const [isAIThinking, setIsAIThinking] = useState(false);\n  const gameManagerRef = useRef<GameManager | null>(null);\n  const [turnStartTime, setTurnStartTime] = useState<number>(0);\n  const [codeEditorModal, setCodeEditorModal] = useState<{ isOpen: boolean; playerId: number | null }>({ \n    isOpen: false, \n    playerId: null \n  });\n  const [globalHintsEnabled, setGlobalHintsEnabled] = useState(true);\n  const [isGuideExpanded, setIsGuideExpanded] = useState(true);\n  const [isModalExpanded, setIsModalExpanded] = useState(false);\n  const [testResults, setTestResults] = useState<Array<{ id: number; success: boolean; message: string; details?: any; isFading?: boolean }>>([]);\n  const [isTestRunning, setIsTestRunning] = useState(false);\n  const [testResultIdCounter, setTestResultIdCounter] = useState(0);\n\n  const handleModeSelect = (mode: GameMode) => {\n    setGameMode(mode);\n    if (mode === 'solo') {\n      // 솔로 모드는 난이도 선택 화면으로\n      setCurrentScreen('difficulty-selection');\n    } else {\n      // 멀티 모드는 플레이어 수 선택 후 설정\n      setPlayers([]);\n      setCurrentScreen('player-setup');\n    }\n  };\n\n  const handleDifficultySelect = (difficulty: 'easy' | 'medium' | 'hard') => {\n    setSoloDifficulty(difficulty);\n    setPlayerCount(2);\n    setPlayers([\n      { id: 1, nickname: '', type: 'human', aiLanguage: 'javascript' },\n      { id: 2, nickname: `AI (${difficulty === 'easy' ? '쉬움' : difficulty === 'medium' ? '보통' : '어려움'})`, type: 'built-in-ai', aiDifficulty: difficulty }\n    ]);\n    setCurrentScreen('player-setup');\n  };\n\n  const handlePlayerCountSelect = (count: number) => {\n    setPlayerCount(count);\n    const newPlayers: PlayerConfig[] = [];\n    for (let i = 1; i <= count; i++) {\n      newPlayers.push({\n        id: i,\n        nickname: '',\n        type: 'human',\n        aiLanguage: 'javascript'\n      });\n    }\n    setPlayers(newPlayers);\n  };\n\n  const updatePlayer = (id: number, updates: Partial<PlayerConfig>) => {\n    setPlayers(prev => prev.map(player => \n      player.id === id ? { ...player, ...updates } : player\n    ));\n  };\n\n  const canStartGame = () => {\n    return players.every(player => {\n      if (!player.nickname.trim()) return false;\n      if (player.type === 'custom-ai' && !player.aiCode?.trim()) return false;\n      return true;\n    });\n  };\n\n  const handleStartGame = () => {\n    console.log('Moving to game config with players:', players);\n    setCurrentScreen('game-config');\n  };\n\n  const handleConfigComplete = () => {\n    console.log('Game config complete:', gameConfig);\n    setPreparationStep(0);\n    setCurrentScreen('game-preparation');\n    initializeGame();\n  };\n\n  // 키워드 풀 (실제로는 더 많은 키워드가 필요)\n  const keywordCategories = {\n    animals: ['사자', '호랑이', '코끼리', '기린', '원숭이', '코알라', '판다', '펭귄', '독수리', '상어', '고래', '돌고래', '토끼', '고양이', '강아지', '말', '소', '돼지', '양', '염소'],\n    foods: ['피자', '햄버거', '스파게티', '초밥', '김치찌개', '불고기', '치킨', '라면', '떡볶이', '김밥', '샐러드', '스테이크', '카레', '우동', '냉면', '비빔밥', '갈비', '삼겹살', '회', '족발'],\n    objects: ['컴퓨터', '스마트폰', '자동차', '비행기', '기차', '자전거', '책', '연필', '가방', '시계', '안경', '모자', '신발', '옷', '침대', '의자', '책상', '냉장고', '세탁기', '텔레비전'],\n    places: ['학교', '병원', '은행', '카페', '식당', '공원', '해변', '산', '도서관', '박물관', '영화관', '쇼핑몰', '시장', '교회', '지하철역', '공항', '호텔', '집', '회사', '체육관'],\n    actions: ['걷기', '뛰기', '수영', '춤추기', '노래하기', '요리하기', '공부하기', '운전하기', '그림그리기', '글쓰기', '읽기', '잠자기', '먹기', '마시기', '웃기', '울기', '생각하기', '말하기', '듣기', '보기']\n  };\n\n  const generateKeywords = (size: number): string[] => {\n    const allKeywords = Object.values(keywordCategories).flat();\n    const shuffled = [...allKeywords].sort(() => Math.random() - 0.5);\n    return shuffled.slice(0, size);\n  };\n\n  const initializeGame = async () => {\n    // 1단계: 키워드 생성\n    setPreparationStep(1);\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    const keywords = generateKeywords(gameConfig.keywordPoolSize);\n    \n    // 2단계: 정답 선택\n    setPreparationStep(2);\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    const answerIndices: number[] = [];\n    const shuffledIndices = Array.from({length: keywords.length}, (_, i) => i).sort(() => Math.random() - 0.5);\n    for (let i = 0; i < gameConfig.answerCount; i++) {\n      answerIndices.push(shuffledIndices[i]);\n    }\n    \n    // 3단계: 힌트 배포\n    setPreparationStep(3);\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    const playerHints: { [playerId: number]: number[] } = {};\n    const nonAnswerIndices = shuffledIndices.filter(i => !answerIndices.includes(i));\n    \n    players.forEach(player => {\n      const hints: number[] = [];\n      const availableHints = [...nonAnswerIndices].sort(() => Math.random() - 0.5);\n      for (let i = 0; i < gameConfig.hintCount && i < availableHints.length; i++) {\n        hints.push(availableHints[i]);\n      }\n      playerHints[player.id] = hints;\n    });\n    \n    // 4단계: 준비 완료\n    setPreparationStep(4);\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    setGameState({\n      keywords,\n      answers: answerIndices,\n      playerHints,\n      isReady: true,\n      currentTurn: 0,  // GameManager가 관리하므로 0으로 시작\n      turnHistory: [],\n      gameStatus: 'playing',\n      revealedAnswers: [],\n      revealedWrongAnswers: [],\n      hintsViewed: {}\n    });\n    \n    setPreparationStep(5); // 완료 상태\n  };\n\n\n  const startActualGame = () => {\n    // GameManager 초기화\n    const manager = new GameManager({\n      keywordPoolSize: gameConfig.keywordPoolSize,\n      answerCount: gameConfig.answerCount,\n      hintCount: gameConfig.hintCount,\n      timeLimit: gameConfig.timeLimit,\n      maxTurns: gameConfig.maxTurns,\n      globalHintsEnabled: globalHintsEnabled\n    });\n\n    // 플레이어 생성\n    const gamePlayers: IPlayer[] = players.map(config => {\n      const playerInfo: PlayerInfo = {\n        id: config.id,\n        nickname: config.nickname,\n        type: config.type,\n        aiDifficulty: config.aiDifficulty,\n        customCode: config.aiCode,\n        customLanguage: config.aiLanguage\n      };\n      return PlayerFactory.createPlayer(playerInfo);\n    });\n\n    manager.setPlayers(gamePlayers);\n\n    // 이벤트 핸들러 설정\n    manager.setEventHandlers({\n      onTurnStart: (player) => {\n        const playerInfo = player.getInfo();\n        setIsMyTurn(playerInfo.type === 'human');\n        // 턴 시작 시간 기록\n        setTurnStartTime(Date.now());\n        // GameManager의 currentTurn과 동기화\n        const context = manager.getGameContext();\n        setGameState(prev => ({\n          ...prev,\n          currentTurn: context.currentTurn\n        }));\n      },\n      onTurnEnd: (result) => {\n        setIsAIThinking(false);\n        // Get updated game context to sync revealed wrong answers from global hints\n        const context = manager.getGameContext();\n        setGameState(prev => ({\n          ...prev,\n          turnHistory: [...prev.turnHistory, result],\n          revealedWrongAnswers: context.revealedWrongAnswers\n        }));\n      },\n      onGameEnd: (winner) => {\n        if (winner) {\n          const winnerInfo = winner.getInfo();\n          setGameState(prev => ({\n            ...prev,\n            gameStatus: 'finished',\n            winner: winnerInfo.id\n          }));\n        } else {\n          setGameState(prev => ({\n            ...prev,\n            gameStatus: 'finished'\n          }));\n        }\n      },\n      onTimerTick: (remainingTime) => {\n        setTimeRemaining(remainingTime);\n      },\n      onAIThinking: (thinking) => {\n        setIsAIThinking(thinking);\n      }\n    });\n\n    gameManagerRef.current = manager;\n\n    setHintViewingPhase(true);\n    setCurrentViewingPlayer(1);\n    setCurrentScreen('game');\n  };\n\n  const startTimer = () => {\n    // GameManager를 사용하는 경우 타이머를 직접 관리하지 않음\n    if (gameManagerRef.current) {\n      return;\n    }\n    \n    // 기존 타이머가 있다면 먼저 정리\n    clearTimer();\n    \n    // 턴 시작 시간 기록\n    setTurnStartTime(Date.now());\n    setTimeRemaining(gameConfig.timeLimit);\n    \n    const intervalId = setInterval(() => {\n      setTimeRemaining(prev => {\n        if (prev <= 1) {\n          // 타이머를 먼저 정리하고 handleTimeUp 호출\n          clearInterval(intervalId);\n          setTimerIntervalId(null);\n          // setTimeout으로 다음 프레임에서 실행하여 상태 업데이트 충돌 방지\n          setTimeout(() => {\n            handleTimeUp();\n          }, 0);\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n    \n    setTimerIntervalId(intervalId);\n  };\n\n  const clearTimer = () => {\n    if (timerIntervalId) {\n      clearInterval(timerIntervalId);\n      setTimerIntervalId(null);\n    }\n  };\n\n  const handleTimeUp = () => {\n    // 시간 초과시 랜덤하게 키워드 선택하여 자동 제출\n    const availableKeywords = gameState.keywords\n      .map((_, index) => index)\n      .filter(index => !gameState.revealedWrongAnswers.includes(index));\n    \n    const shuffled = [...availableKeywords].sort(() => Math.random() - 0.5);\n    const autoSelection = shuffled.slice(0, gameConfig.answerCount);\n    \n    setSelectedKeywords(autoSelection);\n    \n    // 잠시 후 자동 제출\n    setTimeout(() => {\n      submitGuessWithSelection(autoSelection);\n    }, 500);\n  };\n\n  const runAICodeTest = async (aiCode: string, language: 'javascript' | 'typescript') => {\n    setIsTestRunning(true);\n    \n    try {\n      // 1. 먼저 기본 문법 검사만 수행\n      try {\n        new Function(aiCode);\n      } catch (e: any) {\n        const newResult = {\n          id: testResultIdCounter,\n          success: false,\n          message: '문법 오류',\n          details: { error: e.message }\n        };\n        setTestResultIdCounter(prev => prev + 1);\n        setTestResults(prev => [...prev, newResult]);\n        \n        setTimeout(() => {\n          setTestResults(prev => prev.map(r => r.id === newResult.id ? { ...r, isFading: true } : r));\n          setTimeout(() => {\n            setTestResults(prev => prev.filter(r => r.id !== newResult.id));\n          }, 500);\n        }, 2000);\n        return;\n      }\n\n      // 2. makeGuess 함수 존재 확인\n      if (!aiCode.includes('function makeGuess') && !aiCode.includes('makeGuess =')) {\n        const newResult = {\n          id: testResultIdCounter,\n          success: false,\n          message: 'makeGuess 함수를 찾을 수 없습니다',\n          details: { tip: 'function makeGuess(gameState) { ... } 형식으로 작성해주세요' }\n        };\n        setTestResultIdCounter(prev => prev + 1);\n        setTestResults(prev => [...prev, newResult]);\n        \n        setTimeout(() => {\n          setTestResults(prev => prev.map(r => r.id === newResult.id ? { ...r, isFading: true } : r));\n          setTimeout(() => {\n            setTestResults(prev => prev.filter(r => r.id !== newResult.id));\n          }, 500);\n        }, 2000);\n        return;\n      }\n\n      // 3. 간단한 결함 검사 및 성능 측정\n      const testCode = `\n        ${aiCode}\n        \n        // 테스트 실행\n        (function() {\n          try {\n            if (typeof makeGuess !== 'function') {\n              throw new Error('makeGuess 함수가 정의되지 않았습니다');\n            }\n            \n            // 다양한 크기의 테스트 데이터\n            const testCases = [\n              {\n                keywords: ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T'],\n                myHints: [0, 3, 7],\n                answerCount: 4,\n                previousGuesses: [],\n                revealedAnswers: [],\n                revealedWrongAnswers: [15, 18],\n                currentTurn: 1,\n                timeLimit: 60\n              },\n              {\n                keywords: ['사자', '호랑이', '코끼리', '기린', '원숭이', '판다', '코알라', '펭귄', '독수리', '상어'],\n                myHints: [0, 2, 5],\n                answerCount: 3,\n                previousGuesses: [{ playerId: 1, guess: [1, 3, 4], correctCount: 1 }],\n                revealedAnswers: [],\n                revealedWrongAnswers: [9],\n                currentTurn: 2,\n                timeLimit: 60\n              },\n              {\n                keywords: Array.from({length: 50}, (_, i) => \\`키워드\\${i+1}\\`),\n                myHints: [0, 5, 10, 15, 20],\n                answerCount: 5,\n                previousGuesses: [],\n                revealedAnswers: [25],\n                revealedWrongAnswers: [1, 2, 3, 4],\n                currentTurn: 1,\n                timeLimit: 60\n              }\n            ];\n            \n            let totalTime = 0;\n            const executionTimes = [];\n            \n            // 각 테스트 케이스를 10번씩 실행하여 평균 성능 측정\n            for (let i = 0; i < testCases.length; i++) {\n              const testCase = testCases[i];\n              \n              for (let j = 0; j < 10; j++) {\n                const startTime = performance.now();\n                const result = makeGuess(testCase);\n                const endTime = performance.now();\n                const execTime = endTime - startTime;\n                \n                executionTimes.push(execTime);\n                totalTime += execTime;\n                \n                // 기본 검증\n                if (!Array.isArray(result)) {\n                  throw new Error('반환값이 배열이 아닙니다');\n                }\n                \n                if (result.length !== testCase.answerCount) {\n                  throw new Error(\\`잘못된 개수의 선택 (기대: \\${testCase.answerCount}, 실제: \\${result.length})\\`);\n                }\n                \n                // 유효성 검사\n                for (const idx of result) {\n                  if (typeof idx !== 'number' || !Number.isInteger(idx)) {\n                    throw new Error(\\`유효하지 않은 인덱스: \\${idx}\\`);\n                  }\n                  if (idx < 0 || idx >= testCase.keywords.length) {\n                    throw new Error(\\`범위를 벗어난 인덱스: \\${idx}\\`);\n                  }\n                  if (testCase.myHints.includes(idx)) {\n                    throw new Error(\\`힌트로 받은 키워드를 선택했습니다 (인덱스: \\${idx})\\`);\n                  }\n                }\n                \n                // 중복 검사\n                const uniqueSet = new Set(result);\n                if (uniqueSet.size !== result.length) {\n                  throw new Error('중복된 선택이 있습니다');\n                }\n              }\n            }\n            \n            // 평균 실행 시간 계산\n            const avgTime = totalTime / executionTimes.length;\n            const maxTime = Math.max(...executionTimes);\n            const minTime = Math.min(...executionTimes);\n            \n            // 첫 번째 테스트의 결과를 샘플로 반환\n            const sampleResult = makeGuess(testCases[0]);\n            \n            return { \n              success: true, \n              result: sampleResult, \n              keywords: sampleResult.map(idx => testCases[0].keywords[idx]),\n              performance: {\n                avgTime: avgTime.toFixed(3),\n                minTime: minTime.toFixed(3),\n                maxTime: maxTime.toFixed(3),\n                totalRuns: executionTimes.length\n              }\n            };\n          } catch (error) {\n            return { success: false, error: error.message };\n          }\n        })()\n      `;\n\n      const startTime = Date.now();\n      let testResult;\n      \n      try {\n        testResult = eval(testCode);\n      } catch (e: any) {\n        testResult = { success: false, error: e.message };\n      }\n      \n      const executionTime = Date.now() - startTime;\n\n      if (testResult && testResult.success) {\n        const avgTime = parseFloat(testResult.performance.avgTime);\n        const speedLevel = avgTime < 0.5 ? '매우 빠름' : \n                          avgTime < 2 ? '빠름' : \n                          avgTime < 5 ? '보통' : '느림';\n        \n        const newResult = {\n          id: testResultIdCounter,\n          success: true,\n          message: `테스트 통과! AI 코드가 정상적으로 작동합니다.`,\n          details: {\n            executionTime: `${executionTime}ms`,\n            selectedKeywords: testResult.keywords.join(', '),\n            selectedIndices: testResult.result,\n            performance: testResult.performance,\n            speedLevel\n          }\n        };\n        setTestResultIdCounter(prev => prev + 1);\n        setTestResults(prev => [...prev, newResult]);\n        \n        // 2초 후 자동으로 사라지도록 설정\n        setTimeout(() => {\n          setTestResults(prev => prev.map(r => r.id === newResult.id ? { ...r, isFading: true } : r));\n          setTimeout(() => {\n            setTestResults(prev => prev.filter(r => r.id !== newResult.id));\n          }, 500);\n        }, 2000);\n      } else {\n        const newResult = {\n          id: testResultIdCounter,\n          success: false,\n          message: '테스트 실패',\n          details: { error: testResult?.error || '알 수 없는 오류' }\n        };\n        setTestResultIdCounter(prev => prev + 1);\n        setTestResults(prev => [...prev, newResult]);\n        \n        // 2초 후 자동으로 사라지도록 설정\n        setTimeout(() => {\n          setTestResults(prev => prev.map(r => r.id === newResult.id ? { ...r, isFading: true } : r));\n          setTimeout(() => {\n            setTestResults(prev => prev.filter(r => r.id !== newResult.id));\n          }, 500);\n        }, 2000);\n      }\n\n    } catch (error) {\n      const newResult = {\n        id: testResultIdCounter,\n        success: false,\n        message: '테스트 실행 중 오류가 발생했습니다',\n        details: { error: error instanceof Error ? error.message : String(error) }\n      };\n      setTestResultIdCounter(prev => prev + 1);\n      setTestResults(prev => [...prev, newResult]);\n      \n      setTimeout(() => {\n        setTestResults(prev => prev.map(r => r.id === newResult.id ? { ...r, isFading: true } : r));\n        setTimeout(() => {\n          setTestResults(prev => prev.filter(r => r.id !== newResult.id));\n        }, 500);\n      }, 2000);\n    } finally {\n      setIsTestRunning(false);\n    }\n  };\n\n  const exitGame = () => {\n    clearTimer();\n    // AI 타임아웃도 정리\n    if (aiTimeoutId) {\n      clearTimeout(aiTimeoutId);\n      setAiTimeoutId(null);\n    }\n    // GameManager 정리\n    if (gameManagerRef.current) {\n      gameManagerRef.current.stopGame();\n      gameManagerRef.current = null;\n    }\n    setCurrentScreen('mode-selection');\n    // 게임 상태 초기화\n    setGameState({\n      keywords: [],\n      answers: [],\n      playerHints: {},\n      isReady: false,\n      currentTurn: 0,\n      turnHistory: [],\n      gameStatus: 'playing',\n      revealedAnswers: [],\n      revealedWrongAnswers: [],\n      hintsViewed: {}\n    });\n    setSelectedKeywords([]);\n    setTimeRemaining(0);\n    setIsMyTurn(false);\n    setIsAIThinking(false);\n    setHintViewingPhase(false);\n    setCurrentViewingPlayer(0);\n    setIsSubmitting(false);\n  };\n\n  const handleGlobalHintsToggle = () => {\n    const newValue = !globalHintsEnabled;\n    setGlobalHintsEnabled(newValue);\n    \n    // Update GameManager if it exists and sync the game state\n    if (gameManagerRef.current) {\n      gameManagerRef.current.setGlobalHintsEnabled(newValue);\n      \n      // Get updated game context and sync revealedWrongAnswers\n      const updatedContext = gameManagerRef.current.getGameContext();\n      setGameState(prev => ({\n        ...prev,\n        revealedWrongAnswers: [...updatedContext.revealedWrongAnswers]\n      }));\n    }\n  };\n\n  const revealAnswerHint = () => {\n    if (gameManagerRef.current) {\n      const success = gameManagerRef.current.revealAnswer();\n      if (success) {\n        const context = gameManagerRef.current.getGameContext();\n        setGameState(prev => ({\n          ...prev,\n          revealedAnswers: context.revealedAnswers\n        }));\n      }\n    } else {\n      const unrevealedAnswers = gameState.answers.filter(ans => !gameState.revealedAnswers.includes(ans));\n      if (unrevealedAnswers.length > 0) {\n        const randomAnswer = unrevealedAnswers[Math.floor(Math.random() * unrevealedAnswers.length)];\n        setGameState(prev => ({\n          ...prev,\n          revealedAnswers: [...prev.revealedAnswers, randomAnswer]\n        }));\n      }\n    }\n  };\n\n  const revealWrongHint = () => {\n    if (gameManagerRef.current) {\n      const success = gameManagerRef.current.revealWrongAnswer();\n      if (success) {\n        const context = gameManagerRef.current.getGameContext();\n        setGameState(prev => ({\n          ...prev,\n          revealedWrongAnswers: context.revealedWrongAnswers\n        }));\n      }\n    } else {\n      const wrongAnswers = gameState.keywords\n        .map((_, index) => index)\n        .filter(index => !gameState.answers.includes(index) && !gameState.revealedWrongAnswers.includes(index));\n      \n      if (wrongAnswers.length > 0) {\n        const randomWrong = wrongAnswers[Math.floor(Math.random() * wrongAnswers.length)];\n        setGameState(prev => ({\n          ...prev,\n          revealedWrongAnswers: [...prev.revealedWrongAnswers, randomWrong]\n        }));\n      }\n    }\n  };\n\n  const toggleKeywordSelection = (keywordIndex: number) => {\n    setSelectedKeywords(prev => {\n      if (prev.includes(keywordIndex)) {\n        return prev.filter(index => index !== keywordIndex);\n      } else if (prev.length < gameConfig.answerCount) {\n        return [...prev, keywordIndex];\n      }\n      return prev;\n    });\n  };\n\n  const submitGuess = async () => {\n    if (selectedKeywords.length !== gameConfig.answerCount || isSubmitting) return;\n    \n    if (gameManagerRef.current) {\n      setIsSubmitting(true);\n      try {\n        await gameManagerRef.current.submitHumanGuess(selectedKeywords);\n        setSelectedKeywords([]);\n      } catch (error) {\n        console.error('Failed to submit guess:', error);\n      } finally {\n        setIsSubmitting(false);\n      }\n    } else {\n      submitGuessWithSelection(selectedKeywords);\n    }\n  };\n\n  const submitGuessWithSelection = (selection: number[]) => {\n    // GameManager를 사용하는 경우 이 함수를 사용하지 않음\n    if (gameManagerRef.current) return;\n    \n    if (isSubmitting) return;\n    \n    setIsSubmitting(true);\n    \n    // 타이머 정리 (새로운 타이머 시작 전에)\n    clearTimer();\n\n    const correctCount = selection.filter(index => \n      gameState.answers.includes(index)\n    ).length;\n\n    const isWinner = correctCount === gameConfig.answerCount && \n                     selection.every(index => gameState.answers.includes(index));\n\n    const currentPlayerId = ((gameState.currentTurn - 1) % players.length) + 1;\n    const currentPlayer = players.find(p => p.id === currentPlayerId);\n\n    // 실제 사용 시간 계산\n    const actualTimeUsed = turnStartTime ? Math.round((Date.now() - turnStartTime) / 1000) : gameConfig.timeLimit - timeRemaining;\n    \n    const turnResult: TurnResult = {\n      playerId: currentPlayerId,\n      playerName: currentPlayer?.nickname || `플레이어 ${currentPlayerId}`,\n      guess: [...selection],\n      guessKeywords: selection.map(index => gameState.keywords[index]),\n      correctCount,\n      turnNumber: gameState.currentTurn,\n      timeUsed: actualTimeUsed\n    };\n\n    // 최대 턴 수 확인\n    const isMaxTurnsReached = gameConfig.maxTurns && gameState.currentTurn >= gameConfig.maxTurns;\n    \n    setGameState(prev => ({\n      ...prev,\n      turnHistory: [...prev.turnHistory, turnResult],\n      currentTurn: prev.currentTurn + 1,\n      gameStatus: isWinner ? 'finished' : (isMaxTurnsReached ? 'finished' : 'playing'),\n      winner: isWinner ? currentPlayerId : undefined\n    }));\n\n    setSelectedKeywords([]);\n    \n    if (!isWinner && !isMaxTurnsReached) {\n      // 다음 턴을 위해 타이머 재시작\n      setTimeout(() => {\n        startTimer();\n      }, 100);\n    }\n    \n    // 제출 상태 리셋\n    setTimeout(() => {\n      setIsSubmitting(false);\n    }, 500);\n  };\n\n  const getCurrentPlayer = () => {\n    if (gameManagerRef.current) {\n      const currentPlayer = gameManagerRef.current.getCurrentPlayer();\n      if (currentPlayer) {\n        const playerInfo = currentPlayer.getInfo();\n        return players.find(p => p.id === playerInfo.id);\n      }\n    }\n    const currentPlayerId = ((gameState.currentTurn - 1) % players.length) + 1;\n    return players.find(p => p.id === currentPlayerId);\n  };\n\n  const isGameOver = () => {\n    return gameState.gameStatus === 'finished' || \n           (gameConfig.maxTurns && gameState.currentTurn > gameConfig.maxTurns);\n  };\n\n  const difficultyPresets = {\n    beginner: { keywordPoolSize: 30, answerCount: 3, hintCount: 5, timeLimit: 90, maxTurns: 15 },\n    intermediate: { keywordPoolSize: 50, answerCount: 5, hintCount: 5, timeLimit: 60, maxTurns: 20 },\n    advanced: { keywordPoolSize: 80, answerCount: 7, hintCount: 4, timeLimit: 45, maxTurns: 25 }\n  };\n\n  const applyPreset = (difficulty: 'beginner' | 'intermediate' | 'advanced') => {\n    const preset = difficultyPresets[difficulty];\n    setGameConfig({ ...preset, difficulty });\n  };\n\n  const updateGameConfig = (updates: Partial<GameConfig>) => {\n    setGameConfig(prev => ({ ...prev, ...updates, difficulty: 'custom' }));\n  };\n\n  // 컴포넌트 언마운트 시 타이머 정리\n  useEffect(() => {\n    return () => {\n      clearTimer();\n      if (aiTimeoutId) {\n        clearTimeout(aiTimeoutId);\n      }\n    };\n  }, []);\n\n  const renderCodeEditorModal = () => {\n    if (!codeEditorModal.isOpen || !codeEditorModal.playerId) return null;\n    \n    const player = players.find(p => p.id === codeEditorModal.playerId);\n    if (!player) return null;\n\n    return (\n      <div className=\"modal-overlay\" onClick={() => {\n        setCodeEditorModal({ isOpen: false, playerId: null });\n        setIsModalExpanded(false);\n      }}>\n        <div className={`modal-content code-editor-modal ${isModalExpanded ? 'expanded' : ''}`} onClick={(e) => e.stopPropagation()}>\n          <div className=\"modal-header\">\n            <h3>{player.nickname} AI 코드 에디터</h3>\n            <div className=\"modal-header-actions\">\n              <button \n                className=\"modal-expand-btn\"\n                onClick={() => setIsModalExpanded(!isModalExpanded)}\n                title={isModalExpanded ? \"기본 크기로\" : \"전체 화면 모드\"}\n              >\n                {isModalExpanded ? '↙' : '↗'}\n              </button>\n              <button \n                className=\"modal-close\"\n                onClick={() => {\n                  setCodeEditorModal({ isOpen: false, playerId: null });\n                  setIsModalExpanded(false);\n                }}\n              >\n                ×\n              </button>\n            </div>\n          </div>\n          \n          <div className=\"code-editor-container\" style={{ position: 'relative' }}>\n            <AIGuidePanel \n              isExpanded={isGuideExpanded} \n              onToggle={() => setIsGuideExpanded(!isGuideExpanded)}\n              onInsertTemplate={(template) => {\n                updatePlayer(player.id, { aiCode: template });\n              }}\n            />\n            <div className=\"editor-toolbar\">\n              <div className=\"editor-left\">\n                <span className=\"editor-info\">코드 작성</span>\n                <div className=\"language-selector\">\n                  <button\n                    className={`lang-btn ${player.aiLanguage === 'javascript' ? 'active' : ''}`}\n                    onClick={() => updatePlayer(player.id, { aiLanguage: 'javascript' })}\n                  >\n                    JavaScript\n                  </button>\n                  <button\n                    className={`lang-btn ${player.aiLanguage === 'typescript' ? 'active' : ''}`}\n                    onClick={() => updatePlayer(player.id, { aiLanguage: 'typescript' })}\n                  >\n                    TypeScript\n                  </button>\n                </div>\n              </div>\n              <div className=\"editor-actions\">\n                <button \n                  className=\"btn btn-small\"\n                  onClick={() => {\n                    updatePlayer(player.id, { aiCode: '' });\n                    setTestResults([]);\n                  }}\n                >\n                  초기화\n                </button>\n                <button \n                  className=\"btn btn-small\"\n                  onClick={() => {\n                    const exampleCode = player.aiLanguage === 'typescript' \n                      ? `// AI 전략 함수 (TypeScript)\ninterface GameState {\n  keywords: string[];\n  myHints: number[];\n  answerCount: number;\n  previousGuesses: { playerId: number; guess: number[]; correctCount: number }[];\n  revealedAnswers: number[];\n  revealedWrongAnswers: number[];\n  currentTurn: number;\n  timeLimit: number;\n}\n\nfunction makeGuess(gameState: GameState): number[] {\n  const { keywords, myHints, previousGuesses, revealedAnswers, revealedWrongAnswers, answerCount } = gameState;\n  \n  // 가능한 키워드 인덱스 목록 (힌트와 공개된 오답 제외)\n  const availableIndices: number[] = keywords\n    .map((_, index) => index)\n    .filter(idx => !revealedWrongAnswers.includes(idx) && !myHints.includes(idx));\n  \n  // 이미 공개된 정답 우선 선택\n  const selectedIndices: number[] = [...revealedAnswers];\n  \n  // 나머지는 랜덤 선택\n  while (selectedIndices.length < answerCount) {\n    const remaining = availableIndices.filter(idx => !selectedIndices.includes(idx));\n    if (remaining.length === 0) break;\n    \n    const randomIdx = remaining[Math.floor(Math.random() * remaining.length)];\n    selectedIndices.push(randomIdx);\n  }\n  \n  return selectedIndices;\n}`\n                      : `// AI 전략 함수 (JavaScript)\nfunction makeGuess(gameState) {\n  const { keywords, myHints, previousGuesses, revealedAnswers, revealedWrongAnswers, answerCount } = gameState;\n  \n  // 가능한 키워드 인덱스 목록 (힌트와 공개된 오답 제외)\n  const availableIndices = keywords\n    .map((_, index) => index)\n    .filter(idx => !revealedWrongAnswers.includes(idx) && !myHints.includes(idx));\n  \n  // 이미 공개된 정답 우선 선택\n  const selectedIndices = [...revealedAnswers];\n  \n  // 나머지는 랜덤 선택\n  while (selectedIndices.length < answerCount) {\n    const remaining = availableIndices.filter(idx => !selectedIndices.includes(idx));\n    if (remaining.length === 0) break;\n    \n    const randomIdx = remaining[Math.floor(Math.random() * remaining.length)];\n    selectedIndices.push(randomIdx);\n  }\n  \n  return selectedIndices;\n}`;\n                    updatePlayer(player.id, { aiCode: exampleCode });\n                  }}\n                >\n                  예제 코드\n                </button>\n                <button \n                  className=\"btn btn-small btn-test\"\n                  onClick={() => {\n                    if (player.aiCode) {\n                      runAICodeTest(player.aiCode, player.aiLanguage || 'javascript');\n                    }\n                  }}\n                  disabled={!player.aiCode || isTestRunning}\n                >\n                  {isTestRunning ? (\n                    <>\n                      테스트 중<span className=\"loading-dots\"></span>\n                    </>\n                  ) : (\n                    '테스트 실행'\n                  )}\n                </button>\n              </div>\n            </div>\n            \n            <div className=\"editor-wrapper\">\n              <div className=\"line-numbers\" onScroll={(e) => {\n                const textarea = e.currentTarget.nextElementSibling as HTMLTextAreaElement;\n                if (textarea) textarea.scrollTop = e.currentTarget.scrollTop;\n              }}>\n                {((player.aiCode || '') + '\\n').split('\\n').map((_, index) => (\n                  <div key={index} className=\"line-number\">{index + 1}</div>\n                ))}\n              </div>\n              <textarea\n                className=\"code-editor\"\n                value={player.aiCode || ''}\n                onChange={(e) => updatePlayer(player.id, { aiCode: e.target.value })}\n                onScroll={(e) => {\n                  const lineNumbers = e.currentTarget.previousElementSibling as HTMLDivElement;\n                  if (lineNumbers) lineNumbers.scrollTop = e.currentTarget.scrollTop;\n                }}\n                placeholder={player.aiLanguage === 'typescript' \n                  ? \"// TypeScript AI 전략 코드를 작성하세요\\n// 타입 정의와 함께 작성해주세요\"\n                  : \"// JavaScript AI 전략 코드를 작성하세요\\n// function makeGuess(gameState) { ... }\"\n                }\n                spellCheck={false}\n              />\n            </div>\n            \n            <div className=\"test-results-container\">\n              {testResults.map((result) => (\n                <div \n                  key={result.id}\n                  className={`test-result-panel ${result.success ? 'success' : 'error'} ${result.isFading ? 'fade-out' : ''}`}\n                >\n                  <div className=\"test-result-header\">\n                    <h4>\n                      {result.success ? (\n                        <><span className=\"success-icon\"></span>테스트 성공</>\n                      ) : (\n                        <><span className=\"error-icon\"></span>테스트 실패</>\n                      )}\n                    </h4>\n                    <button \n                      className=\"close-result\"\n                      onClick={() => {\n                        setTestResults(prev => prev.filter(r => r.id !== result.id));\n                      }}\n                    >\n                      ×\n                    </button>\n                  </div>\n                  <p className=\"test-result-message\">{result.message}</p>\n                  {result.details && (\n                    <div className=\"test-result-details\">\n                      {result.success ? (\n                        <>\n                          <div>샘플 선택: {result.details.selectedKeywords}</div>\n                          {result.details.performance && (\n                            <>\n                              <div style={{ marginTop: '10px', borderTop: '1px solid rgba(255,255,255,0.2)', paddingTop: '10px' }}>\n                                <strong>성능 측정 결과</strong>\n                              </div>\n                              <div style={{ marginTop: '5px' }}>\n                                평균 실행 시간: {result.details.performance.avgTime}ms ({result.details.speedLevel})\n                              </div>\n                              <div>\n                                최소/최대: {result.details.performance.minTime}ms / {result.details.performance.maxTime}ms\n                              </div>\n                              <div style={{ fontSize: '0.85em', color: 'rgba(255,255,255,0.7)', marginTop: '5px' }}>\n                                * 30회 실행 (3가지 크기의 데이터 × 10회)\n                              </div>\n                            </>\n                          )}\n                        </>\n                      ) : (\n                        <pre>{JSON.stringify(result.details, null, 2)}</pre>\n                      )}\n                    </div>\n                  )}\n                </div>\n              ))}\n            </div>\n            \n            <div className=\"editor-footer\">\n              <div className=\"code-stats\">\n                <span>줄: {(player.aiCode || '').split('\\n').length}</span>\n                <span>문자: {(player.aiCode || '').length}</span>\n              </div>\n              <button \n                className=\"btn-large btn-primary\"\n                onClick={() => {\n                  setCodeEditorModal({ isOpen: false, playerId: null });\n                  setIsModalExpanded(false);\n                  setTestResults([]);\n                }}\n              >\n                저장\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const renderModeSelection = () => (\n    <div className=\"game-screen mode-selection\">\n      <div className=\"guide-link-container\">\n        <button onClick={() => setIsGuideModalOpen(true)} className=\"guide-link\">?<span>게임 방법</span></button>\n      </div>\n      <h2 style={{ marginTop: '60px' }}>게임 모드를 선택하세요</h2>\n      <div className=\"mode-cards\">\n        <div className=\"mode-card\" onClick={() => handleModeSelect('solo')}>\n          <h3>개인전</h3>\n          <p>AI와 1:1 대결하는 모드입니다.<br/>난이도를 선택할 수 있어요.</p>\n        </div>\n        <div className=\"mode-card\" onClick={() => handleModeSelect('multi')}>\n          <h3>멀티플레이</h3>\n          <p>2~6명이 함께 플레이하는 모드입니다.<br/>친구들과 함께 즐겨보세요.</p>\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderDifficultySelection = () => (\n    <div className=\"game-screen difficulty-selection\">\n      <div className=\"back-button-container\">\n        <button \n          className=\"btn-large btn-secondary\" \n          onClick={() => setCurrentScreen('mode-selection')}\n        >\n          ← 뒤로가기\n        </button>\n      </div>\n      \n      <h2>AI 난이도를 선택하세요</h2>\n      <div className=\"difficulty-cards\">\n        <div className=\"difficulty-card\" onClick={() => handleDifficultySelect('easy')}>\n          <h3>🌱 쉬움</h3>\n          <p>AI가 무작위로 키워드를 선택합니다.<br/>편안하게 게임을 즐기세요.</p>\n        </div>\n        <div className=\"difficulty-card\" onClick={() => handleDifficultySelect('medium')}>\n          <h3>🌿 보통</h3>\n          <p>AI가 공개된 정답을 활용합니다.<br/>적당한 도전을 원한다면 선택하세요.</p>\n        </div>\n        <div className=\"difficulty-card\" onClick={() => handleDifficultySelect('hard')}>\n          <h3>🌳 어려움</h3>\n          <p>AI가 이전 추측을 분석합니다.<br/>진정한 실력을 시험해보세요.</p>\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderPlayerSetup = () => (\n    <div className=\"game-screen\">\n      <div className=\"back-button-container\">\n        <button \n          className=\"btn-large btn-secondary\" \n          onClick={() => setCurrentScreen(gameMode === 'solo' ? 'difficulty-selection' : 'mode-selection')}\n        >\n          ← 뒤로가기\n        </button>\n      </div>\n\n      {gameMode === 'multi' && players.length === 0 && (\n        <div className=\"form-section\" style={{ marginTop: '60px' }}>\n          <h2 style={{ textAlign: 'center' }}>플레이어 수를 선택하세요</h2>\n          <div className=\"btn-group\" style={{ justifyContent: 'center', marginTop: '40px' }}>\n            {[2, 3, 4, 5, 6].map(num => (\n              <button\n                key={num}\n                className=\"btn-large btn-secondary\"\n                onClick={() => handlePlayerCountSelect(num)}\n              >\n                {num}명\n              </button>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {players.length > 0 && (\n        <>\n          <h2 style={{ textAlign: 'center', marginTop: '60px' }}>{gameMode === 'solo' ? '플레이어 설정' : `${playerCount}명 플레이어 설정`}</h2>\n          <div className=\"players-grid\">\n            {players.filter(player => gameMode === 'solo' ? player.id === 1 : true).map((player) => (\n              <div key={player.id} className=\"player-setup\">\n                <h4>{gameMode === 'solo' ? '플레이어' : `플레이어 ${player.id}`}</h4>\n                \n                <div className=\"form-section\">\n                  <input\n                    type=\"text\"\n                    className=\"input-field\"\n                    placeholder=\"닉네임을 입력하세요\"\n                    value={player.nickname}\n                    onChange={(e) => updatePlayer(player.id, { nickname: e.target.value })}\n                    maxLength={20}\n                  />\n                </div>\n\n                {(gameMode === 'multi' || (gameMode === 'solo' && player.id === 1)) && (\n                  <div className=\"form-section\">\n                    <div className=\"radio-group\">\n                      <div \n                        className=\"radio-option\"\n                        onClick={() => updatePlayer(player.id, { type: 'human', aiCode: '' })}\n                      >\n                        <input\n                          type=\"radio\"\n                          id={`human-${player.id}`}\n                          name={`playerType-${player.id}`}\n                          value=\"human\"\n                          checked={player.type === 'human'}\n                          onChange={() => updatePlayer(player.id, { type: 'human', aiCode: '' })}\n                        />\n                        <label htmlFor={`human-${player.id}`}>인간</label>\n                      </div>\n                      <div \n                        className=\"radio-option\"\n                        onClick={() => {\n                          updatePlayer(player.id, { type: 'custom-ai' });\n                          setCodeEditorModal({ isOpen: true, playerId: player.id });\n                        }}\n                      >\n                        <input\n                          type=\"radio\"\n                          id={`ai-${player.id}`}\n                          name={`playerType-${player.id}`}\n                          value=\"custom-ai\"\n                          checked={player.type === 'custom-ai'}\n                          onChange={() => {\n                            updatePlayer(player.id, { type: 'custom-ai' });\n                            setCodeEditorModal({ isOpen: true, playerId: player.id });\n                          }}\n                        />\n                        <label htmlFor={`ai-${player.id}`}>{gameMode === 'solo' ? '커스텀 AI' : 'AI'}</label>\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                {player.type === 'custom-ai' && (\n                  <div className=\"form-section\">\n                    <button\n                      className=\"btn-large btn-ai-code\"\n                      onClick={() => setCodeEditorModal({ isOpen: true, playerId: player.id })}\n                      style={{ width: '100%' }}\n                    >\n                      <span className=\"btn-ai-icon\">&lt;/&gt;</span>\n                      <span>{player.aiCode ? 'AI 코드 수정' : 'AI 코드 작성'}</span>\n                    </button>\n                    {player.aiCode && (\n                      <div className=\"code-preview\">\n                        <small>코드가 작성되었습니다 ({player.aiCode.split('\\n').length}줄)</small>\n                      </div>\n                    )}\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n\n          <div className=\"setup-actions\">\n            <button\n              className=\"btn-large btn-primary\"\n              onClick={handleStartGame}\n              disabled={!canStartGame()}\n            >\n              게임 시작\n            </button>\n          </div>\n        </>\n      )}\n    </div>\n  );\n\n  const renderGameConfig = () => (\n    <div className=\"game-screen\">\n      <div className=\"back-button-container\">\n        <button \n          className=\"btn-large btn-secondary\" \n          onClick={() => setCurrentScreen('player-setup')}\n        >\n          ← 뒤로가기\n        </button>\n      </div>\n\n      <h2 style={{ textAlign: 'center' }}>게임 설정</h2>\n      \n      {/* 난이도 프리셋 */}\n      <div className=\"form-section\">\n        <h3 style={{ textAlign: 'center' }}>난이도 프리셋</h3>\n        <div className=\"btn-group\" style={{ justifyContent: 'center', flexWrap: 'wrap' }}>\n          <button\n            className={`btn-large ${gameConfig.difficulty === 'beginner' ? 'btn-primary' : 'btn-secondary'}`}\n            onClick={() => applyPreset('beginner')}\n          >\n            초급\n          </button>\n          <button\n            className={`btn-large ${gameConfig.difficulty === 'intermediate' ? 'btn-primary' : 'btn-secondary'}`}\n            onClick={() => applyPreset('intermediate')}\n          >\n            중급\n          </button>\n          <button\n            className={`btn-large ${gameConfig.difficulty === 'advanced' ? 'btn-primary' : 'btn-secondary'}`}\n            onClick={() => applyPreset('advanced')}\n          >\n            고급\n          </button>\n        </div>\n      </div>\n\n      {/* 상세 설정 */}\n      <div className=\"config-grid\">\n        <div className=\"config-item\">\n          <h4>키워드 풀 크기</h4>\n          <p>전체 키워드 개수</p>\n          <div className=\"number-input-group\">\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ keywordPoolSize: Math.max(20, gameConfig.keywordPoolSize - 10) })}\n            >\n              -\n            </button>\n            <span className=\"number-display\">{gameConfig.keywordPoolSize}개</span>\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ keywordPoolSize: Math.min(100, gameConfig.keywordPoolSize + 10) })}\n            >\n              +\n            </button>\n          </div>\n        </div>\n\n        <div className=\"config-item\">\n          <h4>정답 개수</h4>\n          <p>찾아야 할 정답 수</p>\n          <div className=\"number-input-group\">\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ answerCount: Math.max(2, gameConfig.answerCount - 1) })}\n            >\n              -\n            </button>\n            <span className=\"number-display\">{gameConfig.answerCount}개</span>\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ answerCount: Math.min(15, gameConfig.answerCount + 1) })}\n            >\n              +\n            </button>\n          </div>\n        </div>\n\n        <div className=\"config-item\">\n          <h4>힌트 개수</h4>\n          <p>각 플레이어별 오답 힌트</p>\n          <div className=\"number-input-group\">\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ hintCount: Math.max(2, gameConfig.hintCount - 1) })}\n            >\n              -\n            </button>\n            <span className=\"number-display\">{gameConfig.hintCount}개</span>\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ hintCount: Math.min(20, gameConfig.hintCount + 1) })}\n            >\n              +\n            </button>\n          </div>\n        </div>\n\n        <div className=\"config-item\">\n          <h4>턴 제한시간</h4>\n          <p>각 턴당 시간</p>\n          <div className=\"number-input-group\">\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ timeLimit: Math.max(15, gameConfig.timeLimit - 15) })}\n            >\n              -\n            </button>\n            <span className=\"number-display\">{gameConfig.timeLimit}초</span>\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ timeLimit: Math.min(180, gameConfig.timeLimit + 15) })}\n            >\n              +\n            </button>\n          </div>\n        </div>\n\n        <div className=\"config-item\">\n          <h4>최대 턴 수</h4>\n          <p>게임 종료 조건</p>\n          <div className=\"number-input-group\">\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ maxTurns: gameConfig.maxTurns ? Math.max(5, gameConfig.maxTurns - 5) : 15 })}\n            >\n              -\n            </button>\n            <span className=\"number-display\">{gameConfig.maxTurns ? `${gameConfig.maxTurns}턴` : '무제한'}</span>\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ maxTurns: gameConfig.maxTurns ? Math.min(50, gameConfig.maxTurns + 5) : 20 })}\n            >\n              +\n            </button>\n          </div>\n          <button \n            className=\"btn btn-small\" \n            onClick={() => updateGameConfig({ maxTurns: gameConfig.maxTurns ? undefined : 20 })}\n            style={{ marginTop: '10px' }}\n          >\n            {gameConfig.maxTurns ? '무제한으로 변경' : '제한 설정'}\n          </button>\n        </div>\n      </div>\n\n      {/* 현재 난이도 표시 */}\n      <div className=\"difficulty-indicator\">\n        <span>현재 난이도: <strong>{\n          gameConfig.difficulty === 'beginner' ? '초급' :\n          gameConfig.difficulty === 'intermediate' ? '중급' :\n          gameConfig.difficulty === 'advanced' ? '고급' : '커스텀'\n        }</strong></span>\n      </div>\n\n      <div className=\"setup-actions\">\n        <button\n          className=\"btn-large btn-primary\"\n          onClick={handleConfigComplete}\n        >\n          설정 완료\n        </button>\n      </div>\n    </div>\n  );\n\n  const renderGamePreparation = () => {\n    const preparationSteps = [\n      { title: '⚙️ 게임 초기화', description: '게임 환경을 설정하고 있습니다.' },\n      { title: '📚 키워드 생성', description: `${gameConfig.keywordPoolSize}개의 키워드를 생성하고 있습니다.` },\n      { title: '🎯 정답 선택', description: `${gameConfig.answerCount}개의 정답을 무작위로 선택하고 있습니다.` },\n      { title: '💡 힌트 배포', description: '각 플레이어에게 오답 힌트를 배포하고 있습니다.' },\n      { title: '✅ 최종 확인', description: '게임 준비를 완료하고 있습니다.' }\n    ];\n\n    return (\n      <div className=\"game-screen\">\n        {preparationStep < 5 ? (\n          <>\n            <h2>게임 준비 중<span className=\"loading-dots\"></span></h2>\n            <div className=\"preparation-progress\">\n              <div className=\"progress-steps\">\n                {preparationSteps.map((step, index) => (\n                  <div \n                    key={index} \n                    className={`progress-step ${index < preparationStep ? 'completed' : index === preparationStep ? 'active' : 'pending'}`}\n                  >\n                    <div className=\"step-circle\">\n                      <span className=\"step-number\">{index + 1}</span>\n                      {index < preparationStep ? (\n                        <span className=\"success-icon-overlay\"></span>\n                      ) : index === preparationStep ? (\n                        <span className=\"loading-spinner\"></span>\n                      ) : null}\n                    </div>\n                    <div className=\"step-content\">\n                      <h4>{step.title}</h4>\n                      <p>{step.description}</p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n              \n              <div className=\"progress-bar-container\">\n                <div \n                  className=\"progress-bar-fill\" \n                  style={{ width: `${(preparationStep / 5) * 100}%` }}\n                />\n              </div>\n            </div>\n          </>\n        ) : (\n          <>\n            <h2>게임 준비 완료!</h2>\n            <div className=\"game-summary\">\n              <div className=\"summary-grid\">\n                <div className=\"summary-item\">\n                  <h4>참가자</h4>\n                  <div className=\"player-chips\">\n                    {players.map(player => (\n                      <span key={player.id} className=\"player-chip\">\n                        {player.nickname} ({player.type === 'built-in-ai' ? 'AI' : player.type === 'custom-ai' ? 'Custom AI' : '인간'})\n                      </span>\n                    ))}\n                  </div>\n                </div>\n                \n                <div className=\"summary-item\">\n                  <h4>게임 정보</h4>\n                  <div className=\"game-info-grid\">\n                    <div>키워드 풀: <strong>{gameConfig.keywordPoolSize}개</strong></div>\n                    <div>정답 개수: <strong>{gameConfig.answerCount}개</strong></div>\n                    <div>힌트 개수: <strong>{gameConfig.hintCount}개</strong></div>\n                    <div>턴 시간: <strong>{gameConfig.timeLimit}초</strong></div>\n                    <div>최대 턴: <strong>{gameConfig.maxTurns || '무제한'}</strong></div>\n                  </div>\n                </div>\n\n              </div>\n              \n              <div className=\"game-start-section\">\n                <div className=\"countdown-info\">\n                  <h3>모든 준비가 완료되었습니다!</h3>\n                  <p>게임을 시작하시겠습니까?</p>\n                </div>\n                \n                <div className=\"setup-actions\" style={{ justifyContent: 'flex-start' }}>\n                  <button \n                    className=\"btn-large btn-secondary\" \n                    onClick={() => setCurrentScreen('game-config')}\n                  >\n                    ← 설정 변경\n                  </button>\n                  <button \n                    className=\"btn-large btn-primary\" \n                    onClick={startActualGame}\n                  >\n                    게임 시작! 🎮\n                  </button>\n                </div>\n              </div>\n            </div>\n          </>\n        )}\n      </div>\n    );\n  };\n\n  const renderGameScreen = () => {\n    const currentPlayer = getCurrentPlayer();\n    const isGameFinished = isGameOver();\n\n    // 힌트 보기 단계\n    if (hintViewingPhase) {\n      const viewingPlayer = players.find(p => p.id === currentViewingPlayer);\n      const hasViewedHints = gameState.hintsViewed[currentViewingPlayer];\n      \n      // AI 플레이어는 건너뛰기\n      if (viewingPlayer?.type === 'built-in-ai') {\n        const nextPlayer = currentViewingPlayer + 1;\n        if (nextPlayer <= players.length) {\n          setTimeout(() => setCurrentViewingPlayer(nextPlayer), 0);\n        } else {\n          setHintViewingPhase(false);\n          if (gameManagerRef.current) {\n            gameManagerRef.current.startGame(\n              gameState.keywords,\n              gameState.answers,\n              gameState.playerHints\n            );\n          } else {\n            // GameManager 없이 게임 시작 시 타이머 시작\n            setTimeout(() => {\n              setGameState(prev => ({\n                ...prev,\n                currentTurn: 1\n              }));\n              startTimer();\n            }, 100);\n          }\n        }\n        return null;\n      }\n\n      return (\n        <div className=\"game-screen\">\n          <div className=\"hint-viewing-phase\">\n            <div className=\"exit-button-container\">\n              <button \n                className=\"btn btn-exit-small\"\n                onClick={exitGame}\n              >\n                게임 종료\n              </button>\n            </div>\n            <h2>힌트 확인 단계</h2>\n            <div className=\"viewing-instructions\">\n              <h3>{viewingPlayer?.nickname}님의 차례입니다</h3>\n              <p>다른 플레이어는 화면을 보지 마세요!</p>\n              \n              {!hasViewedHints ? (\n                <div className=\"hint-reveal\">\n                  <p>아래 버튼을 눌러 본인만의 힌트를 확인하세요.</p>\n                  <button \n                    className=\"btn-large btn-primary\"\n                    onClick={() => setGameState(prev => ({\n                      ...prev,\n                      hintsViewed: { ...prev.hintsViewed, [currentViewingPlayer]: true }\n                    }))}\n                  >\n                    내 힌트 보기\n                  </button>\n                </div>\n              ) : (\n                <div className=\"hint-display\">\n                  <h4>내 힌트 (이 키워드들은 정답이 아닙니다)</h4>\n                  <div className=\"hint-chips\">\n                    {gameState.playerHints[currentViewingPlayer]?.map(hintIndex => (\n                      <span key={hintIndex} className=\"hint-chip\">\n                        {gameState.keywords[hintIndex]}\n                      </span>\n                    ))}\n                  </div>\n                  <p>힌트를 기억하고 다음 버튼을 눌러주세요.</p>\n                  <button \n                    className=\"btn-large btn-secondary\"\n                    onClick={() => {\n                      const nextPlayer = currentViewingPlayer + 1;\n                      if (nextPlayer <= players.length) {\n                        setCurrentViewingPlayer(nextPlayer);\n                      } else {\n                        setHintViewingPhase(false);\n                        // GameManager로 게임 시작\n                        if (gameManagerRef.current) {\n                          gameManagerRef.current.startGame(\n                            gameState.keywords,\n                            gameState.answers,\n                            gameState.playerHints\n                          );\n                        } else {\n                          // GameManager 없이 게임 시작 시 타이머 시작\n                          setTimeout(() => {\n                            setGameState(prev => ({\n                              ...prev,\n                              currentTurn: 1\n                            }));\n                            startTimer();\n                          }, 100);\n                        }\n                      }\n                    }}\n                  >\n                    확인 완료\n                  </button>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    if (isGameFinished) {\n      return (\n        <div className=\"game-screen\">\n          <div className=\"game-over\">\n            <h2>게임 종료!</h2>\n            {gameState.winner ? (\n              <div className=\"winner-announcement\">\n                <div className=\"victory-icon\"></div>\n                <h3>{players.find(p => p.id === gameState.winner)?.nickname}님이 승리했습니다!</h3>\n                <p>축하합니다! 정답을 모두 맟추셨습니다.</p>\n              </div>\n            ) : (\n              <div className=\"draw-announcement\">\n                <h3>무승부</h3>\n                <p>최대 턴 수에 도달했습니다.</p>\n              </div>\n            )}\n            \n            <div className=\"final-answers\">\n              <h4>정답은:</h4>\n              <div className=\"answer-list\">\n                {gameState.answers.map(answerIndex => (\n                  <span key={answerIndex} className=\"answer-chip\">\n                    {gameState.keywords[answerIndex]}\n                  </span>\n                ))}\n              </div>\n            </div>\n\n            <div className=\"game-history\">\n              <h4>게임 기록</h4>\n              <div className=\"history-list\">\n                {gameState.turnHistory.map((turn, index) => (\n                  <div key={index} className=\"history-item\">\n                    <div className=\"turn-info\">\n                      <strong>턴 {turn.turnNumber}</strong> - {turn.playerName}\n                    </div>\n                    <div className=\"turn-keywords\">\n                      선택: {turn.guessKeywords.join(', ')}\n                    </div>\n                    <div className=\"turn-result\">\n                      {turn.correctCount}/{gameConfig.answerCount} 정답 ({turn.timeUsed}초 소요)\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            <div className=\"setup-actions\">\n              <button \n                className=\"btn-large btn-secondary\" \n                onClick={() => setCurrentScreen('mode-selection')}\n              >\n                새 게임\n              </button>\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"game-screen game-playing\">\n        {/* 게임 상태 헤더 */}\n        <div className=\"game-header-info\">\n          <div className=\"turn-info\">\n            <h3>턴 {gameState.currentTurn}{gameConfig.maxTurns && ` / ${gameConfig.maxTurns}`}</h3>\n            <p>\n              {currentPlayer?.nickname}의 차례\n              {isAIThinking && (\n                <span className=\"ai-thinking\">\n                  생각하는 중<span className=\"loading-dots\"></span>\n                </span>\n              )}\n            </p>\n          </div>\n          <div className=\"header-controls\">\n            <div className=\"timer\">\n              <div className={`time-display ${timeRemaining <= 10 ? 'warning' : ''}`}>\n                {timeRemaining}초\n              </div>\n              <div className=\"timer-bar\">\n                <div \n                  className=\"timer-fill\" \n                  style={{ \n                    width: `${(timeRemaining / gameConfig.timeLimit) * 100}%`,\n                    backgroundColor: timeRemaining <= 10 ? '#FF5722' : \n                                   timeRemaining <= 30 ? '#FFC107' : '#4CAF50'\n                  }}\n                />\n              </div>\n            </div>\n            <button \n              className=\"btn btn-exit\"\n              onClick={exitGame}\n              title=\"게임 종료\"\n            >\n              나가기\n            </button>\n          </div>\n        </div>\n\n        <div className=\"game-layout\">\n          {/* 왼쪽: 키워드 그리드 */}\n          <div className=\"game-main\">\n            <div className=\"keyword-selection\">\n              <h4>키워드를 선택하세요 ({selectedKeywords.length}/{gameConfig.answerCount})</h4>\n              <div className=\"keywords-grid\">\n                {gameState.keywords.map((keyword, index) => {\n                  const isSelected = selectedKeywords.includes(index);\n                  const isRevealedAnswer = gameState.revealedAnswers.includes(index);\n                  const isRevealedWrong = gameState.revealedWrongAnswers.includes(index);\n                  \n                  return (\n                    <button\n                      key={index}\n                      className={`keyword-btn ${isSelected ? 'selected' : ''} ${isRevealedAnswer ? 'revealed-answer' : ''} ${isRevealedWrong ? 'revealed-wrong' : ''}`}\n                      onClick={() => toggleKeywordSelection(index)}\n                      disabled={isSubmitting || isAIThinking || !isMyTurn}\n                    >\n                      {keyword}\n                      {isRevealedAnswer && <span className=\"reveal-indicator\">✓</span>}\n                      {isRevealedWrong && <span className=\"reveal-indicator\">❌</span>}\n                    </button>\n                  );\n                })}\n              </div>\n            </div>\n\n            <div className=\"guess-controls\">\n              <div className=\"selected-display\">\n                <h5>선택된 키워드:</h5>\n                <div className=\"selected-keywords\">\n                  {selectedKeywords.map(index => (\n                    <span key={index} className=\"selected-chip\">\n                      {gameState.keywords[index]}\n                    </span>\n                  ))}\n                </div>\n              </div>\n              \n              <div className=\"control-buttons\">\n                <button \n                  className=\"btn-large btn-secondary\"\n                  onClick={() => setSelectedKeywords([])}\n                  disabled={selectedKeywords.length === 0}\n                >\n                  선택 초기화\n                </button>\n                <button \n                  className=\"btn-large btn-primary\"\n                  onClick={submitGuess}\n                  disabled={selectedKeywords.length !== gameConfig.answerCount || isSubmitting}\n                >\n                  추측 제출\n                </button>\n              </div>\n            </div>\n          </div>\n\n          {/* 오른쪽: 게임 정보 */}\n          <div className=\"game-sidebar\">\n            <div className=\"global-hints\">\n              <h4>게임 힌트</h4>\n              <div className=\"global-hints-toggle\">\n                <label className=\"toggle-label\">\n                  <input\n                    type=\"checkbox\"\n                    checked={globalHintsEnabled}\n                    onChange={handleGlobalHintsToggle}\n                    className=\"toggle-checkbox\"\n                  />\n                  <span className=\"toggle-switch\"></span>\n                  <span className=\"toggle-text\">\n                    글로벌 힌트 {globalHintsEnabled ? '켜짐' : '꺼짐'}\n                  </span>\n                </label>\n                <small className=\"toggle-description\">\n                  모든 선택이 오답일 경우 자동으로 오답 표시\n                </small>\n              </div>\n              <div className=\"hint-buttons\">\n                <button \n                  className=\"btn btn-hint\"\n                  onClick={revealAnswerHint}\n                  disabled={gameState.answers.length === gameState.revealedAnswers.length}\n                >\n                  정답 1개 공개\n                </button>\n                <button \n                  className=\"btn btn-hint\"\n                  onClick={revealWrongHint}\n                >\n                  오답 1개 공개\n                </button>\n              </div>\n              <div className=\"revealed-info\">\n                {gameState.revealedAnswers.length > 0 && (\n                  <div>\n                    <small>공개된 정답: {gameState.revealedAnswers.length}개</small>\n                  </div>\n                )}\n                {gameState.revealedWrongAnswers.length > 0 && (\n                  <div>\n                    <small>공개된 오답: {gameState.revealedWrongAnswers.length}개</small>\n                  </div>\n                )}\n              </div>\n            </div>\n\n            <div className=\"players-status\">\n              <h4>플레이어 현황</h4>\n              <div className=\"players-list\">\n                {players.map(player => (\n                  <div \n                    key={player.id} \n                    className={`player-status ${currentPlayer?.id === player.id ? 'current' : ''}`}\n                  >\n                    <span className=\"player-name\">{player.nickname}</span>\n                    <span className=\"player-type\">({player.type === 'built-in-ai' ? 'AI' : player.type === 'custom-ai' ? 'Custom AI' : '인간'})</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            <div className=\"turn-history\">\n              <h4>턴 기록</h4>\n              <div className=\"history-scroll\">\n                {gameState.turnHistory.slice(-5).map((turn, index) => (\n                  <div key={index} className=\"history-entry\">\n                    <div className=\"history-header\">\n                      <span>턴 {turn.turnNumber}: {turn.playerName}</span>\n                    </div>\n                    <div className=\"history-keywords\">\n                      {turn.guessKeywords.join(', ')}\n                    </div>\n                    <div className=\"history-result\">\n                      {turn.correctCount}/{gameConfig.answerCount} 정답\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const renderGuideModal = () => {\n    if (!isGuideModalOpen) return null;\n\n    const guideSlides = [\n      {\n        title: \"게임 목표: 숨겨진 키워드를 찾아라!\",\n        content: \"수많은 키워드 풀에서 정답으로 지정된 몇 개의 키워드를 가장 먼저 찾아내는 플레이어가 승리합니다.\"\n      },\n      {\n        title: \"핵심 규칙: 단서와 추론\",\n        content: \"각 플레이어는 자신만 아는 '힌트(정답이 아닌 키워드)'를 받습니다. 매 턴, 정답이라 생각하는 키워드들을 추측하면, 그중에 진짜 정답이 '몇 개'인지 결과만 알려줍니다.\"\n      },\n      {\n        title: \"승리 조건: 완벽한 추리\",\n        content: \"모든 정답 키워드를 정확히 맞추는 추측을 가장 먼저 한 플레이어가 게임의 승자가 됩니다. 제한 시간이 있으니 신속하고 정확한 추리가 필요합니다!\"\n      }\n    ];\n\n    const goToNextSlide = () => {\n      setGuideSlideIndex(prev => (prev + 1) % guideSlides.length);\n    };\n\n    const goToPrevSlide = () => {\n      setGuideSlideIndex(prev => (prev - 1 + guideSlides.length) % guideSlides.length);\n    };\n\n    return (\n      <div className=\"modal-overlay\" onClick={() => setIsGuideModalOpen(false)}>\n        <div className=\"modal-content guide-modal\" onClick={(e) => e.stopPropagation()}>\n          <div className=\"modal-header\">\n            <h3>게임 가이드</h3>\n            <button className=\"modal-close\" onClick={() => setIsGuideModalOpen(false)}>×</button>\n          </div>\n          <div className=\"guide-slides-container\">\n            <div className=\"guide-slide\">\n              <h4>{guideSlides[guideSlideIndex].title}</h4>\n              <p>{guideSlides[guideSlideIndex].content}</p>\n            </div>\n          </div>\n          <div className=\"guide-controls\">\n            <button onClick={goToPrevSlide}>이전</button>\n            <div className=\"slide-indicators\">\n              {guideSlides.map((_, index) => (\n                <span key={index} className={`indicator ${guideSlideIndex === index ? 'active' : ''}`}></span>\n              ))}\n            </div>\n            <button onClick={goToNextSlide}>다음</button>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  // 테마 결정 함수\n  const getThemeClass = () => {\n    // 모드 선택 화면과 난이도 선택 화면에서는 항상 기본 테마\n    if (currentScreen === 'mode-selection' || currentScreen === 'difficulty-selection') {\n      return 'theme-intermediate';\n    }\n    \n    if (gameMode === 'solo') {\n      // 솔로 모드에서는 난이도에 따라 테마 결정\n      switch (soloDifficulty) {\n        case 'easy':\n          return 'theme-beginner';\n        case 'medium':\n          return 'theme-intermediate';\n        case 'hard':\n          return 'theme-advanced';\n        default:\n          return 'theme-intermediate';\n      }\n    } else {\n      // 멀티플레이어 모드는 항상 커스텀(네온 초록색) 테마\n      return 'theme-custom';\n    }\n  };\n\n  return (\n    <div className={`deduction-game ${getThemeClass()}`}>\n      <div className=\"game-content\">\n        <div className=\"game-wrapper\">\n          <div className=\"game-header\">\n            <h1>Exclusive Deduction Game</h1>\n            <p>서로 다른 단서로 정답을 추론하는 게임</p>\n          </div>\n          \n          {currentScreen === 'mode-selection' && renderModeSelection()}\n          {currentScreen === 'difficulty-selection' && renderDifficultySelection()}\n          {currentScreen === 'player-setup' && renderPlayerSetup()}\n          {currentScreen === 'game-config' && renderGameConfig()}\n          {currentScreen === 'game-preparation' && renderGamePreparation()}\n          {currentScreen === 'game' && renderGameScreen()}\n        </div>\n        \n        {renderCodeEditorModal()}\n        {renderGuideModal()}\n      </div>\n    </div>\n  );\n};\n\nexport default DeductionGame;","import { IPlayer } from './players/BasePlayer';\nimport { GameContext, GameStateForAI, TurnResult } from './types/GameTypes';\nimport { PlayerInfo } from './types/PlayerTypes';\nimport { PlayerFactory } from './PlayerFactory';\n\nexport interface GameManagerConfig {\n  keywordPoolSize: number;\n  answerCount: number;\n  hintCount: number;\n  timeLimit: number;\n  maxTurns?: number;\n  globalHintsEnabled?: boolean;\n}\n\nexport class GameManager {\n  private players: IPlayer[] = [];\n  private currentPlayerIndex: number = 0;\n  private gameContext: GameContext;\n  private config: GameManagerConfig;\n  private isGameRunning: boolean = false;\n  private turnTimer?: NodeJS.Timeout;\n  private turnStartTime: number = 0;\n  private revealedHintsPerPlayer: Map<number, { playerId: number; hints: number[] }[]> = new Map();\n  private lastHintRevealTurn: Map<number, number> = new Map(); // 각 플레이어의 마지막 힌트 공개 턴\n  private globalHintWrongAnswers: number[] = []; // 글로벌 힌트로 추가된 오답들\n  private temporaryHiddenGlobalHints: number[] = []; // 토글 OFF시 임시 저장소\n  \n  private onTurnStart?: (player: IPlayer) => void;\n  private onTurnEnd?: (result: TurnResult) => void;\n  private onGameEnd?: (winner?: IPlayer) => void;\n  private onTimerTick?: (remainingTime: number) => void;\n  private onAIThinking?: (thinking: boolean) => void;\n\n  constructor(config: GameManagerConfig) {\n    this.config = config;\n    this.gameContext = {\n      keywords: [],\n      answers: [],\n      playerHints: {},\n      currentTurn: 0,\n      turnHistory: [],\n      revealedAnswers: [],\n      revealedWrongAnswers: []\n    };\n  }\n\n  addPlayer(player: IPlayer): void {\n    if (this.isGameRunning) {\n      throw new Error('Cannot add players while game is running');\n    }\n    this.players.push(player);\n  }\n\n  setPlayers(players: IPlayer[]): void {\n    if (this.isGameRunning) {\n      throw new Error('Cannot set players while game is running');\n    }\n    this.players = players;\n  }\n\n  getCurrentPlayer(): IPlayer | null {\n    if (!this.isGameRunning || this.players.length === 0) return null;\n    return this.players[this.currentPlayerIndex];\n  }\n\n  getPlayers(): IPlayer[] {\n    return [...this.players];\n  }\n\n  getGameContext(): GameContext {\n    return { ...this.gameContext };\n  }\n\n  setGlobalHintsEnabled(enabled: boolean): void {\n    this.config.globalHintsEnabled = enabled;\n    console.log(`[GameManager] Global hints ${enabled ? 'enabled' : 'disabled'}`);\n    \n    if (!enabled) {\n      // 토글 OFF: 글로벌 힌트로 추가된 오답들을 임시 저장소로 이동\n      this.temporaryHiddenGlobalHints = [...this.globalHintWrongAnswers];\n      // revealedWrongAnswers에서 글로벌 힌트 오답들 제거\n      this.gameContext.revealedWrongAnswers = this.gameContext.revealedWrongAnswers.filter(\n        idx => !this.globalHintWrongAnswers.includes(idx)\n      );\n      console.log(`[GameManager] Hiding ${this.temporaryHiddenGlobalHints.length} global hint wrong answers`);\n    } else {\n      // 토글 ON: 임시 저장소에서 글로벌 힌트 오답들 복원\n      if (this.temporaryHiddenGlobalHints.length > 0) {\n        this.temporaryHiddenGlobalHints.forEach(idx => {\n          if (!this.gameContext.revealedWrongAnswers.includes(idx)) {\n            this.gameContext.revealedWrongAnswers.push(idx);\n          }\n        });\n        console.log(`[GameManager] Restored ${this.temporaryHiddenGlobalHints.length} global hint wrong answers`);\n        this.temporaryHiddenGlobalHints = [];\n      }\n    }\n  }\n\n  async startGame(keywords: string[], answers: number[], playerHints: { [playerId: number]: number[] }): Promise<void> {\n    if (this.players.length === 0) {\n      throw new Error('No players added to the game');\n    }\n\n    this.gameContext = {\n      keywords,\n      answers,\n      playerHints,\n      currentTurn: 1,\n      turnHistory: [],\n      revealedAnswers: [],\n      revealedWrongAnswers: []\n    };\n\n    this.currentPlayerIndex = 0;\n    this.isGameRunning = true;\n    this.revealedHintsPerPlayer.clear();\n    this.lastHintRevealTurn.clear();\n    this.globalHintWrongAnswers = [];\n    this.temporaryHiddenGlobalHints = [];\n    \n    // 게임 시작 시 설정 정보 로그\n    console.log('=== 게임 설정 ===');\n    console.log(`키워드 풀: ${this.config.keywordPoolSize}개`);\n    console.log(`정답 개수: ${this.config.answerCount}개`);\n    console.log(`힌트 개수: ${this.config.hintCount}개`);\n    console.log(`플레이어 수: ${this.players.length}명`);\n    console.log(`게임 복잡도: ${this.calculateGameComplexity().toFixed(2)}`);\n    console.log(`예상 게임 길이: ${this.calculateExpectedTurns(this.calculateGameComplexity())}턴`);\n    console.log('================');\n\n    await this.startNextTurn();\n  }\n\n  private async startNextTurn(): Promise<void> {\n    if (!this.isGameRunning) return;\n\n    const currentPlayer = this.getCurrentPlayer();\n    if (!currentPlayer) return;\n\n    // 턴 시작 시간 기록\n    this.turnStartTime = Date.now();\n\n    if (this.onTurnStart) {\n      this.onTurnStart(currentPlayer);\n    }\n\n    currentPlayer.onTurnStart?.();\n\n    if (PlayerFactory.isHumanPlayer(currentPlayer)) {\n      this.startTurnTimer();\n      // 인간 플레이어의 경우에도 makeGuess를 호출하여 Promise를 생성\n      const gameStateForAI = this.createGameStateForAI(currentPlayer);\n      currentPlayer.makeGuess(gameStateForAI).then(guess => {\n        this.processTurn(guess);\n      });\n    } else {\n      // AI 플레이어의 경우에도 타이머 시작\n      this.startTurnTimer();\n      \n      // AI 플레이어의 경우, 사람처럼 보이도록 약간의 딜레이 추가\n      if (this.onAIThinking) {\n        this.onAIThinking(true);\n      }\n      \n      const thinkingTime = Math.random() * 2000 + 1500; // 1.5초 ~ 3.5초 사이의 랜덤 시간\n      \n      await new Promise(resolve => setTimeout(resolve, thinkingTime));\n      \n      const gameStateForAI = this.createGameStateForAI(currentPlayer);\n      const guess = await currentPlayer.makeGuess(gameStateForAI);\n      \n      if (this.onAIThinking) {\n        this.onAIThinking(false);\n      }\n      \n      await this.processTurn(guess);\n    }\n  }\n\n  private startTurnTimer(): void {\n    let remainingTime = this.config.timeLimit;\n    \n    if (this.onTimerTick) {\n      this.onTimerTick(remainingTime);\n    }\n\n    this.turnTimer = setInterval(() => {\n      remainingTime--;\n      \n      if (this.onTimerTick) {\n        this.onTimerTick(remainingTime);\n      }\n\n      if (remainingTime <= 0) {\n        this.handleTimeout();\n      }\n    }, 1000);\n  }\n\n  private stopTurnTimer(): void {\n    if (this.turnTimer) {\n      clearInterval(this.turnTimer);\n      this.turnTimer = undefined;\n    }\n  }\n\n  private handleTimeout(): void {\n    this.stopTurnTimer();\n    \n    const currentPlayer = this.getCurrentPlayer();\n    if (!currentPlayer) return;\n    \n    const availableIndices = Array.from(\n      { length: this.gameContext.keywords.length },\n      (_, i) => i\n    ).filter(idx => !this.gameContext.revealedWrongAnswers.includes(idx));\n    \n    const shuffled = [...availableIndices].sort(() => Math.random() - 0.5);\n    const autoGuess = shuffled.slice(0, this.config.answerCount);\n    \n    if (PlayerFactory.isHumanPlayer(currentPlayer)) {\n      // HumanPlayer의 경우 submitGuess를 통해 Promise를 resolve\n      currentPlayer.submitGuess(autoGuess);\n    } else {\n      this.processTurn(autoGuess);\n    }\n  }\n\n  async submitHumanGuess(indices: number[]): Promise<void> {\n    const currentPlayer = this.getCurrentPlayer();\n    \n    if (!currentPlayer || !PlayerFactory.isHumanPlayer(currentPlayer)) {\n      throw new Error('Current player is not a human player');\n    }\n\n    this.stopTurnTimer();\n    currentPlayer.submitGuess(indices);\n    // processTurn은 makeGuess Promise가 resolve될 때 자동으로 호출됨\n  }\n\n  private async processTurn(guess: number[]): Promise<void> {\n    const currentPlayer = this.getCurrentPlayer();\n    if (!currentPlayer) return;\n\n    // 타이머 중지 (중요: AI 플레이어도 타이머를 사용하므로)\n    this.stopTurnTimer();\n\n    const correctCount = guess.filter(idx => \n      this.gameContext.answers.includes(idx)\n    ).length;\n\n    const isWinner = correctCount === this.config.answerCount && \n                     guess.every(idx => this.gameContext.answers.includes(idx));\n\n    // 실제 사용 시간 계산\n    const actualTimeUsed = Math.round((Date.now() - this.turnStartTime) / 1000);\n    \n    const turnResult: TurnResult = {\n      playerId: currentPlayer.getInfo().id,\n      playerName: currentPlayer.getInfo().nickname,\n      guess: [...guess],\n      guessKeywords: guess.map(idx => this.gameContext.keywords[idx]),\n      correctCount,\n      turnNumber: this.gameContext.currentTurn,\n      timeUsed: actualTimeUsed\n    };\n\n    this.gameContext.turnHistory.push(turnResult);\n    \n    // Global hints feature: If all guesses are wrong, reveal them as wrong answers\n    if (this.config.globalHintsEnabled && correctCount === 0) {\n      console.log('[Global Hints] All guesses are wrong, revealing as wrong answers');\n      guess.forEach(idx => {\n        if (!this.gameContext.revealedWrongAnswers.includes(idx) && \n            !this.gameContext.revealedAnswers.includes(idx) &&\n            !this.globalHintWrongAnswers.includes(idx)) {\n          this.gameContext.revealedWrongAnswers.push(idx);\n          this.globalHintWrongAnswers.push(idx); // 글로벌 힌트로 추가된 것 추적\n        }\n      });\n    }\n    \n    currentPlayer.onTurnEnd?.({\n      selectedIndices: guess,\n      timeUsed: turnResult.timeUsed,\n      timestamp: Date.now()\n    });\n\n    if (this.onTurnEnd) {\n      this.onTurnEnd(turnResult);\n    }\n\n    if (isWinner) {\n      this.endGame(currentPlayer);\n    } else if (this.config.maxTurns && this.gameContext.currentTurn >= this.config.maxTurns) {\n      this.endGame();\n    } else {\n      this.gameContext.currentTurn++;\n      this.currentPlayerIndex = (this.currentPlayerIndex + 1) % this.players.length;\n      await this.startNextTurn();\n    }\n  }\n\n  private createGameStateForAI(player: IPlayer): GameStateForAI {\n    const playerInfo = player.getInfo();\n    const myHints = this.gameContext.playerHints[playerInfo.id] || [];\n    \n    const previousGuesses = this.gameContext.turnHistory.map(turn => ({\n      playerId: turn.playerId,\n      guess: turn.guess,\n      correctCount: turn.correctCount\n    }));\n\n    // 난이도별 힌트 공개 주기 설정\n    const hintRevealSchedule = this.getHintRevealSchedule(playerInfo);\n    const revealedOtherHints = this.updateAndGetRevealedHints(playerInfo.id, hintRevealSchedule);\n\n    return {\n      keywords: [...this.gameContext.keywords],\n      myHints,\n      previousGuesses,\n      revealedAnswers: [...this.gameContext.revealedAnswers],\n      revealedWrongAnswers: [...this.gameContext.revealedWrongAnswers],\n      answerCount: this.config.answerCount,\n      currentTurn: this.gameContext.currentTurn,\n      maxTurns: this.config.maxTurns,\n      timeLimit: this.config.timeLimit,\n      revealedOtherHints\n    };\n  }\n\n  private getHintRevealSchedule(playerInfo: PlayerInfo): { startTurn: number; initialInterval: number; accelerationFactor: number } {\n    // AI 난이도에 따른 힌트 공개 스케줄을 동적으로 계산\n    if (playerInfo.type === 'built-in-ai') {\n      // 게임 복잡도 계산\n      const complexity = this.calculateGameComplexity();\n      const expectedTurns = this.calculateExpectedTurns(complexity);\n      \n      // 난이도별 AI 성장 구간 비율 정의 (Medium 강화)\n      const difficultyProfiles = {\n        easy: { \n          startRatio: 0.5,       // 50%에서 시작 (훨씬 늦게)\n          initialInterval: 8,    // 초기 간격 (2배로 증가)\n          accelerationFactor: 1.2 // 가속도 계수 (더 느리게)\n        },\n        medium: { \n          startRatio: 0.25,      // 25%에서 시작 (기존 Easy 값 사용)\n          initialInterval: 4,    // 초기 간격 (기존 Easy 값 사용)\n          accelerationFactor: 1.5 // 가속도 계수 (기존 Easy 값 사용)\n        },\n        hard: { \n          startRatio: 0.05,      // 5%에서 시작\n          initialInterval: 1,    // 초기 간격\n          accelerationFactor: 8.0 // 가속도 계수\n        }\n      };\n      \n      const profile = difficultyProfiles[playerInfo.aiDifficulty || 'medium'];\n      \n      // 시작 턴 계산\n      const startTurn = Math.max(1, Math.floor(expectedTurns * profile.startRatio));\n      \n      console.log(`[${playerInfo.aiDifficulty} AI] 예상 게임 길이: ${expectedTurns}턴, 시작: ${startTurn}턴, 초기 간격: ${profile.initialInterval}턴`);\n      \n      return { \n        startTurn, \n        initialInterval: profile.initialInterval,\n        accelerationFactor: profile.accelerationFactor\n      };\n    }\n    // 커스텀 AI나 휴먼 플레이어는 힌트 공개 없음\n    return { startTurn: Infinity, initialInterval: Infinity, accelerationFactor: 1 };\n  }\n  \n  private calculateGameComplexity(): number {\n    // 게임 복잡도 = (키워드 풀 크기 - 정답 개수) / 정답 개수\n    return (this.config.keywordPoolSize - this.config.answerCount) / this.config.answerCount;\n  }\n  \n  private calculateExpectedTurns(complexity: number): number {\n    // 복잡도 기반 예상 게임 길이 계산\n    // 기본 공식: 복잡도 * 난이도 계수 + 최소 턴 수\n    const baseTurns = Math.ceil(complexity * 1.5 + 10);\n    \n    // 최대 턴 수가 설정되어 있으면 그것도 고려\n    if (this.config.maxTurns) {\n      return Math.min(baseTurns, this.config.maxTurns * 0.8); // 최대 턴의 80%를 예상 길이로\n    }\n    \n    return baseTurns;\n  }\n\n  private updateAndGetRevealedHints(playerId: number, schedule: { startTurn: number; initialInterval: number; accelerationFactor: number }): { playerId: number; hints: number[] }[] {\n    const currentTurn = this.gameContext.currentTurn;\n    \n    // 아직 힌트 공개 시작 턴이 안 됐으면 빈 배열 반환\n    if (currentTurn < schedule.startTurn) {\n      return [];\n    }\n\n    // 마지막 힌트 공개 턴 가져오기\n    const lastRevealTurn = this.lastHintRevealTurn.get(playerId) || schedule.startTurn - 1;\n    const turnsPassedSinceStart = currentTurn - schedule.startTurn;\n    \n    // 가속도 기반 간격 계산: 간격 = 초기간격 / (경과턴 / 10 + 1)\n    const acceleratedInterval = Math.max(1, Math.floor(\n      schedule.initialInterval / (1 + turnsPassedSinceStart / (10 / schedule.accelerationFactor))\n    ));\n    \n    // 이번 턴에 공개할 힌트 수 계산: 난이도별로 다르게\n    let revealMultiplier = 0.15; // Easy: 매우 적게 공개\n    if (schedule.accelerationFactor >= 1.5 && schedule.accelerationFactor < 8.0) { // Medium\n      revealMultiplier = 0.3; // Medium: 기존 Easy 수준으로\n    } else if (schedule.accelerationFactor >= 8.0) { // Hard\n      revealMultiplier = 1.5; // Hard: 더 많이 공개\n    }\n    const hintsToRevealThisTurn = Math.max(1, Math.floor(turnsPassedSinceStart * revealMultiplier));\n    \n    // 간격이 지났는지 확인\n    const shouldReveal = currentTurn >= lastRevealTurn + acceleratedInterval;\n    \n    // 이미 공개된 힌트 가져오기\n    let revealedHints = this.revealedHintsPerPlayer.get(playerId) || [];\n    \n    if (shouldReveal) {\n      // 다른 플레이어들의 힌트 중 아직 공개하지 않은 것들\n      const otherPlayers = this.players.filter(p => p.getInfo().id !== playerId);\n      const availableHints: { playerId: number; hints: number[] }[] = [];\n\n      for (const otherPlayer of otherPlayers) {\n        const otherPlayerId = otherPlayer.getInfo().id;\n        const otherHints = this.gameContext.playerHints[otherPlayerId] || [];\n        \n        // 이미 공개된 플레이어인지 확인\n        if (!revealedHints.find(rh => rh.playerId === otherPlayerId)) {\n          availableHints.push({ playerId: otherPlayerId, hints: otherHints });\n        }\n      }\n\n      // 이번 턴에 여러 힌트 공개\n      let revealedThisTurn = 0;\n      while (revealedThisTurn < hintsToRevealThisTurn && availableHints.length > 0) {\n        const randomIndex = Math.floor(Math.random() * availableHints.length);\n        const newHint = availableHints.splice(randomIndex, 1)[0];\n        revealedHints.push(newHint);\n        revealedThisTurn++;\n        \n        // 힌트 공개 로그\n        const playerInfo = this.players.find(p => p.getInfo().id === playerId)?.getInfo();\n        if (playerInfo) {\n          console.log(`[턴 ${currentTurn}] ${playerInfo.nickname}이(가) 플레이어 ${newHint.playerId}의 힌트 ${newHint.hints.length}개를 알게 되었습니다.`);\n        }\n      }\n      \n      // 난이도별 임계점: Medium은 40%, Hard는 즉시 전체 공개\n      let thresholdRatio = 0.5; // Easy\n      if (schedule.accelerationFactor >= 3.0 && schedule.accelerationFactor < 8.0) { // Medium\n        thresholdRatio = 0.4;\n      } else if (schedule.accelerationFactor >= 8.0) { // Hard\n        thresholdRatio = 0.1; // 10%만 되어도 모두 공개\n      }\n      \n      // Hard AI는 게임 후반(마지막 10%)에 모든 힌트 즉시 공개\n      const gameProgress = currentTurn / (this.config.maxTurns || 30);\n      const isHardAI = schedule.accelerationFactor >= 8.0;\n      const isEndgame = gameProgress >= 0.7; // 70% 진행 시점\n      \n      const totalAvailableHints = (this.players.length - 1);\n      if ((revealedHints.length >= totalAvailableHints * thresholdRatio || (isHardAI && isEndgame)) && availableHints.length > 0) {\n        console.log(`[턴 ${currentTurn}] ${isHardAI && isEndgame ? 'Hard AI 후반 모드 -' : '임계점 도달 -'} 나머지 모든 힌트 공개`);\n        for (const hint of availableHints) {\n          revealedHints.push(hint);\n          const playerInfo = this.players.find(p => p.getInfo().id === playerId)?.getInfo();\n          if (playerInfo) {\n            console.log(`[턴 ${currentTurn}] ${playerInfo.nickname}이(가) 플레이어 ${hint.playerId}의 힌트 ${hint.hints.length}개를 추가로 알게 되었습니다.`);\n          }\n        }\n      }\n      \n      // 마지막 공개 턴 업데이트\n      this.lastHintRevealTurn.set(playerId, currentTurn);\n      \n      // 다음 간격 로그\n      const nextInterval = Math.max(1, Math.floor(\n        schedule.initialInterval / (1 + (turnsPassedSinceStart + 1) / (10 / schedule.accelerationFactor))\n      ));\n      console.log(`[${this.players.find(p => p.getInfo().id === playerId)?.getInfo().nickname}] 다음 힌트 공개까지: ${nextInterval}턴`);\n    }\n\n    // 업데이트된 힌트 저장\n    this.revealedHintsPerPlayer.set(playerId, revealedHints);\n\n    return [...revealedHints];\n  }\n\n  revealAnswer(): boolean {\n    const unrevealedAnswers = this.gameContext.answers.filter(\n      ans => !this.gameContext.revealedAnswers.includes(ans)\n    );\n    \n    if (unrevealedAnswers.length === 0) return false;\n    \n    const randomAnswer = unrevealedAnswers[\n      Math.floor(Math.random() * unrevealedAnswers.length)\n    ];\n    \n    this.gameContext.revealedAnswers.push(randomAnswer);\n    return true;\n  }\n\n  revealWrongAnswer(): boolean {\n    const wrongAnswers = Array.from(\n      { length: this.gameContext.keywords.length },\n      (_, i) => i\n    ).filter(idx => \n      !this.gameContext.answers.includes(idx) && \n      !this.gameContext.revealedWrongAnswers.includes(idx)\n    );\n    \n    if (wrongAnswers.length === 0) return false;\n    \n    const randomWrong = wrongAnswers[\n      Math.floor(Math.random() * wrongAnswers.length)\n    ];\n    \n    this.gameContext.revealedWrongAnswers.push(randomWrong);\n    return true;\n  }\n\n  private endGame(winner?: IPlayer): void {\n    this.stopTurnTimer();\n    this.isGameRunning = false;\n    \n    if (this.onGameEnd) {\n      this.onGameEnd(winner);\n    }\n  }\n\n  stopGame(): void {\n    this.stopTurnTimer();\n    this.isGameRunning = false;\n    this.players.forEach(player => player.reset());\n    this.revealedHintsPerPlayer.clear();\n    this.lastHintRevealTurn.clear();\n    this.globalHintWrongAnswers = [];\n    this.temporaryHiddenGlobalHints = [];\n  }\n\n  isRunning(): boolean {\n    return this.isGameRunning;\n  }\n\n  setEventHandlers(handlers: {\n    onTurnStart?: (player: IPlayer) => void;\n    onTurnEnd?: (result: TurnResult) => void;\n    onGameEnd?: (winner?: IPlayer) => void;\n    onTimerTick?: (remainingTime: number) => void;\n    onAIThinking?: (thinking: boolean) => void;\n  }): void {\n    this.onTurnStart = handlers.onTurnStart;\n    this.onTurnEnd = handlers.onTurnEnd;\n    this.onGameEnd = handlers.onGameEnd;\n    this.onTimerTick = handlers.onTimerTick;\n    this.onAIThinking = handlers.onAIThinking;\n  }\n}","import { PlayerInfo, PlayerMove } from '../types/PlayerTypes';\nimport { GameStateForAI } from '../types/GameTypes';\n\nexport interface IPlayer {\n  getInfo(): PlayerInfo;\n  \n  makeGuess(gameState: GameStateForAI): Promise<number[]>;\n  \n  isReady(): boolean;\n  \n  onTurnStart?(): void;\n  \n  onTurnEnd?(move: PlayerMove): void;\n  \n  reset(): void;\n}\n\nexport abstract class BasePlayer implements IPlayer {\n  protected playerInfo: PlayerInfo;\n  protected ready: boolean = false;\n\n  constructor(playerInfo: PlayerInfo) {\n    this.playerInfo = playerInfo;\n  }\n\n  getInfo(): PlayerInfo {\n    return this.playerInfo;\n  }\n\n  isReady(): boolean {\n    return this.ready;\n  }\n\n  abstract makeGuess(gameState: GameStateForAI): Promise<number[]>;\n\n  onTurnStart(): void {\n    // Override in subclasses if needed\n  }\n\n  onTurnEnd(move: PlayerMove): void {\n    // Override in subclasses if needed\n  }\n\n  reset(): void {\n    this.ready = false;\n  }\n}","import { BasePlayer } from './BasePlayer';\nimport { PlayerInfo } from '../types/PlayerTypes';\nimport { GameStateForAI } from '../types/GameTypes';\n\nexport class HumanPlayer extends BasePlayer {\n  private resolveGuess?: (indices: number[]) => void;\n  \n  constructor(playerInfo: PlayerInfo) {\n    super(playerInfo);\n    this.ready = true;\n  }\n\n  async makeGuess(gameState: GameStateForAI): Promise<number[]> {\n    return new Promise<number[]>((resolve) => {\n      this.resolveGuess = resolve;\n    });\n  }\n\n  submitGuess(indices: number[]): void {\n    if (this.resolveGuess) {\n      this.resolveGuess(indices);\n      this.resolveGuess = undefined;\n    }\n  }\n\n  isWaitingForInput(): boolean {\n    return this.resolveGuess !== undefined;\n  }\n\n  reset(): void {\n    super.reset();\n    this.resolveGuess = undefined;\n    this.ready = true;\n  }\n}","import { BasePlayer } from './BasePlayer';\nimport { PlayerInfo } from '../types/PlayerTypes';\nimport { GameStateForAI } from '../types/GameTypes';\nimport { AIStrategy } from '../strategies/AIStrategy';\n\nexport class BuiltInAIPlayer extends BasePlayer {\n  private strategy: AIStrategy;\n  private thinkingTime: number = 2000; // 2 seconds by default\n  \n  constructor(playerInfo: PlayerInfo, strategy: AIStrategy) {\n    super(playerInfo);\n    this.strategy = strategy;\n    this.ready = true;\n  }\n\n  async makeGuess(gameState: GameStateForAI): Promise<number[]> {\n    const startTime = Date.now();\n    \n    const selectedIndices = this.strategy.selectKeywords(gameState);\n    \n    const elapsedTime = Date.now() - startTime;\n    const remainingTime = Math.max(0, this.thinkingTime - elapsedTime);\n    \n    if (remainingTime > 0) {\n      await new Promise(resolve => setTimeout(resolve, remainingTime));\n    }\n    \n    return selectedIndices;\n  }\n\n  setThinkingTime(milliseconds: number): void {\n    this.thinkingTime = Math.max(500, milliseconds);\n  }\n\n  getStrategy(): AIStrategy {\n    return this.strategy;\n  }\n\n  setStrategy(strategy: AIStrategy): void {\n    this.strategy = strategy;\n  }\n}","import { GameStateForAI } from '../types/GameTypes';\nimport { AICodeValidator } from './AICodeValidator';\n\nexport interface ExecutionResult {\n  success: boolean;\n  result?: number[];\n  error?: string;\n  executionTime?: number;\n  logs?: string[];\n}\n\nexport interface SecureGameState {\n  readonly keywords: ReadonlyArray<string>;\n  readonly myHints: ReadonlyArray<number>;\n  readonly answerCount: number;\n  readonly previousGuesses: ReadonlyArray<{\n    playerId: number;\n    guess: number[];\n    correctCount: number;\n  }>;\n  readonly revealedAnswers: ReadonlyArray<number>;\n  readonly revealedWrongAnswers: ReadonlyArray<number>;\n  readonly currentTurn: number;\n  readonly timeLimit: number;\n}\n\nexport class AICodeExecutor {\n  private static instance: AICodeExecutor;\n  private executionCounter = 0;\n  private readonly MAX_EXECUTION_TIME = 2500; // 2.5 seconds with buffer\n\n  static getInstance(): AICodeExecutor {\n    if (!AICodeExecutor.instance) {\n      AICodeExecutor.instance = new AICodeExecutor();\n    }\n    return AICodeExecutor.instance;\n  }\n\n  async executeUserAI(\n    code: string,\n    gameState: GameStateForAI,\n    playerId: number\n  ): Promise<ExecutionResult> {\n    const startTime = performance.now();\n    const logs: string[] = [];\n\n    try {\n      // Step 1: Validate code\n      const validation = AICodeValidator.validate(code);\n      if (!validation.isValid) {\n        return {\n          success: false,\n          error: `Code validation failed: ${validation.errors.join('; ')}`,\n          executionTime: performance.now() - startTime\n        };\n      }\n\n      // Log warnings if any\n      if (validation.warnings) {\n        logs.push(...validation.warnings.map(w => `Warning: ${w}`));\n      }\n\n      // Step 2: Preprocess code\n      const processedCode = AICodeValidator.preprocessCode(code);\n\n      // Step 3: Create secure game state\n      const secureGameState = this.createSecureGameState(gameState);\n\n      // Step 4: Execute in worker\n      const result = await this.executeInWorker(processedCode, secureGameState, logs);\n\n      const executionTime = performance.now() - startTime;\n\n      return {\n        success: true,\n        result,\n        executionTime,\n        logs: logs.length > 0 ? logs : undefined\n      };\n\n    } catch (error: any) {\n      const executionTime = performance.now() - startTime;\n      \n      return {\n        success: false,\n        error: error.message || 'Unknown error occurred',\n        executionTime,\n        logs: logs.length > 0 ? logs : undefined\n      };\n    }\n  }\n\n  private createSecureGameState(gameState: GameStateForAI): SecureGameState {\n    // Deep freeze arrays and objects to prevent modification\n    const deepFreeze = <T>(obj: T): T => {\n      Object.freeze(obj);\n      \n      Object.getOwnPropertyNames(obj).forEach(prop => {\n        if (obj[prop as keyof T] !== null\n            && (typeof obj[prop as keyof T] === 'object' || typeof obj[prop as keyof T] === 'function')\n            && !Object.isFrozen(obj[prop as keyof T])) {\n          deepFreeze(obj[prop as keyof T]);\n        }\n      });\n      \n      return obj;\n    };\n\n    return deepFreeze({\n      keywords: [...gameState.keywords],\n      myHints: [...gameState.myHints],\n      answerCount: gameState.answerCount,\n      previousGuesses: gameState.previousGuesses.map(g => ({\n        playerId: g.playerId,\n        guess: [...g.guess],\n        correctCount: g.correctCount\n      })),\n      revealedAnswers: [...gameState.revealedAnswers],\n      revealedWrongAnswers: [...gameState.revealedWrongAnswers],\n      currentTurn: gameState.currentTurn,\n      timeLimit: gameState.timeLimit\n    });\n  }\n\n  private executeInWorker(\n    code: string,\n    gameState: SecureGameState,\n    logs: string[]\n  ): Promise<number[]> {\n    return new Promise((resolve, reject) => {\n      const executionId = `exec_${++this.executionCounter}_${Date.now()}`;\n      \n      // Create worker\n      // Get the correct path for the worker file\n      const publicUrl = process.env.PUBLIC_URL || '';\n      let workerPath = publicUrl + '/ai-worker.js';\n      \n      // In development, if the path starts with /web, use it directly\n      if (window.location.pathname.startsWith('/web') && !workerPath.startsWith('/web')) {\n        workerPath = '/web/ai-worker.js';\n      }\n      \n      const worker = new Worker(workerPath);\n      \n      // Set timeout\n      const timeoutId = setTimeout(() => {\n        worker.terminate();\n        reject(new Error('Execution timeout exceeded (2 seconds)'));\n      }, this.MAX_EXECUTION_TIME);\n\n      // Handle messages\n      worker.onmessage = (event) => {\n        const { type, executionId: msgId, result, error, data } = event.data;\n\n        // Handle console.log messages\n        if (type === 'log' && msgId === executionId) {\n          const logMessage = data.map((arg: any) => \n            typeof arg === 'object' ? JSON.stringify(arg) : String(arg)\n          ).join(' ');\n          logs.push(logMessage);\n          return;\n        }\n\n        // Handle result or error\n        if (msgId === executionId) {\n          clearTimeout(timeoutId);\n          worker.terminate();\n\n          if (error) {\n            reject(new Error(error));\n          } else if (result) {\n            resolve(result);\n          } else {\n            reject(new Error('No result returned from AI'));\n          }\n        }\n      };\n\n      // Handle worker errors\n      worker.onerror = (error) => {\n        clearTimeout(timeoutId);\n        worker.terminate();\n        \n        // More detailed error message\n        let errorMessage = 'Worker error: ';\n        if (error.message) {\n          errorMessage += error.message;\n        } else {\n          errorMessage += 'Failed to load worker file. Make sure ai-worker.js is in the public directory.';\n        }\n        \n        console.error('Worker load error:', error);\n        console.error('Worker path attempted:', workerPath);\n        \n        reject(new Error(errorMessage));\n      };\n\n      // Send execution request\n      worker.postMessage({\n        code,\n        gameState,\n        executionId\n      });\n    });\n  }\n\n  // Helper method to validate guess format\n  static validateGuess(guess: number[], gameState: GameStateForAI): string | null {\n    if (!Array.isArray(guess)) {\n      return 'Guess must be an array';\n    }\n\n    if (guess.length !== gameState.answerCount) {\n      return `Guess must contain exactly ${gameState.answerCount} elements`;\n    }\n\n    const keywordCount = gameState.keywords.length;\n    for (let i = 0; i < guess.length; i++) {\n      const idx = guess[i];\n      \n      if (typeof idx !== 'number' || !Number.isInteger(idx)) {\n        return `Element at index ${i} must be an integer`;\n      }\n\n      if (idx < 0 || idx >= keywordCount) {\n        return `Element at index ${i} (${idx}) is out of bounds`;\n      }\n\n      if (gameState.myHints.includes(idx)) {\n        return `Element at index ${i} (${idx}) is one of your hints`;\n      }\n    }\n\n    const uniqueIndices = new Set(guess);\n    if (uniqueIndices.size !== guess.length) {\n      return 'Guess contains duplicate indices';\n    }\n\n    return null; // Valid\n  }\n}","export interface PerformanceMetrics {\n  executionTime: number;\n  memoryUsage?: number;\n  validationTime?: number;\n  workerCreationTime?: number;\n}\n\nexport interface DetailedMetrics extends PerformanceMetrics {\n  timestamp: number;\n  playerId: number;\n  success: boolean;\n  errorType?: string;\n}\n\nexport class PerformanceMonitor {\n  private static instance: PerformanceMonitor;\n  private metricsHistory: DetailedMetrics[] = [];\n  private readonly MAX_HISTORY_SIZE = 1000;\n\n  static getInstance(): PerformanceMonitor {\n    if (!PerformanceMonitor.instance) {\n      PerformanceMonitor.instance = new PerformanceMonitor();\n    }\n    return PerformanceMonitor.instance;\n  }\n\n  async measureExecution<T>(\n    executor: () => Promise<T>,\n    metadata?: { playerId?: number }\n  ): Promise<[T, PerformanceMetrics]> {\n    const startTime = performance.now();\n    const startMemory = this.getMemoryUsage();\n\n    try {\n      const result = await executor();\n      \n      const endTime = performance.now();\n      const endMemory = this.getMemoryUsage();\n\n      const metrics: PerformanceMetrics = {\n        executionTime: endTime - startTime,\n        memoryUsage: endMemory && startMemory ? endMemory - startMemory : undefined\n      };\n\n      // Record successful execution\n      if (metadata?.playerId !== undefined) {\n        this.recordMetrics({\n          ...metrics,\n          timestamp: Date.now(),\n          playerId: metadata.playerId,\n          success: true\n        });\n      }\n\n      return [result, metrics];\n    } catch (error: any) {\n      const endTime = performance.now();\n      const endMemory = this.getMemoryUsage();\n\n      const metrics: PerformanceMetrics = {\n        executionTime: endTime - startTime,\n        memoryUsage: endMemory && startMemory ? endMemory - startMemory : undefined\n      };\n\n      // Record failed execution\n      if (metadata?.playerId !== undefined) {\n        this.recordMetrics({\n          ...metrics,\n          timestamp: Date.now(),\n          playerId: metadata.playerId,\n          success: false,\n          errorType: error.constructor.name\n        });\n      }\n\n      throw { error, metrics };\n    }\n  }\n\n  measureSync<T>(executor: () => T): [T, PerformanceMetrics] {\n    const startTime = performance.now();\n    const startMemory = this.getMemoryUsage();\n\n    const result = executor();\n    \n    const endTime = performance.now();\n    const endMemory = this.getMemoryUsage();\n\n    const metrics: PerformanceMetrics = {\n      executionTime: endTime - startTime,\n      memoryUsage: endMemory && startMemory ? endMemory - startMemory : undefined\n    };\n\n    return [result, metrics];\n  }\n\n  private getMemoryUsage(): number | undefined {\n    // Check if memory API is available (Chrome/Edge)\n    if ('memory' in performance) {\n      return (performance as any).memory.usedJSHeapSize;\n    }\n    return undefined;\n  }\n\n  private recordMetrics(metrics: DetailedMetrics): void {\n    this.metricsHistory.push(metrics);\n\n    // Keep history size under control\n    if (this.metricsHistory.length > this.MAX_HISTORY_SIZE) {\n      this.metricsHistory = this.metricsHistory.slice(-this.MAX_HISTORY_SIZE);\n    }\n  }\n\n  getPlayerStats(playerId: number): {\n    totalExecutions: number;\n    successRate: number;\n    averageExecutionTime: number;\n    maxExecutionTime: number;\n    recentErrors: string[];\n  } {\n    const playerMetrics = this.metricsHistory.filter(m => m.playerId === playerId);\n    \n    if (playerMetrics.length === 0) {\n      return {\n        totalExecutions: 0,\n        successRate: 0,\n        averageExecutionTime: 0,\n        maxExecutionTime: 0,\n        recentErrors: []\n      };\n    }\n\n    const successful = playerMetrics.filter(m => m.success);\n    const totalTime = playerMetrics.reduce((sum, m) => sum + m.executionTime, 0);\n    const maxTime = Math.max(...playerMetrics.map(m => m.executionTime));\n    \n    const recentErrors = playerMetrics\n      .filter(m => !m.success && m.errorType)\n      .slice(-5)\n      .map(m => m.errorType!);\n\n    return {\n      totalExecutions: playerMetrics.length,\n      successRate: successful.length / playerMetrics.length,\n      averageExecutionTime: totalTime / playerMetrics.length,\n      maxExecutionTime: maxTime,\n      recentErrors\n    };\n  }\n\n  getGlobalStats(): {\n    totalExecutions: number;\n    averageSuccessRate: number;\n    averageExecutionTime: number;\n    peakExecutionTime: number;\n    activePlayerCount: number;\n  } {\n    if (this.metricsHistory.length === 0) {\n      return {\n        totalExecutions: 0,\n        averageSuccessRate: 0,\n        averageExecutionTime: 0,\n        peakExecutionTime: 0,\n        activePlayerCount: 0\n      };\n    }\n\n    const successful = this.metricsHistory.filter(m => m.success);\n    const totalTime = this.metricsHistory.reduce((sum, m) => sum + m.executionTime, 0);\n    const peakTime = Math.max(...this.metricsHistory.map(m => m.executionTime));\n    \n    const uniquePlayers = new Set(this.metricsHistory.map(m => m.playerId));\n\n    return {\n      totalExecutions: this.metricsHistory.length,\n      averageSuccessRate: successful.length / this.metricsHistory.length,\n      averageExecutionTime: totalTime / this.metricsHistory.length,\n      peakExecutionTime: peakTime,\n      activePlayerCount: uniquePlayers.size\n    };\n  }\n\n  clearHistory(): void {\n    this.metricsHistory = [];\n  }\n}","import { GameStateForAI } from '../types/GameTypes';\nimport { AICodeExecutor, ExecutionResult } from './AICodeExecutor';\nimport { PerformanceMonitor, PerformanceMetrics } from './PerformanceMonitor';\n\nexport interface AIExecutionResult {\n  playerId: number;\n  playerName: string;\n  guess: number[];\n  success: boolean;\n  executionTime: number;\n  error?: string;\n  logs?: string[];\n  metrics?: PerformanceMetrics;\n}\n\nexport class AIExecutionHandler {\n  private static instance: AIExecutionHandler;\n  private executor: AICodeExecutor;\n  private monitor: PerformanceMonitor;\n\n  private constructor() {\n    this.executor = AICodeExecutor.getInstance();\n    this.monitor = PerformanceMonitor.getInstance();\n  }\n\n  static getInstance(): AIExecutionHandler {\n    if (!AIExecutionHandler.instance) {\n      AIExecutionHandler.instance = new AIExecutionHandler();\n    }\n    return AIExecutionHandler.instance;\n  }\n\n  async executeWithFallback(\n    userCode: string,\n    gameState: GameStateForAI,\n    playerId: number,\n    playerName: string\n  ): Promise<AIExecutionResult> {\n    try {\n      // Measure execution with performance monitoring\n      const [executionResult, metrics] = await this.monitor.measureExecution(\n        () => this.executor.executeUserAI(userCode, gameState, playerId),\n        { playerId }\n      );\n\n      if (executionResult.success && executionResult.result) {\n        // Log successful execution\n        console.log(`AI execution successful for player ${playerId} (${playerName})`, {\n          executionTime: executionResult.executionTime,\n          guess: executionResult.result,\n          logs: executionResult.logs\n        });\n\n        return {\n          playerId,\n          playerName,\n          guess: executionResult.result,\n          success: true,\n          executionTime: executionResult.executionTime || 0,\n          logs: executionResult.logs,\n          metrics\n        };\n      } else {\n        // Execution failed but was caught properly\n        throw new Error(executionResult.error || 'Unknown execution error');\n      }\n\n    } catch (error: any) {\n      console.error(`AI execution failed for player ${playerId} (${playerName}):`, error);\n\n      // Generate fallback guess\n      const fallbackGuess = this.generateFallbackGuess(gameState);\n      \n      const errorDetails = error.metrics ? {\n        error: error.error?.message || 'Unknown error',\n        executionTime: error.metrics.executionTime\n      } : {\n        error: error.message || 'Unknown error',\n        executionTime: 0\n      };\n\n      return {\n        playerId,\n        playerName,\n        guess: fallbackGuess,\n        success: false,\n        ...errorDetails,\n        metrics: error.metrics\n      };\n    }\n  }\n\n  private generateFallbackGuess(gameState: GameStateForAI): number[] {\n    const available: number[] = [];\n    \n    // Find all available keywords (not hints, not revealed wrong answers)\n    for (let i = 0; i < gameState.keywords.length; i++) {\n      if (!gameState.myHints.includes(i) && \n          !gameState.revealedWrongAnswers.includes(i)) {\n        available.push(i);\n      }\n    }\n\n    // Start with revealed answers\n    const guess = [...gameState.revealedAnswers];\n\n    // Fill remaining slots randomly\n    while (guess.length < gameState.answerCount && available.length > 0) {\n      const randomIndex = Math.floor(Math.random() * available.length);\n      const selected = available.splice(randomIndex, 1)[0];\n      \n      if (!guess.includes(selected)) {\n        guess.push(selected);\n      }\n    }\n\n    // If still not enough (edge case), fill with any valid indices\n    if (guess.length < gameState.answerCount) {\n      for (let i = 0; i < gameState.keywords.length && guess.length < gameState.answerCount; i++) {\n        if (!gameState.myHints.includes(i) && !guess.includes(i)) {\n          guess.push(i);\n        }\n      }\n    }\n\n    return guess.slice(0, gameState.answerCount);\n  }\n\n  // Get execution statistics for a player\n  getPlayerStats(playerId: number) {\n    return this.monitor.getPlayerStats(playerId);\n  }\n\n  // Get global execution statistics\n  getGlobalStats() {\n    return this.monitor.getGlobalStats();\n  }\n\n  // Validate AI code without executing\n  async validateCode(code: string): Promise<{ valid: boolean; errors?: string[]; warnings?: string[] }> {\n    const { AICodeValidator } = await import('./AICodeValidator');\n    \n    const result = AICodeValidator.validate(code);\n    \n    return {\n      valid: result.isValid,\n      errors: result.errors.length > 0 ? result.errors : undefined,\n      warnings: result.warnings\n    };\n  }\n\n  // Test AI code with a sample game state\n  async testAICode(\n    code: string,\n    sampleGameState?: GameStateForAI\n  ): Promise<{\n    success: boolean;\n    result?: number[];\n    error?: string;\n    executionTime?: number;\n    logs?: string[];\n  }> {\n    // Use provided game state or create a sample one\n    const testGameState = sampleGameState || this.createSampleGameState();\n    \n    try {\n      const result = await this.executor.executeUserAI(code, testGameState, -1); // -1 for test player ID\n      return result;\n    } catch (error: any) {\n      return {\n        success: false,\n        error: error.message || 'Test execution failed'\n      };\n    }\n  }\n\n  private createSampleGameState(): GameStateForAI {\n    return {\n      keywords: ['사과', '바나나', '체리', '포도', '망고', '복숭아', '딸기', '수박', '멜론', '키위'],\n      myHints: [1, 3], // 바나나, 포도는 정답이 아님\n      answerCount: 3,\n      previousGuesses: [\n        { playerId: 1, guess: [0, 2, 4], correctCount: 2 },\n        { playerId: 2, guess: [2, 5, 6], correctCount: 1 }\n      ],\n      revealedAnswers: [],\n      revealedWrongAnswers: [7], // 수박은 정답이 아님\n      currentTurn: 3,\n      timeLimit: 60\n    };\n  }\n}","import { BasePlayer } from './BasePlayer';\nimport { PlayerInfo } from '../types/PlayerTypes';\nimport { GameStateForAI } from '../types/GameTypes';\nimport { AIExecutionHandler } from '../sandbox/AIExecutionHandler';\n\nexport class CustomAIPlayer extends BasePlayer {\n  private aiCode: string;\n  private aiLanguage: 'javascript' | 'typescript';\n  private executionHandler: AIExecutionHandler;\n  \n  constructor(playerInfo: PlayerInfo) {\n    super(playerInfo);\n    this.aiCode = playerInfo.customCode || '';\n    this.aiLanguage = playerInfo.customLanguage || 'javascript';\n    this.executionHandler = AIExecutionHandler.getInstance();\n    this.ready = this.validateCode();\n  }\n\n  async makeGuess(gameState: GameStateForAI): Promise<number[]> {\n    try {\n      // Use the secure sandbox execution\n      const result = await this.executionHandler.executeWithFallback(\n        this.aiCode,\n        gameState,\n        this.playerInfo.id,\n        this.playerInfo.nickname\n      );\n\n      if (!result.success) {\n        console.error(`Custom AI execution failed for ${this.playerInfo.nickname}:`, result.error);\n        if (result.logs && result.logs.length > 0) {\n          console.log(`AI logs for ${this.playerInfo.nickname}:`, result.logs);\n        }\n      }\n\n      return result.guess;\n    } catch (error) {\n      console.error('Unexpected error in Custom AI execution:', error);\n      return this.fallbackStrategy(gameState);\n    }\n  }\n\n  private fallbackStrategy(gameState: GameStateForAI): number[] {\n    const availableIndices = Array.from(\n      { length: gameState.keywords.length }, \n      (_, i) => i\n    ).filter(idx => !gameState.revealedWrongAnswers.includes(idx));\n    \n    const selectedIndices = [...gameState.revealedAnswers];\n    \n    while (selectedIndices.length < gameState.answerCount && availableIndices.length > 0) {\n      const remaining = availableIndices.filter(idx => !selectedIndices.includes(idx));\n      if (remaining.length === 0) break;\n      \n      const randomIdx = remaining[Math.floor(Math.random() * remaining.length)];\n      selectedIndices.push(randomIdx);\n    }\n    \n    return selectedIndices;\n  }\n\n  private validateCode(): boolean {\n    if (!this.aiCode.trim()) return false;\n    \n    // Use the execution handler's validation\n    const validationPromise = this.executionHandler.validateCode(this.aiCode);\n    \n    // Since constructor can't be async, we'll do a simple check here\n    // and rely on full validation during execution\n    try {\n      // Basic syntax check\n      new Function(this.aiCode);\n      return true;\n    } catch (error) {\n      console.error('AI code validation error:', error);\n      return false;\n    }\n  }\n\n  async validateCodeAsync(): Promise<{ valid: boolean; errors?: string[]; warnings?: string[] }> {\n    return await this.executionHandler.validateCode(this.aiCode);\n  }\n\n  updateCode(code: string, language: 'javascript' | 'typescript'): void {\n    this.aiCode = code;\n    this.aiLanguage = language;\n    this.ready = this.validateCode();\n  }\n\n  getCode(): string {\n    return this.aiCode;\n  }\n\n  getLanguage(): 'javascript' | 'typescript' {\n    return this.aiLanguage;\n  }\n}","import { AIStrategy } from './AIStrategy';\nimport { GameStateForAI } from '../types/GameTypes';\n\nexport class EasyStrategy implements AIStrategy {\n  private recentGuesses: Set<string> = new Set();\n  \n  selectKeywords(gameState: GameStateForAI): number[] {\n    console.log('=== Easy AI 실행 (무작위 선택) ===');\n    console.log(`턴 ${gameState.currentTurn}: 키워드 ${gameState.keywords.length}개 중 정답 ${gameState.answerCount}개 찾기`);\n    \n    // 확실한 정답만 수집 (매우 제한적으로만 사용)\n    const definiteAnswers = new Set<number>(gameState.revealedAnswers);\n    \n    // 확실한 오답 수집 (내 힌트와 공개된 오답만)\n    const definiteWrongs = new Set<number>();\n    gameState.myHints.forEach(hint => definiteWrongs.add(hint));\n    gameState.revealedWrongAnswers.forEach(wrong => definiteWrongs.add(wrong));\n    \n    // 선택 가능한 키워드 목록\n    const availableKeywords: number[] = [];\n    for (let i = 0; i < gameState.keywords.length; i++) {\n      if (!definiteWrongs.has(i)) {\n        availableKeywords.push(i);\n      }\n    }\n    \n    console.log(`선택 가능한 키워드: ${availableKeywords.length}개`);\n    \n    // Easy AI는 다른 플레이어의 힌트나 이전 추측을 분석하지 않습니다\n    // 단순히 무작위로 선택합니다\n    \n    const finalGuess: number[] = [];\n    \n    // 1. 확실한 정답이 있으면 먼저 포함 (하지만 모든 정답을 알아도 일부만 사용)\n    const answersToUse = Array.from(definiteAnswers);\n    const maxAnswersToUse = Math.min(\n      Math.floor(gameState.answerCount * 0.7), // 최대 70%만 사용\n      answersToUse.length\n    );\n    \n    // 확실한 정답 중에서도 무작위로 선택\n    const shuffledAnswers = this.shuffle([...answersToUse]);\n    for (let i = 0; i < maxAnswersToUse && finalGuess.length < gameState.answerCount; i++) {\n      finalGuess.push(shuffledAnswers[i]);\n    }\n    \n    // 2. 나머지는 완전 무작위로 선택\n    const remainingCandidates = availableKeywords.filter(idx => !finalGuess.includes(idx));\n    const shuffledCandidates = this.shuffle([...remainingCandidates]);\n    \n    for (let i = 0; i < shuffledCandidates.length && finalGuess.length < gameState.answerCount; i++) {\n      finalGuess.push(shuffledCandidates[i]);\n    }\n    \n    // 3. 가끔씩 의도적으로 실수하기 (10% 확률로 잘못된 선택)\n    if (Math.random() < 0.1 && finalGuess.length === gameState.answerCount) {\n      const wrongIndex = Math.floor(Math.random() * finalGuess.length);\n      const wrongCandidates = remainingCandidates.filter(idx => !finalGuess.includes(idx));\n      if (wrongCandidates.length > 0) {\n        finalGuess[wrongIndex] = wrongCandidates[Math.floor(Math.random() * wrongCandidates.length)];\n        console.log('Easy AI가 실수를 했습니다!');\n      }\n    }\n    \n    // 중복 방지를 위한 간단한 체크 (최근 3턴만 기억)\n    const guessKey = [...finalGuess].sort((a, b) => a - b).join(',');\n    if (this.recentGuesses.has(guessKey) && remainingCandidates.length >= gameState.answerCount) {\n      console.log('최근에 시도한 조합입니다. 다시 섞습니다.');\n      return this.selectKeywords(gameState); // 재귀적으로 다시 선택\n    }\n    \n    // 최근 추측 기록 유지 (3개까지만)\n    this.recentGuesses.add(guessKey);\n    if (this.recentGuesses.size > 3) {\n      const oldest = this.recentGuesses.values().next().value;\n      this.recentGuesses.delete(oldest);\n    }\n    \n    console.log('Easy AI 최종 선택:', finalGuess.map(i => gameState.keywords[i]));\n    return finalGuess;\n  }\n  \n  private shuffle<T>(array: T[]): T[] {\n    const result = [...array];\n    for (let i = result.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [result[i], result[j]] = [result[j], result[i]];\n    }\n    return result;\n  }\n\n  getStrategyName(): string {\n    return 'Easy AI';\n  }\n\n  getDescription(): string {\n    return 'AI가 무작위로 키워드를 선택합니다. 가끔 실수도 합니다.';\n  }\n}","import { AIStrategy } from './AIStrategy';\nimport { GameStateForAI, GuessHistory } from '../types/GameTypes';\n\nexport abstract class BaseStrategy implements AIStrategy {\n  private previousExactGuesses: Set<string> = new Set();\n  \n  selectKeywords(gameState: GameStateForAI): number[] {\n    console.log('=== 지능형 AI 실행 ===');\n    console.log(`턴 ${gameState.currentTurn}: 키워드 ${gameState.keywords.length}개 중 정답 ${gameState.answerCount}개 찾기`);\n    \n    // 1. 확실한 정답과 오답 수집\n    const definiteAnswers = new Set<number>(gameState.revealedAnswers);\n    const definiteWrongs = new Set<number>();\n    \n    // 내 힌트는 모두 오답\n    gameState.myHints.forEach(hint => definiteWrongs.add(hint));\n    \n    // 공개된 오답 추가\n    gameState.revealedWrongAnswers.forEach(wrong => definiteWrongs.add(wrong));\n    \n    // 공개된 다른 플레이어의 힌트도 오답\n    if (gameState.revealedOtherHints && gameState.revealedOtherHints.length > 0) {\n      gameState.revealedOtherHints.forEach(({ hints }) => {\n        hints.forEach(hintIdx => definiteWrongs.add(hintIdx));\n      });\n    }\n    \n    console.log(`내 힌트 (오답): ${gameState.myHints.map(i => gameState.keywords[i])}`);\n    console.log(`공개된 오답: ${gameState.revealedWrongAnswers.map(i => gameState.keywords[i])}`);\n    console.log(`공개된 정답: ${gameState.revealedAnswers.map(i => gameState.keywords[i])}`);\n    \n    // 2. 이전 추측 분석으로 추가 정보 획득\n    this.analyzeAllGuesses(gameState, definiteAnswers, definiteWrongs);\n    \n    // 3. 선택 가능한 키워드 목록 생성\n    const possibleKeywords: number[] = [];\n    for (let i = 0; i < gameState.keywords.length; i++) {\n      if (!definiteWrongs.has(i)) {\n        possibleKeywords.push(i);\n      }\n    }\n    \n    console.log(`확실한 정답: ${definiteAnswers.size}개`);\n    console.log(`확실한 오답: ${definiteWrongs.size}개`);\n    console.log(`선택 가능한 키워드: ${possibleKeywords.length}개`);\n    \n    // 4. 이미 충분한 정답을 아는 경우\n    if (definiteAnswers.size >= gameState.answerCount) {\n      console.log('모든 정답을 알고 있음! 게임 종료!');\n      return Array.from(definiteAnswers).slice(0, gameState.answerCount);\n    }\n    \n    // 5. 각 키워드의 점수 계산\n    const scores = this.calculateScores(gameState, possibleKeywords, definiteAnswers, definiteWrongs);\n    \n    // 6. 최종 추측 구성\n    let finalGuess = this.buildFinalGuess(scores, definiteAnswers, gameState.answerCount);\n    \n    // 7. 중복 추측 방지: 이전과 동일한 조합인지 확인\n    finalGuess = this.preventDuplicateGuess(finalGuess, gameState, scores);\n    \n    // 8. 이번 추측을 기록에 추가\n    const guessKey = [...finalGuess].sort((a, b) => a - b).join(',');\n    this.previousExactGuesses.add(guessKey);\n    \n    console.log('최종 선택:', finalGuess.map(i => gameState.keywords[i]));\n    return finalGuess;\n  }\n\n  // 모든 추측 분석\n  private analyzeAllGuesses(gameState: GameStateForAI, definiteAnswers: Set<number>, definiteWrongs: Set<number>): void {\n    // 1. 정답이 0개인 추측 - 모든 키워드가 오답\n    gameState.previousGuesses.forEach(guess => {\n      if (guess.correctCount === 0) {\n        guess.guess.forEach(idx => {\n          definiteWrongs.add(idx);\n        });\n        console.log(`정답 0개 추측에서 오답 발견: ${guess.guess.map(i => gameState.keywords[i])}`);\n      }\n    });\n    \n    // 2. 추측 간 비교로 확실한 정답/오답 찾기\n    for (let i = 0; i < gameState.previousGuesses.length - 1; i++) {\n      for (let j = i + 1; j < gameState.previousGuesses.length; j++) {\n        this.compareGuesses(\n          gameState.previousGuesses[i], \n          gameState.previousGuesses[j], \n          definiteAnswers, \n          definiteWrongs,\n          gameState\n        );\n      }\n    }\n    \n    // 3. 제약 조건 확인\n    gameState.previousGuesses.forEach(guess => {\n      this.checkConstraints(guess, definiteAnswers, definiteWrongs, gameState);\n    });\n  }\n\n  // 두 추측 비교\n  private compareGuesses(\n    guess1: GuessHistory, \n    guess2: GuessHistory, \n    definiteAnswers: Set<number>, \n    definiteWrongs: Set<number>, \n    gameState: GameStateForAI\n  ): void {\n    // 두 추측의 차이 계산\n    const onlyIn1 = guess1.guess.filter(x => !guess2.guess.includes(x));\n    const onlyIn2 = guess2.guess.filter(x => !guess1.guess.includes(x));\n    \n    // 정확히 하나씩만 다른 경우\n    if (onlyIn1.length === 1 && onlyIn2.length === 1) {\n      const idx1 = onlyIn1[0];\n      const idx2 = onlyIn2[0];\n      \n      if (guess1.correctCount > guess2.correctCount) {\n        // idx1은 정답, idx2는 오답\n        if (!definiteAnswers.has(idx1) && !definiteWrongs.has(idx1)) {\n          definiteAnswers.add(idx1);\n          console.log(`비교 분석: ${gameState.keywords[idx1]}는 정답!`);\n        }\n        if (!definiteWrongs.has(idx2) && !definiteAnswers.has(idx2)) {\n          definiteWrongs.add(idx2);\n          console.log(`비교 분석: ${gameState.keywords[idx2]}는 오답!`);\n        }\n      } else if (guess2.correctCount > guess1.correctCount) {\n        // idx2는 정답, idx1은 오답\n        if (!definiteAnswers.has(idx2) && !definiteWrongs.has(idx2)) {\n          definiteAnswers.add(idx2);\n          console.log(`비교 분석: ${gameState.keywords[idx2]}는 정답!`);\n        }\n        if (!definiteWrongs.has(idx1) && !definiteAnswers.has(idx1)) {\n          definiteWrongs.add(idx1);\n          console.log(`비교 분석: ${gameState.keywords[idx1]}은 오답!`);\n        }\n      }\n    }\n  }\n\n  // 제약 조건 확인\n  private checkConstraints(\n    guess: GuessHistory, \n    definiteAnswers: Set<number>, \n    definiteWrongs: Set<number>, \n    gameState: GameStateForAI\n  ): void {\n    let knownAnswers = 0;\n    let knownWrongs = 0;\n    const unknownIndices: number[] = [];\n    \n    guess.guess.forEach(idx => {\n      if (definiteAnswers.has(idx)) {\n        knownAnswers++;\n      } else if (definiteWrongs.has(idx)) {\n        knownWrongs++;\n      } else {\n        unknownIndices.push(idx);\n      }\n    });\n    \n    // 알려진 정답만으로 이미 correctCount를 달성한 경우\n    if (knownAnswers === guess.correctCount) {\n      // 나머지 unknown은 모두 오답\n      unknownIndices.forEach(idx => {\n        if (!definiteWrongs.has(idx)) {\n          definiteWrongs.add(idx);\n          console.log(`제약 조건: ${gameState.keywords[idx]}는 오답 (이미 충분한 정답)`);\n        }\n      });\n    }\n    \n    // unknown과 known answers의 합이 정확히 correctCount인 경우\n    if (knownAnswers + unknownIndices.length === guess.correctCount && unknownIndices.length > 0) {\n      // 모든 unknown이 정답\n      unknownIndices.forEach(idx => {\n        if (!definiteAnswers.has(idx)) {\n          definiteAnswers.add(idx);\n          console.log(`제약 조건: ${gameState.keywords[idx]}는 정답 (나머지 모두 정답)`);\n        }\n      });\n    }\n  }\n\n  // 각 키워드의 점수 계산\n  private calculateScores(\n    gameState: GameStateForAI, \n    possibleKeywords: number[], \n    definiteAnswers: Set<number>, \n    definiteWrongs: Set<number>\n  ): Map<number, number> {\n    const scores = new Map<number, number>();\n    \n    // 확실한 정답은 최고 점수\n    definiteAnswers.forEach(idx => {\n      scores.set(idx, 1000);\n    });\n    \n    // 가능한 키워드들의 점수 계산\n    possibleKeywords.forEach(idx => {\n      if (!definiteAnswers.has(idx) && !definiteWrongs.has(idx)) {\n        const score = this.calculateKeywordScore(idx, gameState, definiteAnswers, definiteWrongs);\n        scores.set(idx, score);\n      }\n    });\n    \n    // 점수별로 정렬하여 출력\n    const sorted = Array.from(scores.entries())\n      .sort((a, b) => b[1] - a[1])\n      .slice(0, 10);\n    \n    console.log('상위 10개 키워드 점수:');\n    sorted.forEach(([idx, score]) => {\n      console.log(`  ${gameState.keywords[idx]}: ${score.toFixed(2)}점`);\n    });\n    \n    return scores;\n  }\n\n  // 개별 키워드 점수 계산\n  private calculateKeywordScore(\n    keywordIdx: number, \n    gameState: GameStateForAI, \n    definiteAnswers: Set<number>, \n    definiteWrongs: Set<number>\n  ): number {\n    let totalAppearances = 0;\n    let weightedCorrect = 0;\n    \n    gameState.previousGuesses.forEach(guess => {\n      if (guess.guess.includes(keywordIdx)) {\n        totalAppearances++;\n        \n        // 이 추측에서 알려진 정답/오답 개수\n        let knownAnswers = 0;\n        let knownWrongs = 0;\n        let unknownCount = 0;\n        \n        guess.guess.forEach(idx => {\n          if (definiteAnswers.has(idx)) knownAnswers++;\n          else if (definiteWrongs.has(idx)) knownWrongs++;\n          else unknownCount++;\n        });\n        \n        // 남은 정답 개수\n        const remainingCorrect = Math.max(0, guess.correctCount - knownAnswers);\n        \n        // 이 키워드가 정답일 확률\n        if (unknownCount > 0 && remainingCorrect > 0) {\n          const probability = remainingCorrect / unknownCount;\n          weightedCorrect += probability;\n        }\n      }\n    });\n    \n    // 기본 점수 (아직 선택되지 않은 키워드는 중립적)\n    if (totalAppearances === 0) {\n      return 50; // 중립 점수\n    }\n    \n    // 평균 확률을 점수로 변환\n    return (weightedCorrect / totalAppearances) * 100;\n  }\n\n  // 최종 추측 구성\n  private buildFinalGuess(scores: Map<number, number>, definiteAnswers: Set<number>, answerCount: number): number[] {\n    // 점수 순으로 정렬\n    const sorted = Array.from(scores.entries())\n      .sort((a, b) => b[1] - a[1]);\n    \n    const finalGuess: number[] = [];\n    \n    // 높은 점수부터 선택\n    for (const [idx, score] of sorted) {\n      if (finalGuess.length >= answerCount) break;\n      finalGuess.push(idx);\n    }\n    \n    // 혹시 부족하면 (이런 일은 없어야 함)\n    if (finalGuess.length < answerCount) {\n      console.error('경고: 선택 가능한 키워드가 부족합니다!');\n    }\n    \n    return finalGuess;\n  }\n  \n  // 중복 추측 방지 메서드\n  private preventDuplicateGuess(\n    guess: number[], \n    gameState: GameStateForAI, \n    scores: Map<number, number>\n  ): number[] {\n    // 추측을 정렬하여 문자열로 변환 (순서 무관하게 비교)\n    const guessKey = [...guess].sort((a, b) => a - b).join(',');\n    \n    // 모든 이전 추측들을 수집 (모든 플레이어의 추측 + 내가 이미 시도한 것들)\n    const allPreviousGuesses = new Set<string>(this.previousExactGuesses);\n    gameState.previousGuesses.forEach(prevGuess => {\n      const prevKey = [...prevGuess.guess].sort((a, b) => a - b).join(',');\n      allPreviousGuesses.add(prevKey);\n    });\n    \n    // 디버깅: 중복 검사 상황 로그\n    console.log(`[중복 검사] 현재 추측: ${guessKey}`);\n    console.log(`[중복 검사] 이전 추측 수: ${allPreviousGuesses.size}`);\n    console.log(`[중복 검사] 내 이전 추측들:`, Array.from(this.previousExactGuesses));\n    console.log(`[중복 검사] 전체 이전 추측들:`, Array.from(allPreviousGuesses));\n    \n    // 현재 추측이 이전에 시도한 것인지 확인\n    if (allPreviousGuesses.has(guessKey)) {\n      console.log('경고: 동일한 조합 재시도 감지! 새로운 조합 생성 중...');\n      console.log(`[중복 발견] 추측 키워드: ${guess.map(i => gameState.keywords[i]).join(', ')}`);\n      \n      // 이전 추측에서 해당 조합 찾기\n      const previousGuess = gameState.previousGuesses.find(pg => {\n        const pgKey = [...pg.guess].sort((a, b) => a - b).join(',');\n        return pgKey === guessKey;\n      });\n      \n      if (previousGuess) {\n        console.log(`[중복 발견] 이전 결과: ${previousGuess.correctCount}/${gameState.answerCount} (플레이어 ${previousGuess.playerId})`);\n        \n        if (previousGuess.correctCount > 0 && previousGuess.correctCount < gameState.answerCount) {\n          // 부분 정답인 경우: 반드시 다른 조합 생성\n          console.log('[중복 해결] 부분 정답이므로 체계적 변형 시도');\n          return this.generateSystematicVariation(guess, previousGuess, gameState, scores, allPreviousGuesses);\n        } else {\n          // 완전 정답이거나 완전 오답인 경우\n          console.log('[중복 해결] 완전히 새로운 조합 생성');\n          return this.generateNewCombination(guess, gameState, scores, allPreviousGuesses);\n        }\n      }\n    }\n    \n    return guess;\n  }\n  \n  // 부분 정답일 때 체계적으로 변형\n  private generateSystematicVariation(\n    originalGuess: number[],\n    previousResult: GuessHistory,\n    gameState: GameStateForAI,\n    scores: Map<number, number>,\n    allPreviousGuesses: Set<string>\n  ): number[] {\n    console.log(`이전 결과: ${previousResult.correctCount}/${gameState.answerCount} 정답`);\n    console.log(`이전 추측: ${previousResult.guess.map(i => gameState.keywords[i]).join(', ')}`);\n    \n    // 공개된 정답은 무조건 포함\n    const mustInclude = gameState.revealedAnswers;\n    \n    // 점수가 가장 낮은 키워드부터 교체 시도 (공개된 정답 제외)\n    const sortedByScore = [...originalGuess]\n      .filter(idx => !mustInclude.includes(idx))\n      .sort((a, b) => (scores.get(a) || 0) - (scores.get(b) || 0));\n    \n    // 사용 가능한 대체 후보들 (점수 높은 순)\n    const availableCandidates = Array.from(scores.entries())\n      .filter(([idx]) => !originalGuess.includes(idx))\n      .sort((a, b) => b[1] - a[1])\n      .map(([idx]) => idx);\n    \n    console.log(`교체 가능 키워드: ${sortedByScore.length}개`);\n    console.log(`대체 후보: ${availableCandidates.length}개`);\n    \n    // 교체할 개수 결정: 틀린 개수만큼 교체\n    const wrongCount = gameState.answerCount - previousResult.correctCount;\n    const toReplace = Math.min(wrongCount, sortedByScore.length);\n    \n    console.log(`${toReplace}개 키워드 교체 시도`);\n    \n    // 여러 개를 한 번에 교체\n    for (let replaceCount = 1; replaceCount <= toReplace; replaceCount++) {\n      // 교체할 키워드 선택\n      const toReplaceIndices = sortedByScore.slice(0, replaceCount);\n      \n      // 가능한 모든 조합 시도\n      const newGuess = [...originalGuess];\n      for (let i = 0; i < toReplaceIndices.length && i < availableCandidates.length; i++) {\n        const indexToReplace = newGuess.indexOf(toReplaceIndices[i]);\n        if (indexToReplace !== -1) {\n          newGuess[indexToReplace] = availableCandidates[i];\n        }\n      }\n      \n      // 이 조합이 시도되지 않았다면 사용\n      const newKey = [...newGuess].sort((a, b) => a - b).join(',');\n      if (!allPreviousGuesses.has(newKey)) {\n        console.log(`체계적 변형 (${replaceCount}개 교체): ${toReplaceIndices.map(i => gameState.keywords[i]).join(', ')} → ${availableCandidates.slice(0, replaceCount).map(i => gameState.keywords[i]).join(', ')}`);\n        return newGuess;\n      }\n    }\n    \n    // 모든 체계적 교체가 실패하면 완전히 새로운 조합\n    return this.generateNewCombination(originalGuess, gameState, scores, allPreviousGuesses);\n  }\n  \n  // 완전히 새로운 조합 생성\n  private generateNewCombination(\n    originalGuess: number[],\n    gameState: GameStateForAI,\n    scores: Map<number, number>,\n    allPreviousGuesses: Set<string>\n  ): number[] {\n    // 확실한 정답은 유지\n    const mustInclude = originalGuess.filter(idx => \n      gameState.revealedAnswers.includes(idx)\n    );\n    \n    // 나머지는 점수 높은 순으로 새로 선택\n    const candidates = Array.from(scores.entries())\n      .filter(([idx]) => !mustInclude.includes(idx))\n      .sort((a, b) => b[1] - a[1]);\n    \n    const newGuess = [...mustInclude];\n    const needed = gameState.answerCount - newGuess.length;\n    \n    // 이전과 다른 조합이 나올 때까지 시도\n    let attempts = 0;\n    while (attempts < 10) {\n      const tempGuess = [...mustInclude];\n      \n      // 약간의 무작위성을 추가하여 선택\n      const shuffledCandidates = [...candidates.slice(0, needed * 2)]\n        .sort(() => Math.random() - 0.5);\n      \n      for (let i = 0; i < needed && i < shuffledCandidates.length; i++) {\n        tempGuess.push(shuffledCandidates[i][0]);\n      }\n      \n      const tempKey = [...tempGuess].sort((a, b) => a - b).join(',');\n      if (!allPreviousGuesses.has(tempKey)) {\n        console.log('새로운 조합 생성 성공');\n        console.log(`새 조합: ${tempGuess.map(i => gameState.keywords[i]).join(', ')}`);\n        return tempGuess;\n      }\n      \n      attempts++;\n    }\n    \n    // 최후의 수단: 완전 랜덤\n    console.log('경고: 새로운 조합 생성 실패, 최선의 선택 반환');\n    return originalGuess;\n  }\n\n  abstract getStrategyName(): string;\n  abstract getDescription(): string;\n}","import { BaseStrategy } from './BaseStrategy';\n\nexport class MediumStrategy extends BaseStrategy {\n  // Medium AI는 현재 Easy가 사용하던 BaseStrategy의 논리적 추론을 그대로 사용합니다.\n  // 이는 공개된 정답과 오답을 활용하고, 이전 추측을 분석하며,\n  // 제약 조건을 검사하여 효율적으로 정답을 찾는 방식입니다.\n\n  getStrategyName(): string {\n    return 'Medium AI';\n  }\n\n  getDescription(): string {\n    return '논리적 추론과 제약 조건 분석을 통해 정답을 찾습니다. 공개된 정보를 적극적으로 활용합니다.';\n  }\n}","import { BaseStrategy } from './BaseStrategy';\nimport { GameStateForAI, GuessHistory } from '../types/GameTypes';\n\nexport class HardStrategy extends BaseStrategy {\n  selectKeywords(gameState: GameStateForAI): number[] {\n    // 기본 전략 실행\n    const baseResult = super.selectKeywords(gameState);\n    \n    // Hard AI 전용: 고급 추론 모드\n    const optimizedResult = this.advancedReasoning(gameState, baseResult);\n    \n    return optimizedResult;\n  }\n  \n  private advancedReasoning(gameState: GameStateForAI, baseGuess: number[]): number[] {\n    const { keywords, answerCount, previousGuesses, revealedAnswers } = gameState;\n    \n    // 이미 충분한 정답을 알고 있으면 그대로 반환\n    if (revealedAnswers.length >= answerCount) {\n      return baseGuess;\n    }\n    \n    // 남은 정답 개수가 적을 때 특별 알고리즘 발동\n    const remainingAnswers = answerCount - revealedAnswers.length;\n    if (remainingAnswers <= 3) {\n      console.log(`[Hard AI] 마지막 ${remainingAnswers}개 정답 찾기 모드 활성화`);\n      \n      // 가능한 모든 조합을 시뮬레이션\n      const optimizedGuess = this.findOptimalCombination(gameState);\n      if (optimizedGuess.length > 0) {\n        console.log('[Hard AI] 최적 조합 발견!');\n        return optimizedGuess;\n      }\n    }\n    \n    // 추가 교집합/차집합 분석\n    const refinedGuess = this.refineWithSetAnalysis(gameState, baseGuess);\n    \n    return refinedGuess;\n  }\n  \n  private findOptimalCombination(gameState: GameStateForAI): number[] {\n    const { keywords, answerCount, previousGuesses, revealedAnswers, revealedWrongAnswers, myHints, revealedOtherHints } = gameState;\n    \n    // 확실한 오답 수집\n    const definiteWrongs = new Set<number>([\n      ...revealedWrongAnswers,\n      ...myHints\n    ]);\n    \n    // 공개된 다른 플레이어의 힌트도 오답\n    if (revealedOtherHints) {\n      revealedOtherHints.forEach(({ hints }) => {\n        hints.forEach(h => definiteWrongs.add(h));\n      });\n    }\n    \n    // 과거 추측에서 확실한 오답 추가\n    previousGuesses.forEach(guess => {\n      if (guess.correctCount === 0) {\n        guess.guess.forEach(idx => definiteWrongs.add(idx));\n      }\n    });\n    \n    // 가능한 후보들\n    const possibleIndices: number[] = [];\n    for (let i = 0; i < keywords.length; i++) {\n      if (!definiteWrongs.has(i) && !revealedAnswers.includes(i)) {\n        possibleIndices.push(i);\n      }\n    }\n    \n    // 가능한 조합이 적으면 모든 조합 검증\n    const remainingSlots = answerCount - revealedAnswers.length;\n    if (possibleIndices.length <= 15 && remainingSlots <= 3) {\n      console.log(`[Hard AI] ${possibleIndices.length}개 후보에서 ${remainingSlots}개 선택 조합 검증`);\n      \n      // 모든 조합 생성 및 검증\n      const validCombinations = this.findValidCombinations(\n        possibleIndices, \n        remainingSlots, \n        revealedAnswers,\n        previousGuesses\n      );\n      \n      if (validCombinations.length === 1) {\n        // 유일한 해를 찾음!\n        console.log('[Hard AI] 유일한 정답 조합 발견!');\n        return [...revealedAnswers, ...validCombinations[0]];\n      } else if (validCombinations.length > 1) {\n        // 여러 가능성이 있을 때 가장 확률 높은 것 선택\n        console.log(`[Hard AI] ${validCombinations.length}개의 가능한 조합 중 최적 선택`);\n        return [...revealedAnswers, ...validCombinations[0]];\n      }\n    }\n    \n    return [];\n  }\n  \n  private findValidCombinations(\n    candidates: number[], \n    slots: number, \n    knownAnswers: number[],\n    previousGuesses: GuessHistory[]\n  ): number[][] {\n    const validCombinations: number[][] = [];\n    \n    // 조합 생성 함수\n    const generateCombinations = (start: number, current: number[]): void => {\n      if (current.length === slots) {\n        // 이 조합이 모든 과거 추측과 일치하는지 검증\n        const testAnswer = [...knownAnswers, ...current];\n        if (this.isValidHypothesis(testAnswer, previousGuesses)) {\n          validCombinations.push([...current]);\n        }\n        return;\n      }\n      \n      for (let i = start; i < candidates.length; i++) {\n        current.push(candidates[i]);\n        generateCombinations(i + 1, current);\n        current.pop();\n      }\n    };\n    \n    generateCombinations(0, []);\n    return validCombinations;\n  }\n  \n  private isValidHypothesis(hypothesis: number[], guesses: GuessHistory[]): boolean {\n    const hypothesisSet = new Set(hypothesis);\n    \n    for (const guess of guesses) {\n      const correctInGuess = guess.guess.filter(g => hypothesisSet.has(g)).length;\n      if (correctInGuess !== guess.correctCount) {\n        return false;\n      }\n    }\n    \n    return true;\n  }\n  \n  private refineWithSetAnalysis(gameState: GameStateForAI, currentGuess: number[]): number[] {\n    const { previousGuesses, answerCount } = gameState;\n    \n    // 이전 추측들의 교집합/차집합 분석으로 확실한 정답 찾기\n    const confirmedAnswers = new Set<number>();\n    \n    // 높은 정답률을 가진 추측들의 교집합 분석\n    const highScoreGuesses = previousGuesses.filter(g => \n      g.correctCount >= answerCount * 0.6\n    );\n    \n    if (highScoreGuesses.length >= 2) {\n      // 교집합에서 공통으로 나타나는 키워드 찾기\n      const firstGuessSet = new Set(highScoreGuesses[0].guess);\n      let intersection = [...firstGuessSet];\n      \n      for (let i = 1; i < highScoreGuesses.length; i++) {\n        intersection = intersection.filter(idx => \n          highScoreGuesses[i].guess.includes(idx)\n        );\n      }\n      \n      // 교집합 크기가 적절하면 신뢰\n      if (intersection.length > 0 && intersection.length <= answerCount) {\n        intersection.forEach(idx => confirmedAnswers.add(idx));\n        console.log(`[Hard AI] 교집합 분석으로 ${intersection.length}개 정답 후보 발견`);\n      }\n    }\n    \n    // 확실한 정답을 우선 포함\n    const refinedGuess = [...confirmedAnswers];\n    \n    // 나머지는 기존 추측에서 채움\n    for (const idx of currentGuess) {\n      if (refinedGuess.length >= answerCount) break;\n      if (!refinedGuess.includes(idx)) {\n        refinedGuess.push(idx);\n      }\n    }\n    \n    return refinedGuess;\n  }\n\n  getStrategyName(): string {\n    return 'Hard AI';\n  }\n\n  getDescription(): string {\n    return '고급 추론과 완전 탐색을 통해 최적의 답을 찾습니다.';\n  }\n}\n","import { IPlayer } from './players/BasePlayer';\nimport { HumanPlayer } from './players/HumanPlayer';\nimport { BuiltInAIPlayer } from './players/BuiltInAIPlayer';\nimport { CustomAIPlayer } from './players/CustomAIPlayer';\nimport { PlayerInfo, PlayerType } from './types/PlayerTypes';\nimport { AIStrategy } from './strategies/AIStrategy';\nimport { EasyStrategy } from './strategies/EasyStrategy';\nimport { MediumStrategy } from './strategies/MediumStrategy';\nimport { HardStrategy } from './strategies/HardStrategy';\n\nexport class PlayerFactory {\n  static createPlayer(playerInfo: PlayerInfo): IPlayer {\n    switch (playerInfo.type) {\n      case 'human':\n        return new HumanPlayer(playerInfo);\n        \n      case 'built-in-ai':\n        const strategy = this.createStrategy(playerInfo.aiDifficulty || 'medium');\n        return new BuiltInAIPlayer(playerInfo, strategy);\n        \n      case 'custom-ai':\n        return new CustomAIPlayer(playerInfo);\n        \n      default:\n        throw new Error(`Unknown player type: ${playerInfo.type}`);\n    }\n  }\n\n  private static createStrategy(difficulty: 'easy' | 'medium' | 'hard'): AIStrategy {\n    // 각 플레이어마다 새로운 strategy 인스턴스 생성\n    switch (difficulty) {\n      case 'easy':\n        return new EasyStrategy();\n      case 'medium':\n        return new MediumStrategy();\n      case 'hard':\n        return new HardStrategy();\n      default:\n        return new MediumStrategy();\n    }\n  }\n\n  static createBuiltInAIOpponent(\n    id: number, \n    difficulty: 'easy' | 'medium' | 'hard' = 'medium'\n  ): IPlayer {\n    const playerInfo: PlayerInfo = {\n      id,\n      nickname: `AI (${difficulty === 'easy' ? '쉬움' : difficulty === 'medium' ? '보통' : '어려움'})`,\n      type: 'built-in-ai',\n      aiDifficulty: difficulty\n    };\n    \n    return this.createPlayer(playerInfo);\n  }\n\n  static isHumanPlayer(player: IPlayer): player is HumanPlayer {\n    return player instanceof HumanPlayer;\n  }\n\n  static isBuiltInAIPlayer(player: IPlayer): player is BuiltInAIPlayer {\n    return player instanceof BuiltInAIPlayer;\n  }\n\n  static isCustomAIPlayer(player: IPlayer): player is CustomAIPlayer {\n    return player instanceof CustomAIPlayer;\n  }\n}","export interface ValidationResult {\n  isValid: boolean;\n  errors: string[];\n  warnings?: string[];\n}\n\nexport interface ComplexityMetrics {\n  lines: number;\n  loops: number;\n  functions: number;\n  complexity: number;\n}\n\nexport class AICodeValidator {\n  private static readonly FORBIDDEN_PATTERNS: Array<{ pattern: RegExp; message: string }> = [\n    { pattern: /eval\\s*\\(/g, message: 'eval() is not allowed' },\n    { pattern: /Function\\s*\\(/g, message: 'Function constructor is not allowed' },\n    { pattern: /setTimeout/g, message: 'setTimeout is not allowed' },\n    { pattern: /setInterval/g, message: 'setInterval is not allowed' },\n    { pattern: /setImmediate/g, message: 'setImmediate is not allowed' },\n    { pattern: /fetch\\s*\\(/g, message: 'fetch() is not allowed' },\n    { pattern: /XMLHttpRequest/g, message: 'XMLHttpRequest is not allowed' },\n    { pattern: /import\\s+/g, message: 'import statements are not allowed' },\n    { pattern: /require\\s*\\(/g, message: 'require() is not allowed' },\n    { pattern: /process\\./g, message: 'process object is not allowed' },\n    { pattern: /global\\./g, message: 'global object is not allowed' },\n    { pattern: /window\\./g, message: 'window object is not allowed' },\n    { pattern: /document\\./g, message: 'document object is not allowed' },\n    { pattern: /self\\./g, message: 'self object is not allowed' },\n    { pattern: /__proto__/g, message: '__proto__ is not allowed' },\n    { pattern: /constructor\\s*\\[/g, message: 'constructor property access is not allowed' },\n    { pattern: /\\.constructor/g, message: 'constructor property is not allowed' },\n    { pattern: /new\\s+Worker/g, message: 'Worker is not allowed' },\n    { pattern: /postMessage/g, message: 'postMessage is not allowed' },\n    { pattern: /localStorage/g, message: 'localStorage is not allowed' },\n    { pattern: /sessionStorage/g, message: 'sessionStorage is not allowed' },\n    { pattern: /indexedDB/g, message: 'indexedDB is not allowed' },\n    { pattern: /crypto\\./g, message: 'crypto object is not allowed' },\n    { pattern: /WebAssembly/g, message: 'WebAssembly is not allowed' },\n    { pattern: /SharedArrayBuffer/g, message: 'SharedArrayBuffer is not allowed' },\n    { pattern: /Atomics/g, message: 'Atomics is not allowed' },\n  ];\n\n  private static readonly MAX_CODE_LENGTH = 10000;\n  private static readonly MAX_LINES = 500;\n  private static readonly MAX_LOOP_DEPTH = 5;\n  private static readonly MAX_FUNCTION_DEPTH = 10;\n\n  static validate(code: string): ValidationResult {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    // 1. Check code length\n    if (code.length > this.MAX_CODE_LENGTH) {\n      errors.push(`Code exceeds maximum length (${code.length}/${this.MAX_CODE_LENGTH} characters)`);\n    }\n\n    // 2. Check line count\n    const lines = code.split('\\n');\n    if (lines.length > this.MAX_LINES) {\n      errors.push(`Code exceeds maximum lines (${lines.length}/${this.MAX_LINES} lines)`);\n    }\n\n    // 3. Check for forbidden patterns\n    for (const { pattern, message } of this.FORBIDDEN_PATTERNS) {\n      if (pattern.test(code)) {\n        errors.push(message);\n      }\n    }\n\n    // 4. Check syntax\n    try {\n      // Use Function constructor to check syntax (in real implementation, this would be in a sandbox)\n      new Function(code);\n    } catch (e: any) {\n      errors.push(`Syntax error: ${e.message}`);\n    }\n\n    // 5. Check for makeGuess function\n    if (!code.includes('function makeGuess') && !code.includes('makeGuess =')) {\n      errors.push('makeGuess function not found');\n    }\n\n    // 6. Check for infinite loops (basic heuristic)\n    const loopPatterns = [\n      /while\\s*\\(\\s*true\\s*\\)/g,\n      /while\\s*\\(\\s*1\\s*\\)/g,\n      /for\\s*\\(\\s*;\\s*;\\s*\\)/g,\n    ];\n    \n    for (const pattern of loopPatterns) {\n      if (pattern.test(code)) {\n        warnings.push('Potential infinite loop detected');\n      }\n    }\n\n    // 7. Check complexity\n    const complexity = this.analyzeComplexity(code);\n    if (complexity.complexity > 100) {\n      warnings.push(`High code complexity detected (score: ${complexity.complexity})`);\n    }\n\n    // 8. Check for suspicious patterns\n    const suspiciousPatterns = [\n      { pattern: /\\bthis\\b/g, message: 'Use of \"this\" keyword may cause issues' },\n      { pattern: /\\barguments\\b/g, message: 'Use of \"arguments\" object is discouraged' },\n      { pattern: /\\.call\\s*\\(/g, message: 'Use of .call() is suspicious' },\n      { pattern: /\\.apply\\s*\\(/g, message: 'Use of .apply() is suspicious' },\n      { pattern: /\\.bind\\s*\\(/g, message: 'Use of .bind() may affect performance' },\n    ];\n\n    for (const { pattern, message } of suspiciousPatterns) {\n      if (pattern.test(code)) {\n        warnings.push(message);\n      }\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings: warnings.length > 0 ? warnings : undefined\n    };\n  }\n\n  private static analyzeComplexity(code: string): ComplexityMetrics {\n    const lines = code.split('\\n').length;\n    const loops = (code.match(/\\b(for|while|do)\\b/g) || []).length;\n    const functions = (code.match(/\\bfunction\\b/g) || []).length;\n    const conditionals = (code.match(/\\b(if|else|switch|case)\\b/g) || []).length;\n    \n    // Simple cyclomatic complexity estimation\n    const complexity = 1 + conditionals + loops;\n\n    return {\n      lines,\n      loops,\n      functions,\n      complexity\n    };\n  }\n\n  static preprocessCode(code: string): string {\n    // Remove comments\n    let processed = code\n      .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove block comments\n      .replace(/\\/\\/.*$/gm, ''); // Remove line comments\n\n    // Trim whitespace\n    processed = processed.trim();\n\n    // Ensure code ends with the makeGuess function being accessible\n    if (!processed.includes('return makeGuess') && processed.includes('function makeGuess')) {\n      processed += '\\n\\n// Auto-added by preprocessor\\nif (typeof makeGuess === \"function\") { makeGuess; }';\n    }\n\n    return processed;\n  }\n}","import './Tetris.css';\n\nconst Tetris = () => {\n    \n    return (\n        <div className=\"tetris-container\">\n            <div className=\"tetris-header\">\n                <h1>AI 테트리스</h1>\n                <p className=\"tetris-description\">\n                    AI로 시작한 테트리스 게임 만들기 프로젝트입니다.\n                    현재 버전에서는 기본적인 테트리스 게임플레이를 구현했습니다.\n                </p>\n            </div>\n\n            <div className=\"tetris-content\">\n                <iframe\n                    src={process.env.PUBLIC_URL + \"/lab/html/tetris.html\"}\n                    title=\"AI Tetris Game\"\n                    className=\"tetris-frame\"\n                    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                    allowFullScreen\n                />\n            </div>\n\n            <div className=\"tetris-info\">\n                <h2>프로젝트 정보</h2>\n                <div className=\"info-grid\">\n                    <div className=\"info-item\">\n                        <h3>개발 기간</h3>\n                        <p>2024.06.11 ~ 현재</p>\n                    </div>\n                    <div className=\"info-item\">\n                        <h3>사용 기술</h3>\n                        <p>HTML, CSS, JavaScript</p>\n                    </div>\n                    <div className=\"info-item\">\n                        <h3>주요 기능</h3>\n                        <ul>\n                            <li>기본 테트리스 게임플레이</li>\n                            <li>점수 시스템</li>\n                            <li>레벨 시스템</li>\n                        </ul>\n                    </div>\n                    <div className=\"info-item\">\n                        <h3>향후 계획</h3>\n                        <ul>\n                            <li>AI 학습 모델 통합</li>\n                            <li>멀티플레이어 지원</li>\n                            <li>커스텀 테마</li>\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\nexport default Tetris;\n","import { useParams } from \"react-router-dom\";\nimport './LabPage.css';\n\nimport { Tetris, DeductionGame } from \"../components/lab/playground\";\n\n\nconst LabDetailPage = () => {\n    const { subject } = useParams()\n    console.log(subject)\n\n\n    const renderContetns = () => {\n        switch (subject) {\n            case \"tetris\":\n                return <Tetris />\n            case \"deduction-game\":\n                return <DeductionGame />\n            default:\n                return (\n                    <h1 className=\"lab-title\">준비중...</h1>\n                )\n        }\n    }\n\n    return (\n        <div className=\"lab-page\">\n             <main className=\"lab-content\">\n                {renderContetns()}\n             </main>\n        </div>\n    )\n}\n\nexport default LabDetailPage;"],"names":["_ref","isExpanded","onToggle","onInsertTemplate","activeTab","setActiveTab","useState","_jsxs","className","concat","children","onClick","_jsx","renderTabContent","DeductionGame","guideSlideIndex","setGuideSlideIndex","isGuideModalOpen","setIsGuideModalOpen","currentScreen","setCurrentScreen","gameMode","setGameMode","playerCount","setPlayerCount","players","setPlayers","gameConfig","setGameConfig","keywordPoolSize","answerCount","hintCount","timeLimit","maxTurns","difficulty","gameState","setGameState","keywords","answers","playerHints","isReady","currentTurn","turnHistory","gameStatus","revealedAnswers","revealedWrongAnswers","hintsViewed","preparationStep","setPreparationStep","selectedKeywords","setSelectedKeywords","timeRemaining","setTimeRemaining","isMyTurn","setIsMyTurn","hintViewingPhase","setHintViewingPhase","currentViewingPlayer","setCurrentViewingPlayer","timerIntervalId","setTimerIntervalId","isSubmitting","setIsSubmitting","aiTimeoutId","setAiTimeoutId","soloDifficulty","setSoloDifficulty","isAIThinking","setIsAIThinking","gameManagerRef","useRef","turnStartTime","setTurnStartTime","codeEditorModal","setCodeEditorModal","isOpen","playerId","globalHintsEnabled","setGlobalHintsEnabled","isGuideExpanded","setIsGuideExpanded","isModalExpanded","setIsModalExpanded","testResults","setTestResults","isTestRunning","setIsTestRunning","testResultIdCounter","setTestResultIdCounter","handleModeSelect","mode","handleDifficultySelect","id","nickname","type","aiLanguage","aiDifficulty","handlePlayerCountSelect","count","newPlayers","i","push","updatePlayer","updates","prev","map","player","_objectSpread","canStartGame","every","_player$aiCode","trim","aiCode","handleStartGame","console","log","handleConfigComplete","initializeGame","keywordCategories","animals","foods","objects","places","actions","generateKeywords","size","Object","values","flat","sort","Math","random","slice","async","Promise","resolve","setTimeout","answerIndices","shuffledIndices","Array","from","length","_","nonAnswerIndices","filter","includes","forEach","hints","availableHints","startActualGame","manager","GameManager","gamePlayers","config","playerInfo","customCode","customLanguage","PlayerFactory","createPlayer","setEventHandlers","onTurnStart","getInfo","Date","now","context","getGameContext","onTurnEnd","result","onGameEnd","winner","winnerInfo","onTimerTick","remainingTime","onAIThinking","thinking","current","startTimer","clearTimer","intervalId","setInterval","clearInterval","handleTimeUp","autoSelection","index","submitGuessWithSelection","runAICodeTest","language","Function","e","newResult","success","message","details","error","r","isFading","tip","testCode","startTime","testResult","eval","executionTime","avgTime","parseFloat","performance","speedLevel","join","selectedIndices","_testResult","Error","String","exitGame","clearTimeout","stopGame","handleGlobalHintsToggle","newValue","updatedContext","revealAnswerHint","revealAnswer","unrevealedAnswers","ans","randomAnswer","floor","revealWrongHint","revealWrongAnswer","wrongAnswers","randomWrong","toggleKeywordSelection","keywordIndex","submitGuess","submitHumanGuess","selection","correctCount","isWinner","currentPlayerId","currentPlayer","find","p","actualTimeUsed","round","turnResult","playerName","guess","guessKeywords","turnNumber","timeUsed","isMaxTurnsReached","undefined","getCurrentPlayer","isGameOver","difficultyPresets","beginner","intermediate","advanced","applyPreset","preset","updateGameConfig","useEffect","renderCodeEditorModal","stopPropagation","title","style","position","AIGuidePanel","template","exampleCode","disabled","_Fragment","onScroll","textarea","currentTarget","nextElementSibling","scrollTop","split","value","onChange","target","lineNumbers","previousElementSibling","placeholder","spellCheck","marginTop","borderTop","paddingTop","minTime","maxTime","fontSize","color","JSON","stringify","renderModeSelection","renderDifficultySelection","renderPlayerSetup","textAlign","justifyContent","num","maxLength","name","checked","htmlFor","width","renderGameConfig","flexWrap","max","min","renderGamePreparation","preparationSteps","description","step","renderGameScreen","isGameFinished","_gameState$playerHint","viewingPlayer","hasViewedHints","nextPlayer","startGame","hintIndex","_players$find","answerIndex","turn","backgroundColor","keyword","isSelected","isRevealedAnswer","isRevealedWrong","renderGuideModal","guideSlides","content","goToPrevSlide","goToNextSlide","getThemeClass","constructor","currentPlayerIndex","gameContext","isGameRunning","turnTimer","revealedHintsPerPlayer","Map","lastHintRevealTurn","globalHintWrongAnswers","temporaryHiddenGlobalHints","this","addPlayer","getPlayers","enabled","idx","clear","calculateGameComplexity","toFixed","calculateExpectedTurns","startNextTurn","_currentPlayer$onTurn","call","isHumanPlayer","startTurnTimer","gameStateForAI","createGameStateForAI","makeGuess","then","processTurn","thinkingTime","handleTimeout","stopTurnTimer","autoGuess","indices","_currentPlayer$onTurn2","timestamp","endGame","myHints","previousGuesses","hintRevealSchedule","getHintRevealSchedule","revealedOtherHints","updateAndGetRevealedHints","complexity","expectedTurns","profile","easy","startRatio","initialInterval","accelerationFactor","medium","hard","startTurn","Infinity","baseTurns","ceil","schedule","lastRevealTurn","get","turnsPassedSinceStart","acceleratedInterval","revealMultiplier","hintsToRevealThisTurn","shouldReveal","revealedHints","_this$players$find3","otherPlayers","otherPlayer","otherPlayerId","otherHints","rh","revealedThisTurn","_this$players$find","randomIndex","newHint","splice","thresholdRatio","gameProgress","isHardAI","isEndgame","totalAvailableHints","hint","_this$players$find2","set","nextInterval","reset","isRunning","handlers","BasePlayer","ready","move","HumanPlayer","super","resolveGuess","isWaitingForInput","BuiltInAIPlayer","strategy","selectKeywords","elapsedTime","setThinkingTime","milliseconds","getStrategy","setStrategy","AICodeExecutor","executionCounter","MAX_EXECUTION_TIME","getInstance","instance","executeUserAI","code","logs","validation","AICodeValidator","validate","isValid","errors","warnings","w","processedCode","preprocessCode","secureGameState","createSecureGameState","executeInWorker","deepFreeze","obj","freeze","getOwnPropertyNames","prop","isFrozen","g","reject","executionId","workerPath","publicUrl","window","location","pathname","startsWith","worker","Worker","timeoutId","terminate","onmessage","event","msgId","data","logMessage","arg","onerror","errorMessage","postMessage","validateGuess","isArray","keywordCount","Number","isInteger","Set","PerformanceMonitor","metricsHistory","MAX_HISTORY_SIZE","measureExecution","executor","metadata","startMemory","getMemoryUsage","endTime","endMemory","metrics","memoryUsage","recordMetrics","errorType","measureSync","memory","usedJSHeapSize","getPlayerStats","playerMetrics","m","totalExecutions","successRate","averageExecutionTime","maxExecutionTime","recentErrors","successful","totalTime","reduce","sum","getGlobalStats","averageSuccessRate","peakExecutionTime","activePlayerCount","peakTime","uniquePlayers","clearHistory","AIExecutionHandler","monitor","executeWithFallback","userCode","executionResult","_error$error","fallbackGuess","generateFallbackGuess","errorDetails","available","selected","validateCode","valid","testAICode","sampleGameState","testGameState","createSampleGameState","CustomAIPlayer","executionHandler","fallbackStrategy","availableIndices","remaining","randomIdx","validateCodeAsync","updateCode","getCode","getLanguage","EasyStrategy","recentGuesses","definiteAnswers","definiteWrongs","add","wrong","availableKeywords","has","finalGuess","answersToUse","maxAnswersToUse","shuffledAnswers","shuffle","remainingCandidates","shuffledCandidates","wrongIndex","wrongCandidates","guessKey","a","b","oldest","next","delete","array","j","getStrategyName","getDescription","BaseStrategy","previousExactGuesses","hintIdx","analyzeAllGuesses","possibleKeywords","scores","calculateScores","buildFinalGuess","preventDuplicateGuess","compareGuesses","checkConstraints","guess1","guess2","onlyIn1","x","onlyIn2","idx1","idx2","knownAnswers","unknownIndices","knownWrongs","score","calculateKeywordScore","sorted","entries","_ref2","keywordIdx","totalAppearances","weightedCorrect","unknownCount","remainingCorrect","allPreviousGuesses","prevGuess","prevKey","previousGuess","pg","generateSystematicVariation","generateNewCombination","originalGuess","previousResult","mustInclude","sortedByScore","availableCandidates","_ref3","_ref4","wrongCount","toReplace","replaceCount","toReplaceIndices","newGuess","indexToReplace","indexOf","newKey","candidates","_ref5","needed","attempts","tempGuess","tempKey","MediumStrategy","HardStrategy","baseResult","advancedReasoning","baseGuess","remainingAnswers","optimizedGuess","findOptimalCombination","refineWithSetAnalysis","h","possibleIndices","remainingSlots","validCombinations","findValidCombinations","slots","generateCombinations","start","pop","testAnswer","isValidHypothesis","hypothesis","guesses","hypothesisSet","currentGuess","confirmedAnswers","highScoreGuesses","intersection","refinedGuess","createStrategy","createBuiltInAIOpponent","arguments","isBuiltInAIPlayer","isCustomAIPlayer","MAX_CODE_LENGTH","lines","MAX_LINES","pattern","FORBIDDEN_PATTERNS","test","loopPatterns","analyzeComplexity","suspiciousPatterns","loops","match","functions","processed","replace","MAX_LOOP_DEPTH","MAX_FUNCTION_DEPTH","Tetris","src","process","allow","allowFullScreen","LabDetailPage","subject","useParams","renderContetns"],"sourceRoot":""}