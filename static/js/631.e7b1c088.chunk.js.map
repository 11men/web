{"version":3,"file":"static/js/631.e7b1c088.chunk.js","mappings":"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","sources":["components/lab/playground/DeductionGame/ai/sandbox/AICodeValidator.ts","components/lab/playground/Tetris/Tetris.tsx","components/lab/playground/DeductionGame/ai/players/BasePlayer.ts","components/lab/playground/DeductionGame/ai/players/HumanPlayer.ts","components/lab/playground/DeductionGame/ai/players/BuiltInAIPlayer.ts","components/lab/playground/DeductionGame/ai/sandbox/AICodeExecutor.ts","components/lab/playground/DeductionGame/ai/sandbox/PerformanceMonitor.ts","components/lab/playground/DeductionGame/ai/sandbox/AIExecutionHandler.ts","components/lab/playground/DeductionGame/ai/players/CustomAIPlayer.ts","components/lab/playground/DeductionGame/ai/strategies/BaseStrategy.ts","components/lab/playground/DeductionGame/ai/strategies/EasyStrategy.ts","components/lab/playground/DeductionGame/ai/strategies/MediumStrategy.ts","components/lab/playground/DeductionGame/ai/strategies/HardStrategy.ts","components/lab/playground/DeductionGame/ai/PlayerFactory.ts","components/lab/playground/DeductionGame/ai/GameManager.ts","components/lab/playground/DeductionGame/DeductionGame.tsx","pages/LabDetailPage.tsx"],"sourcesContent":["export interface ValidationResult {\n  isValid: boolean;\n  errors: string[];\n  warnings?: string[];\n}\n\nexport interface ComplexityMetrics {\n  lines: number;\n  loops: number;\n  functions: number;\n  complexity: number;\n}\n\nexport class AICodeValidator {\n  private static readonly FORBIDDEN_PATTERNS: Array<{ pattern: RegExp; message: string }> = [\n    { pattern: /eval\\s*\\(/g, message: 'eval() is not allowed' },\n    { pattern: /Function\\s*\\(/g, message: 'Function constructor is not allowed' },\n    { pattern: /setTimeout/g, message: 'setTimeout is not allowed' },\n    { pattern: /setInterval/g, message: 'setInterval is not allowed' },\n    { pattern: /setImmediate/g, message: 'setImmediate is not allowed' },\n    { pattern: /fetch\\s*\\(/g, message: 'fetch() is not allowed' },\n    { pattern: /XMLHttpRequest/g, message: 'XMLHttpRequest is not allowed' },\n    { pattern: /import\\s+/g, message: 'import statements are not allowed' },\n    { pattern: /require\\s*\\(/g, message: 'require() is not allowed' },\n    { pattern: /process\\./g, message: 'process object is not allowed' },\n    { pattern: /global\\./g, message: 'global object is not allowed' },\n    { pattern: /window\\./g, message: 'window object is not allowed' },\n    { pattern: /document\\./g, message: 'document object is not allowed' },\n    { pattern: /self\\./g, message: 'self object is not allowed' },\n    { pattern: /__proto__/g, message: '__proto__ is not allowed' },\n    { pattern: /constructor\\s*\\[/g, message: 'constructor property access is not allowed' },\n    { pattern: /\\.constructor/g, message: 'constructor property is not allowed' },\n    { pattern: /new\\s+Worker/g, message: 'Worker is not allowed' },\n    { pattern: /postMessage/g, message: 'postMessage is not allowed' },\n    { pattern: /localStorage/g, message: 'localStorage is not allowed' },\n    { pattern: /sessionStorage/g, message: 'sessionStorage is not allowed' },\n    { pattern: /indexedDB/g, message: 'indexedDB is not allowed' },\n    { pattern: /crypto\\./g, message: 'crypto object is not allowed' },\n    { pattern: /WebAssembly/g, message: 'WebAssembly is not allowed' },\n    { pattern: /SharedArrayBuffer/g, message: 'SharedArrayBuffer is not allowed' },\n    { pattern: /Atomics/g, message: 'Atomics is not allowed' },\n  ];\n\n  private static readonly MAX_CODE_LENGTH = 10000;\n  private static readonly MAX_LINES = 500;\n  private static readonly MAX_LOOP_DEPTH = 5;\n  private static readonly MAX_FUNCTION_DEPTH = 10;\n\n  static validate(code: string): ValidationResult {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    // 1. Check code length\n    if (code.length > this.MAX_CODE_LENGTH) {\n      errors.push(`Code exceeds maximum length (${code.length}/${this.MAX_CODE_LENGTH} characters)`);\n    }\n\n    // 2. Check line count\n    const lines = code.split('\\n');\n    if (lines.length > this.MAX_LINES) {\n      errors.push(`Code exceeds maximum lines (${lines.length}/${this.MAX_LINES} lines)`);\n    }\n\n    // 3. Check for forbidden patterns\n    for (const { pattern, message } of this.FORBIDDEN_PATTERNS) {\n      if (pattern.test(code)) {\n        errors.push(message);\n      }\n    }\n\n    // 4. Check syntax\n    try {\n      // Use Function constructor to check syntax (in real implementation, this would be in a sandbox)\n      new Function(code);\n    } catch (e: any) {\n      errors.push(`Syntax error: ${e.message}`);\n    }\n\n    // 5. Check for makeGuess function\n    if (!code.includes('function makeGuess') && !code.includes('makeGuess =')) {\n      errors.push('makeGuess function not found');\n    }\n\n    // 6. Check for infinite loops (basic heuristic)\n    const loopPatterns = [\n      /while\\s*\\(\\s*true\\s*\\)/g,\n      /while\\s*\\(\\s*1\\s*\\)/g,\n      /for\\s*\\(\\s*;\\s*;\\s*\\)/g,\n    ];\n    \n    for (const pattern of loopPatterns) {\n      if (pattern.test(code)) {\n        warnings.push('Potential infinite loop detected');\n      }\n    }\n\n    // 7. Check complexity\n    const complexity = this.analyzeComplexity(code);\n    if (complexity.complexity > 100) {\n      warnings.push(`High code complexity detected (score: ${complexity.complexity})`);\n    }\n\n    // 8. Check for suspicious patterns\n    const suspiciousPatterns = [\n      { pattern: /\\bthis\\b/g, message: 'Use of \"this\" keyword may cause issues' },\n      { pattern: /\\barguments\\b/g, message: 'Use of \"arguments\" object is discouraged' },\n      { pattern: /\\.call\\s*\\(/g, message: 'Use of .call() is suspicious' },\n      { pattern: /\\.apply\\s*\\(/g, message: 'Use of .apply() is suspicious' },\n      { pattern: /\\.bind\\s*\\(/g, message: 'Use of .bind() may affect performance' },\n    ];\n\n    for (const { pattern, message } of suspiciousPatterns) {\n      if (pattern.test(code)) {\n        warnings.push(message);\n      }\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings: warnings.length > 0 ? warnings : undefined\n    };\n  }\n\n  private static analyzeComplexity(code: string): ComplexityMetrics {\n    const lines = code.split('\\n').length;\n    const loops = (code.match(/\\b(for|while|do)\\b/g) || []).length;\n    const functions = (code.match(/\\bfunction\\b/g) || []).length;\n    const conditionals = (code.match(/\\b(if|else|switch|case)\\b/g) || []).length;\n    \n    // Simple cyclomatic complexity estimation\n    const complexity = 1 + conditionals + loops;\n\n    return {\n      lines,\n      loops,\n      functions,\n      complexity\n    };\n  }\n\n  static preprocessCode(code: string): string {\n    // Remove comments\n    let processed = code\n      .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '') // Remove block comments\n      .replace(/\\/\\/.*$/gm, ''); // Remove line comments\n\n    // Trim whitespace\n    processed = processed.trim();\n\n    // Ensure code ends with the makeGuess function being accessible\n    if (!processed.includes('return makeGuess') && processed.includes('function makeGuess')) {\n      processed += '\\n\\n// Auto-added by preprocessor\\nif (typeof makeGuess === \"function\") { makeGuess; }';\n    }\n\n    return processed;\n  }\n}","import './Tetris.css';\n\nconst Tetris = () => {\n    \n    return (\n        <div className=\"tetris-container\">\n            <div className=\"tetris-header\">\n                <h1>AI 테트리스</h1>\n                <p className=\"tetris-description\">\n                    AI로 시작한 테트리스 게임 만들기 프로젝트입니다.\n                    현재 버전에서는 기본적인 테트리스 게임플레이를 구현했습니다.\n                </p>\n            </div>\n\n            <div className=\"tetris-content\">\n                <iframe\n                    src={process.env.PUBLIC_URL + \"/lab/html/tetris.html\"}\n                    title=\"AI Tetris Game\"\n                    className=\"tetris-frame\"\n                    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                    allowFullScreen\n                />\n            </div>\n\n            <div className=\"tetris-info\">\n                <h2>프로젝트 정보</h2>\n                <div className=\"info-grid\">\n                    <div className=\"info-item\">\n                        <h3>개발 기간</h3>\n                        <p>2024.06.11 ~ 현재</p>\n                    </div>\n                    <div className=\"info-item\">\n                        <h3>사용 기술</h3>\n                        <p>HTML, CSS, JavaScript</p>\n                    </div>\n                    <div className=\"info-item\">\n                        <h3>주요 기능</h3>\n                        <ul>\n                            <li>기본 테트리스 게임플레이</li>\n                            <li>점수 시스템</li>\n                            <li>레벨 시스템</li>\n                        </ul>\n                    </div>\n                    <div className=\"info-item\">\n                        <h3>향후 계획</h3>\n                        <ul>\n                            <li>AI 학습 모델 통합</li>\n                            <li>멀티플레이어 지원</li>\n                            <li>커스텀 테마</li>\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\nexport default Tetris;\n","import { PlayerInfo, PlayerMove } from '../types/PlayerTypes';\nimport { GameStateForAI } from '../types/GameTypes';\n\nexport interface IPlayer {\n  getInfo(): PlayerInfo;\n  \n  makeGuess(gameState: GameStateForAI): Promise<number[]>;\n  \n  isReady(): boolean;\n  \n  onTurnStart?(): void;\n  \n  onTurnEnd?(move: PlayerMove): void;\n  \n  reset(): void;\n}\n\nexport abstract class BasePlayer implements IPlayer {\n  protected playerInfo: PlayerInfo;\n  protected ready: boolean = false;\n\n  constructor(playerInfo: PlayerInfo) {\n    this.playerInfo = playerInfo;\n  }\n\n  getInfo(): PlayerInfo {\n    return this.playerInfo;\n  }\n\n  isReady(): boolean {\n    return this.ready;\n  }\n\n  abstract makeGuess(gameState: GameStateForAI): Promise<number[]>;\n\n  onTurnStart(): void {\n    // Override in subclasses if needed\n  }\n\n  onTurnEnd(move: PlayerMove): void {\n    // Override in subclasses if needed\n  }\n\n  reset(): void {\n    this.ready = false;\n  }\n}","import { BasePlayer } from './BasePlayer';\nimport { PlayerInfo } from '../types/PlayerTypes';\nimport { GameStateForAI } from '../types/GameTypes';\n\nexport class HumanPlayer extends BasePlayer {\n  private resolveGuess?: (indices: number[]) => void;\n  \n  constructor(playerInfo: PlayerInfo) {\n    super(playerInfo);\n    this.ready = true;\n  }\n\n  async makeGuess(gameState: GameStateForAI): Promise<number[]> {\n    return new Promise<number[]>((resolve) => {\n      this.resolveGuess = resolve;\n    });\n  }\n\n  submitGuess(indices: number[]): void {\n    if (this.resolveGuess) {\n      this.resolveGuess(indices);\n      this.resolveGuess = undefined;\n    }\n  }\n\n  isWaitingForInput(): boolean {\n    return this.resolveGuess !== undefined;\n  }\n\n  reset(): void {\n    super.reset();\n    this.resolveGuess = undefined;\n    this.ready = true;\n  }\n}","import { BasePlayer } from './BasePlayer';\nimport { PlayerInfo } from '../types/PlayerTypes';\nimport { GameStateForAI } from '../types/GameTypes';\nimport { AIStrategy } from '../strategies/AIStrategy';\n\nexport class BuiltInAIPlayer extends BasePlayer {\n  private strategy: AIStrategy;\n  private thinkingTime: number = 2000; // 2 seconds by default\n  \n  constructor(playerInfo: PlayerInfo, strategy: AIStrategy) {\n    super(playerInfo);\n    this.strategy = strategy;\n    this.ready = true;\n  }\n\n  async makeGuess(gameState: GameStateForAI): Promise<number[]> {\n    const startTime = Date.now();\n    \n    const selectedIndices = this.strategy.selectKeywords(gameState);\n    \n    const elapsedTime = Date.now() - startTime;\n    const remainingTime = Math.max(0, this.thinkingTime - elapsedTime);\n    \n    if (remainingTime > 0) {\n      await new Promise(resolve => setTimeout(resolve, remainingTime));\n    }\n    \n    return selectedIndices;\n  }\n\n  setThinkingTime(milliseconds: number): void {\n    this.thinkingTime = Math.max(500, milliseconds);\n  }\n\n  getStrategy(): AIStrategy {\n    return this.strategy;\n  }\n\n  setStrategy(strategy: AIStrategy): void {\n    this.strategy = strategy;\n  }\n}","import { GameStateForAI } from '../types/GameTypes';\nimport { AICodeValidator } from './AICodeValidator';\n\nexport interface ExecutionResult {\n  success: boolean;\n  result?: number[];\n  error?: string;\n  executionTime?: number;\n  logs?: string[];\n}\n\nexport interface SecureGameState {\n  readonly keywords: ReadonlyArray<string>;\n  readonly myHints: ReadonlyArray<number>;\n  readonly answerCount: number;\n  readonly previousGuesses: ReadonlyArray<{\n    playerId: number;\n    guess: number[];\n    correctCount: number;\n  }>;\n  readonly revealedAnswers: ReadonlyArray<number>;\n  readonly revealedWrongAnswers: ReadonlyArray<number>;\n  readonly currentTurn: number;\n  readonly timeLimit: number;\n}\n\nexport class AICodeExecutor {\n  private static instance: AICodeExecutor;\n  private executionCounter = 0;\n  private readonly MAX_EXECUTION_TIME = 2500; // 2.5 seconds with buffer\n\n  static getInstance(): AICodeExecutor {\n    if (!AICodeExecutor.instance) {\n      AICodeExecutor.instance = new AICodeExecutor();\n    }\n    return AICodeExecutor.instance;\n  }\n\n  async executeUserAI(\n    code: string,\n    gameState: GameStateForAI,\n    playerId: number\n  ): Promise<ExecutionResult> {\n    const startTime = performance.now();\n    const logs: string[] = [];\n\n    try {\n      // Step 1: Validate code\n      const validation = AICodeValidator.validate(code);\n      if (!validation.isValid) {\n        return {\n          success: false,\n          error: `Code validation failed: ${validation.errors.join('; ')}`,\n          executionTime: performance.now() - startTime\n        };\n      }\n\n      // Log warnings if any\n      if (validation.warnings) {\n        logs.push(...validation.warnings.map(w => `Warning: ${w}`));\n      }\n\n      // Step 2: Preprocess code\n      const processedCode = AICodeValidator.preprocessCode(code);\n\n      // Step 3: Create secure game state\n      const secureGameState = this.createSecureGameState(gameState);\n\n      // Step 4: Execute in worker\n      const result = await this.executeInWorker(processedCode, secureGameState, logs);\n\n      const executionTime = performance.now() - startTime;\n\n      return {\n        success: true,\n        result,\n        executionTime,\n        logs: logs.length > 0 ? logs : undefined\n      };\n\n    } catch (error: any) {\n      const executionTime = performance.now() - startTime;\n      \n      return {\n        success: false,\n        error: error.message || 'Unknown error occurred',\n        executionTime,\n        logs: logs.length > 0 ? logs : undefined\n      };\n    }\n  }\n\n  private createSecureGameState(gameState: GameStateForAI): SecureGameState {\n    // Deep freeze arrays and objects to prevent modification\n    const deepFreeze = <T>(obj: T): T => {\n      Object.freeze(obj);\n      \n      Object.getOwnPropertyNames(obj).forEach(prop => {\n        if (obj[prop as keyof T] !== null\n            && (typeof obj[prop as keyof T] === 'object' || typeof obj[prop as keyof T] === 'function')\n            && !Object.isFrozen(obj[prop as keyof T])) {\n          deepFreeze(obj[prop as keyof T]);\n        }\n      });\n      \n      return obj;\n    };\n\n    return deepFreeze({\n      keywords: [...gameState.keywords],\n      myHints: [...gameState.myHints],\n      answerCount: gameState.answerCount,\n      previousGuesses: gameState.previousGuesses.map(g => ({\n        playerId: g.playerId,\n        guess: [...g.guess],\n        correctCount: g.correctCount\n      })),\n      revealedAnswers: [...gameState.revealedAnswers],\n      revealedWrongAnswers: [...gameState.revealedWrongAnswers],\n      currentTurn: gameState.currentTurn,\n      timeLimit: gameState.timeLimit\n    });\n  }\n\n  private executeInWorker(\n    code: string,\n    gameState: SecureGameState,\n    logs: string[]\n  ): Promise<number[]> {\n    return new Promise((resolve, reject) => {\n      const executionId = `exec_${++this.executionCounter}_${Date.now()}`;\n      \n      // Create worker\n      // Get the correct path for the worker file\n      const publicUrl = process.env.PUBLIC_URL || '';\n      let workerPath = publicUrl + '/ai-worker.js';\n      \n      // In development, if the path starts with /web, use it directly\n      if (window.location.pathname.startsWith('/web') && !workerPath.startsWith('/web')) {\n        workerPath = '/web/ai-worker.js';\n      }\n      \n      const worker = new Worker(workerPath);\n      \n      // Set timeout\n      const timeoutId = setTimeout(() => {\n        worker.terminate();\n        reject(new Error('Execution timeout exceeded (2 seconds)'));\n      }, this.MAX_EXECUTION_TIME);\n\n      // Handle messages\n      worker.onmessage = (event) => {\n        const { type, executionId: msgId, result, error, data } = event.data;\n\n        // Handle console.log messages\n        if (type === 'log' && msgId === executionId) {\n          const logMessage = data.map((arg: any) => \n            typeof arg === 'object' ? JSON.stringify(arg) : String(arg)\n          ).join(' ');\n          logs.push(logMessage);\n          return;\n        }\n\n        // Handle result or error\n        if (msgId === executionId) {\n          clearTimeout(timeoutId);\n          worker.terminate();\n\n          if (error) {\n            reject(new Error(error));\n          } else if (result) {\n            resolve(result);\n          } else {\n            reject(new Error('No result returned from AI'));\n          }\n        }\n      };\n\n      // Handle worker errors\n      worker.onerror = (error) => {\n        clearTimeout(timeoutId);\n        worker.terminate();\n        \n        // More detailed error message\n        let errorMessage = 'Worker error: ';\n        if (error.message) {\n          errorMessage += error.message;\n        } else {\n          errorMessage += 'Failed to load worker file. Make sure ai-worker.js is in the public directory.';\n        }\n        \n        console.error('Worker load error:', error);\n        console.error('Worker path attempted:', workerPath);\n        \n        reject(new Error(errorMessage));\n      };\n\n      // Send execution request\n      worker.postMessage({\n        code,\n        gameState,\n        executionId\n      });\n    });\n  }\n\n  // Helper method to validate guess format\n  static validateGuess(guess: number[], gameState: GameStateForAI): string | null {\n    if (!Array.isArray(guess)) {\n      return 'Guess must be an array';\n    }\n\n    if (guess.length !== gameState.answerCount) {\n      return `Guess must contain exactly ${gameState.answerCount} elements`;\n    }\n\n    const keywordCount = gameState.keywords.length;\n    for (let i = 0; i < guess.length; i++) {\n      const idx = guess[i];\n      \n      if (typeof idx !== 'number' || !Number.isInteger(idx)) {\n        return `Element at index ${i} must be an integer`;\n      }\n\n      if (idx < 0 || idx >= keywordCount) {\n        return `Element at index ${i} (${idx}) is out of bounds`;\n      }\n\n      if (gameState.myHints.includes(idx)) {\n        return `Element at index ${i} (${idx}) is one of your hints`;\n      }\n    }\n\n    const uniqueIndices = new Set(guess);\n    if (uniqueIndices.size !== guess.length) {\n      return 'Guess contains duplicate indices';\n    }\n\n    return null; // Valid\n  }\n}","export interface PerformanceMetrics {\n  executionTime: number;\n  memoryUsage?: number;\n  validationTime?: number;\n  workerCreationTime?: number;\n}\n\nexport interface DetailedMetrics extends PerformanceMetrics {\n  timestamp: number;\n  playerId: number;\n  success: boolean;\n  errorType?: string;\n}\n\nexport class PerformanceMonitor {\n  private static instance: PerformanceMonitor;\n  private metricsHistory: DetailedMetrics[] = [];\n  private readonly MAX_HISTORY_SIZE = 1000;\n\n  static getInstance(): PerformanceMonitor {\n    if (!PerformanceMonitor.instance) {\n      PerformanceMonitor.instance = new PerformanceMonitor();\n    }\n    return PerformanceMonitor.instance;\n  }\n\n  async measureExecution<T>(\n    executor: () => Promise<T>,\n    metadata?: { playerId?: number }\n  ): Promise<[T, PerformanceMetrics]> {\n    const startTime = performance.now();\n    const startMemory = this.getMemoryUsage();\n\n    try {\n      const result = await executor();\n      \n      const endTime = performance.now();\n      const endMemory = this.getMemoryUsage();\n\n      const metrics: PerformanceMetrics = {\n        executionTime: endTime - startTime,\n        memoryUsage: endMemory && startMemory ? endMemory - startMemory : undefined\n      };\n\n      // Record successful execution\n      if (metadata?.playerId !== undefined) {\n        this.recordMetrics({\n          ...metrics,\n          timestamp: Date.now(),\n          playerId: metadata.playerId,\n          success: true\n        });\n      }\n\n      return [result, metrics];\n    } catch (error: any) {\n      const endTime = performance.now();\n      const endMemory = this.getMemoryUsage();\n\n      const metrics: PerformanceMetrics = {\n        executionTime: endTime - startTime,\n        memoryUsage: endMemory && startMemory ? endMemory - startMemory : undefined\n      };\n\n      // Record failed execution\n      if (metadata?.playerId !== undefined) {\n        this.recordMetrics({\n          ...metrics,\n          timestamp: Date.now(),\n          playerId: metadata.playerId,\n          success: false,\n          errorType: error.constructor.name\n        });\n      }\n\n      throw { error, metrics };\n    }\n  }\n\n  measureSync<T>(executor: () => T): [T, PerformanceMetrics] {\n    const startTime = performance.now();\n    const startMemory = this.getMemoryUsage();\n\n    const result = executor();\n    \n    const endTime = performance.now();\n    const endMemory = this.getMemoryUsage();\n\n    const metrics: PerformanceMetrics = {\n      executionTime: endTime - startTime,\n      memoryUsage: endMemory && startMemory ? endMemory - startMemory : undefined\n    };\n\n    return [result, metrics];\n  }\n\n  private getMemoryUsage(): number | undefined {\n    // Check if memory API is available (Chrome/Edge)\n    if ('memory' in performance) {\n      return (performance as any).memory.usedJSHeapSize;\n    }\n    return undefined;\n  }\n\n  private recordMetrics(metrics: DetailedMetrics): void {\n    this.metricsHistory.push(metrics);\n\n    // Keep history size under control\n    if (this.metricsHistory.length > this.MAX_HISTORY_SIZE) {\n      this.metricsHistory = this.metricsHistory.slice(-this.MAX_HISTORY_SIZE);\n    }\n  }\n\n  getPlayerStats(playerId: number): {\n    totalExecutions: number;\n    successRate: number;\n    averageExecutionTime: number;\n    maxExecutionTime: number;\n    recentErrors: string[];\n  } {\n    const playerMetrics = this.metricsHistory.filter(m => m.playerId === playerId);\n    \n    if (playerMetrics.length === 0) {\n      return {\n        totalExecutions: 0,\n        successRate: 0,\n        averageExecutionTime: 0,\n        maxExecutionTime: 0,\n        recentErrors: []\n      };\n    }\n\n    const successful = playerMetrics.filter(m => m.success);\n    const totalTime = playerMetrics.reduce((sum, m) => sum + m.executionTime, 0);\n    const maxTime = Math.max(...playerMetrics.map(m => m.executionTime));\n    \n    const recentErrors = playerMetrics\n      .filter(m => !m.success && m.errorType)\n      .slice(-5)\n      .map(m => m.errorType!);\n\n    return {\n      totalExecutions: playerMetrics.length,\n      successRate: successful.length / playerMetrics.length,\n      averageExecutionTime: totalTime / playerMetrics.length,\n      maxExecutionTime: maxTime,\n      recentErrors\n    };\n  }\n\n  getGlobalStats(): {\n    totalExecutions: number;\n    averageSuccessRate: number;\n    averageExecutionTime: number;\n    peakExecutionTime: number;\n    activePlayerCount: number;\n  } {\n    if (this.metricsHistory.length === 0) {\n      return {\n        totalExecutions: 0,\n        averageSuccessRate: 0,\n        averageExecutionTime: 0,\n        peakExecutionTime: 0,\n        activePlayerCount: 0\n      };\n    }\n\n    const successful = this.metricsHistory.filter(m => m.success);\n    const totalTime = this.metricsHistory.reduce((sum, m) => sum + m.executionTime, 0);\n    const peakTime = Math.max(...this.metricsHistory.map(m => m.executionTime));\n    \n    const uniquePlayers = new Set(this.metricsHistory.map(m => m.playerId));\n\n    return {\n      totalExecutions: this.metricsHistory.length,\n      averageSuccessRate: successful.length / this.metricsHistory.length,\n      averageExecutionTime: totalTime / this.metricsHistory.length,\n      peakExecutionTime: peakTime,\n      activePlayerCount: uniquePlayers.size\n    };\n  }\n\n  clearHistory(): void {\n    this.metricsHistory = [];\n  }\n}","import { GameStateForAI } from '../types/GameTypes';\nimport { AICodeExecutor, ExecutionResult } from './AICodeExecutor';\nimport { PerformanceMonitor, PerformanceMetrics } from './PerformanceMonitor';\n\nexport interface AIExecutionResult {\n  playerId: number;\n  playerName: string;\n  guess: number[];\n  success: boolean;\n  executionTime: number;\n  error?: string;\n  logs?: string[];\n  metrics?: PerformanceMetrics;\n}\n\nexport class AIExecutionHandler {\n  private static instance: AIExecutionHandler;\n  private executor: AICodeExecutor;\n  private monitor: PerformanceMonitor;\n\n  private constructor() {\n    this.executor = AICodeExecutor.getInstance();\n    this.monitor = PerformanceMonitor.getInstance();\n  }\n\n  static getInstance(): AIExecutionHandler {\n    if (!AIExecutionHandler.instance) {\n      AIExecutionHandler.instance = new AIExecutionHandler();\n    }\n    return AIExecutionHandler.instance;\n  }\n\n  async executeWithFallback(\n    userCode: string,\n    gameState: GameStateForAI,\n    playerId: number,\n    playerName: string\n  ): Promise<AIExecutionResult> {\n    try {\n      // Measure execution with performance monitoring\n      const [executionResult, metrics] = await this.monitor.measureExecution(\n        () => this.executor.executeUserAI(userCode, gameState, playerId),\n        { playerId }\n      );\n\n      if (executionResult.success && executionResult.result) {\n        // Log successful execution\n        console.log(`AI execution successful for player ${playerId} (${playerName})`, {\n          executionTime: executionResult.executionTime,\n          guess: executionResult.result,\n          logs: executionResult.logs\n        });\n\n        return {\n          playerId,\n          playerName,\n          guess: executionResult.result,\n          success: true,\n          executionTime: executionResult.executionTime || 0,\n          logs: executionResult.logs,\n          metrics\n        };\n      } else {\n        // Execution failed but was caught properly\n        throw new Error(executionResult.error || 'Unknown execution error');\n      }\n\n    } catch (error: any) {\n      console.error(`AI execution failed for player ${playerId} (${playerName}):`, error);\n\n      // Generate fallback guess\n      const fallbackGuess = this.generateFallbackGuess(gameState);\n      \n      const errorDetails = error.metrics ? {\n        error: error.error?.message || 'Unknown error',\n        executionTime: error.metrics.executionTime\n      } : {\n        error: error.message || 'Unknown error',\n        executionTime: 0\n      };\n\n      return {\n        playerId,\n        playerName,\n        guess: fallbackGuess,\n        success: false,\n        ...errorDetails,\n        metrics: error.metrics\n      };\n    }\n  }\n\n  private generateFallbackGuess(gameState: GameStateForAI): number[] {\n    const available: number[] = [];\n    \n    // Find all available keywords (not hints, not revealed wrong answers)\n    for (let i = 0; i < gameState.keywords.length; i++) {\n      if (!gameState.myHints.includes(i) && \n          !gameState.revealedWrongAnswers.includes(i)) {\n        available.push(i);\n      }\n    }\n\n    // Start with revealed answers\n    const guess = [...gameState.revealedAnswers];\n\n    // Fill remaining slots randomly\n    while (guess.length < gameState.answerCount && available.length > 0) {\n      const randomIndex = Math.floor(Math.random() * available.length);\n      const selected = available.splice(randomIndex, 1)[0];\n      \n      if (!guess.includes(selected)) {\n        guess.push(selected);\n      }\n    }\n\n    // If still not enough (edge case), fill with any valid indices\n    if (guess.length < gameState.answerCount) {\n      for (let i = 0; i < gameState.keywords.length && guess.length < gameState.answerCount; i++) {\n        if (!gameState.myHints.includes(i) && !guess.includes(i)) {\n          guess.push(i);\n        }\n      }\n    }\n\n    return guess.slice(0, gameState.answerCount);\n  }\n\n  // Get execution statistics for a player\n  getPlayerStats(playerId: number) {\n    return this.monitor.getPlayerStats(playerId);\n  }\n\n  // Get global execution statistics\n  getGlobalStats() {\n    return this.monitor.getGlobalStats();\n  }\n\n  // Validate AI code without executing\n  async validateCode(code: string): Promise<{ valid: boolean; errors?: string[]; warnings?: string[] }> {\n    const { AICodeValidator } = await import('./AICodeValidator');\n    \n    const result = AICodeValidator.validate(code);\n    \n    return {\n      valid: result.isValid,\n      errors: result.errors.length > 0 ? result.errors : undefined,\n      warnings: result.warnings\n    };\n  }\n\n  // Test AI code with a sample game state\n  async testAICode(\n    code: string,\n    sampleGameState?: GameStateForAI\n  ): Promise<{\n    success: boolean;\n    result?: number[];\n    error?: string;\n    executionTime?: number;\n    logs?: string[];\n  }> {\n    // Use provided game state or create a sample one\n    const testGameState = sampleGameState || this.createSampleGameState();\n    \n    try {\n      const result = await this.executor.executeUserAI(code, testGameState, -1); // -1 for test player ID\n      return result;\n    } catch (error: any) {\n      return {\n        success: false,\n        error: error.message || 'Test execution failed'\n      };\n    }\n  }\n\n  private createSampleGameState(): GameStateForAI {\n    return {\n      keywords: ['사과', '바나나', '체리', '포도', '망고', '복숭아', '딸기', '수박', '멜론', '키위'],\n      myHints: [1, 3], // 바나나, 포도는 정답이 아님\n      answerCount: 3,\n      previousGuesses: [\n        { playerId: 1, guess: [0, 2, 4], correctCount: 2 },\n        { playerId: 2, guess: [2, 5, 6], correctCount: 1 }\n      ],\n      revealedAnswers: [],\n      revealedWrongAnswers: [7], // 수박은 정답이 아님\n      currentTurn: 3,\n      timeLimit: 60\n    };\n  }\n}","import { BasePlayer } from './BasePlayer';\nimport { PlayerInfo } from '../types/PlayerTypes';\nimport { GameStateForAI } from '../types/GameTypes';\nimport { AIExecutionHandler } from '../sandbox/AIExecutionHandler';\n\nexport class CustomAIPlayer extends BasePlayer {\n  private aiCode: string;\n  private aiLanguage: 'javascript' | 'typescript';\n  private executionHandler: AIExecutionHandler;\n  \n  constructor(playerInfo: PlayerInfo) {\n    super(playerInfo);\n    this.aiCode = playerInfo.customCode || '';\n    this.aiLanguage = playerInfo.customLanguage || 'javascript';\n    this.executionHandler = AIExecutionHandler.getInstance();\n    this.ready = this.validateCode();\n  }\n\n  async makeGuess(gameState: GameStateForAI): Promise<number[]> {\n    try {\n      // Use the secure sandbox execution\n      const result = await this.executionHandler.executeWithFallback(\n        this.aiCode,\n        gameState,\n        this.playerInfo.id,\n        this.playerInfo.nickname\n      );\n\n      if (!result.success) {\n        console.error(`Custom AI execution failed for ${this.playerInfo.nickname}:`, result.error);\n        if (result.logs && result.logs.length > 0) {\n          console.log(`AI logs for ${this.playerInfo.nickname}:`, result.logs);\n        }\n      }\n\n      return result.guess;\n    } catch (error) {\n      console.error('Unexpected error in Custom AI execution:', error);\n      return this.fallbackStrategy(gameState);\n    }\n  }\n\n  private fallbackStrategy(gameState: GameStateForAI): number[] {\n    const availableIndices = Array.from(\n      { length: gameState.keywords.length }, \n      (_, i) => i\n    ).filter(idx => !gameState.revealedWrongAnswers.includes(idx));\n    \n    const selectedIndices = [...gameState.revealedAnswers];\n    \n    while (selectedIndices.length < gameState.answerCount && availableIndices.length > 0) {\n      const remaining = availableIndices.filter(idx => !selectedIndices.includes(idx));\n      if (remaining.length === 0) break;\n      \n      const randomIdx = remaining[Math.floor(Math.random() * remaining.length)];\n      selectedIndices.push(randomIdx);\n    }\n    \n    return selectedIndices;\n  }\n\n  private validateCode(): boolean {\n    if (!this.aiCode.trim()) return false;\n    \n    // Use the execution handler's validation\n    const validationPromise = this.executionHandler.validateCode(this.aiCode);\n    \n    // Since constructor can't be async, we'll do a simple check here\n    // and rely on full validation during execution\n    try {\n      // Basic syntax check\n      new Function(this.aiCode);\n      return true;\n    } catch (error) {\n      console.error('AI code validation error:', error);\n      return false;\n    }\n  }\n\n  async validateCodeAsync(): Promise<{ valid: boolean; errors?: string[]; warnings?: string[] }> {\n    return await this.executionHandler.validateCode(this.aiCode);\n  }\n\n  updateCode(code: string, language: 'javascript' | 'typescript'): void {\n    this.aiCode = code;\n    this.aiLanguage = language;\n    this.ready = this.validateCode();\n  }\n\n  getCode(): string {\n    return this.aiCode;\n  }\n\n  getLanguage(): 'javascript' | 'typescript' {\n    return this.aiLanguage;\n  }\n}","import { AIStrategy } from './AIStrategy';\nimport { GameStateForAI, GuessHistory } from '../types/GameTypes';\n\nexport abstract class BaseStrategy implements AIStrategy {\n  private previousExactGuesses: Set<string> = new Set();\n  \n  selectKeywords(gameState: GameStateForAI): number[] {\n    console.log('=== 지능형 AI 실행 ===');\n    console.log(`턴 ${gameState.currentTurn}: 키워드 ${gameState.keywords.length}개 중 정답 ${gameState.answerCount}개 찾기`);\n    \n    // 1. 확실한 정답과 오답 수집\n    const definiteAnswers = new Set<number>(gameState.revealedAnswers);\n    const definiteWrongs = new Set<number>();\n    \n    // 내 힌트는 모두 오답\n    gameState.myHints.forEach(hint => definiteWrongs.add(hint));\n    \n    // 공개된 오답 추가\n    gameState.revealedWrongAnswers.forEach(wrong => definiteWrongs.add(wrong));\n    \n    // 공개된 다른 플레이어의 힌트도 오답\n    if (gameState.revealedOtherHints && gameState.revealedOtherHints.length > 0) {\n      gameState.revealedOtherHints.forEach(({ hints }) => {\n        hints.forEach(hintIdx => definiteWrongs.add(hintIdx));\n      });\n    }\n    \n    console.log(`내 힌트 (오답): ${gameState.myHints.map(i => gameState.keywords[i])}`);\n    console.log(`공개된 오답: ${gameState.revealedWrongAnswers.map(i => gameState.keywords[i])}`);\n    console.log(`공개된 정답: ${gameState.revealedAnswers.map(i => gameState.keywords[i])}`);\n    \n    // 2. 이전 추측 분석으로 추가 정보 획득\n    this.analyzeAllGuesses(gameState, definiteAnswers, definiteWrongs);\n    \n    // 3. 선택 가능한 키워드 목록 생성\n    const possibleKeywords: number[] = [];\n    for (let i = 0; i < gameState.keywords.length; i++) {\n      if (!definiteWrongs.has(i)) {\n        possibleKeywords.push(i);\n      }\n    }\n    \n    console.log(`확실한 정답: ${definiteAnswers.size}개`);\n    console.log(`확실한 오답: ${definiteWrongs.size}개`);\n    console.log(`선택 가능한 키워드: ${possibleKeywords.length}개`);\n    \n    // 4. 이미 충분한 정답을 아는 경우\n    if (definiteAnswers.size >= gameState.answerCount) {\n      console.log('모든 정답을 알고 있음! 게임 종료!');\n      return Array.from(definiteAnswers).slice(0, gameState.answerCount);\n    }\n    \n    // 5. 각 키워드의 점수 계산\n    const scores = this.calculateScores(gameState, possibleKeywords, definiteAnswers, definiteWrongs);\n    \n    // 6. 최종 추측 구성\n    let finalGuess = this.buildFinalGuess(scores, definiteAnswers, gameState.answerCount);\n    \n    // 7. 중복 추측 방지: 이전과 동일한 조합인지 확인\n    finalGuess = this.preventDuplicateGuess(finalGuess, gameState, scores);\n    \n    // 8. 이번 추측을 기록에 추가\n    const guessKey = [...finalGuess].sort((a, b) => a - b).join(',');\n    this.previousExactGuesses.add(guessKey);\n    \n    console.log('최종 선택:', finalGuess.map(i => gameState.keywords[i]));\n    return finalGuess;\n  }\n\n  // 모든 추측 분석\n  private analyzeAllGuesses(gameState: GameStateForAI, definiteAnswers: Set<number>, definiteWrongs: Set<number>): void {\n    // 1. 정답이 0개인 추측 - 모든 키워드가 오답\n    gameState.previousGuesses.forEach(guess => {\n      if (guess.correctCount === 0) {\n        guess.guess.forEach(idx => {\n          definiteWrongs.add(idx);\n        });\n        console.log(`정답 0개 추측에서 오답 발견: ${guess.guess.map(i => gameState.keywords[i])}`);\n      }\n    });\n    \n    // 2. 추측 간 비교로 확실한 정답/오답 찾기\n    for (let i = 0; i < gameState.previousGuesses.length - 1; i++) {\n      for (let j = i + 1; j < gameState.previousGuesses.length; j++) {\n        this.compareGuesses(\n          gameState.previousGuesses[i], \n          gameState.previousGuesses[j], \n          definiteAnswers, \n          definiteWrongs,\n          gameState\n        );\n      }\n    }\n    \n    // 3. 제약 조건 확인\n    gameState.previousGuesses.forEach(guess => {\n      this.checkConstraints(guess, definiteAnswers, definiteWrongs, gameState);\n    });\n  }\n\n  // 두 추측 비교\n  private compareGuesses(\n    guess1: GuessHistory, \n    guess2: GuessHistory, \n    definiteAnswers: Set<number>, \n    definiteWrongs: Set<number>, \n    gameState: GameStateForAI\n  ): void {\n    // 두 추측의 차이 계산\n    const onlyIn1 = guess1.guess.filter(x => !guess2.guess.includes(x));\n    const onlyIn2 = guess2.guess.filter(x => !guess1.guess.includes(x));\n    \n    // 정확히 하나씩만 다른 경우\n    if (onlyIn1.length === 1 && onlyIn2.length === 1) {\n      const idx1 = onlyIn1[0];\n      const idx2 = onlyIn2[0];\n      \n      if (guess1.correctCount > guess2.correctCount) {\n        // idx1은 정답, idx2는 오답\n        if (!definiteAnswers.has(idx1) && !definiteWrongs.has(idx1)) {\n          definiteAnswers.add(idx1);\n          console.log(`비교 분석: ${gameState.keywords[idx1]}는 정답!`);\n        }\n        if (!definiteWrongs.has(idx2) && !definiteAnswers.has(idx2)) {\n          definiteWrongs.add(idx2);\n          console.log(`비교 분석: ${gameState.keywords[idx2]}는 오답!`);\n        }\n      } else if (guess2.correctCount > guess1.correctCount) {\n        // idx2는 정답, idx1은 오답\n        if (!definiteAnswers.has(idx2) && !definiteWrongs.has(idx2)) {\n          definiteAnswers.add(idx2);\n          console.log(`비교 분석: ${gameState.keywords[idx2]}는 정답!`);\n        }\n        if (!definiteWrongs.has(idx1) && !definiteAnswers.has(idx1)) {\n          definiteWrongs.add(idx1);\n          console.log(`비교 분석: ${gameState.keywords[idx1]}은 오답!`);\n        }\n      }\n    }\n  }\n\n  // 제약 조건 확인\n  private checkConstraints(\n    guess: GuessHistory, \n    definiteAnswers: Set<number>, \n    definiteWrongs: Set<number>, \n    gameState: GameStateForAI\n  ): void {\n    let knownAnswers = 0;\n    let knownWrongs = 0;\n    const unknownIndices: number[] = [];\n    \n    guess.guess.forEach(idx => {\n      if (definiteAnswers.has(idx)) {\n        knownAnswers++;\n      } else if (definiteWrongs.has(idx)) {\n        knownWrongs++;\n      } else {\n        unknownIndices.push(idx);\n      }\n    });\n    \n    // 알려진 정답만으로 이미 correctCount를 달성한 경우\n    if (knownAnswers === guess.correctCount) {\n      // 나머지 unknown은 모두 오답\n      unknownIndices.forEach(idx => {\n        if (!definiteWrongs.has(idx)) {\n          definiteWrongs.add(idx);\n          console.log(`제약 조건: ${gameState.keywords[idx]}는 오답 (이미 충분한 정답)`);\n        }\n      });\n    }\n    \n    // unknown과 known answers의 합이 정확히 correctCount인 경우\n    if (knownAnswers + unknownIndices.length === guess.correctCount && unknownIndices.length > 0) {\n      // 모든 unknown이 정답\n      unknownIndices.forEach(idx => {\n        if (!definiteAnswers.has(idx)) {\n          definiteAnswers.add(idx);\n          console.log(`제약 조건: ${gameState.keywords[idx]}는 정답 (나머지 모두 정답)`);\n        }\n      });\n    }\n  }\n\n  // 각 키워드의 점수 계산\n  private calculateScores(\n    gameState: GameStateForAI, \n    possibleKeywords: number[], \n    definiteAnswers: Set<number>, \n    definiteWrongs: Set<number>\n  ): Map<number, number> {\n    const scores = new Map<number, number>();\n    \n    // 확실한 정답은 최고 점수\n    definiteAnswers.forEach(idx => {\n      scores.set(idx, 1000);\n    });\n    \n    // 가능한 키워드들의 점수 계산\n    possibleKeywords.forEach(idx => {\n      if (!definiteAnswers.has(idx) && !definiteWrongs.has(idx)) {\n        const score = this.calculateKeywordScore(idx, gameState, definiteAnswers, definiteWrongs);\n        scores.set(idx, score);\n      }\n    });\n    \n    // 점수별로 정렬하여 출력\n    const sorted = Array.from(scores.entries())\n      .sort((a, b) => b[1] - a[1])\n      .slice(0, 10);\n    \n    console.log('상위 10개 키워드 점수:');\n    sorted.forEach(([idx, score]) => {\n      console.log(`  ${gameState.keywords[idx]}: ${score.toFixed(2)}점`);\n    });\n    \n    return scores;\n  }\n\n  // 개별 키워드 점수 계산\n  private calculateKeywordScore(\n    keywordIdx: number, \n    gameState: GameStateForAI, \n    definiteAnswers: Set<number>, \n    definiteWrongs: Set<number>\n  ): number {\n    let totalAppearances = 0;\n    let weightedCorrect = 0;\n    \n    gameState.previousGuesses.forEach(guess => {\n      if (guess.guess.includes(keywordIdx)) {\n        totalAppearances++;\n        \n        // 이 추측에서 알려진 정답/오답 개수\n        let knownAnswers = 0;\n        let knownWrongs = 0;\n        let unknownCount = 0;\n        \n        guess.guess.forEach(idx => {\n          if (definiteAnswers.has(idx)) knownAnswers++;\n          else if (definiteWrongs.has(idx)) knownWrongs++;\n          else unknownCount++;\n        });\n        \n        // 남은 정답 개수\n        const remainingCorrect = Math.max(0, guess.correctCount - knownAnswers);\n        \n        // 이 키워드가 정답일 확률\n        if (unknownCount > 0 && remainingCorrect > 0) {\n          const probability = remainingCorrect / unknownCount;\n          weightedCorrect += probability;\n        }\n      }\n    });\n    \n    // 기본 점수 (아직 선택되지 않은 키워드는 중립적)\n    if (totalAppearances === 0) {\n      return 50; // 중립 점수\n    }\n    \n    // 평균 확률을 점수로 변환\n    return (weightedCorrect / totalAppearances) * 100;\n  }\n\n  // 최종 추측 구성\n  private buildFinalGuess(scores: Map<number, number>, definiteAnswers: Set<number>, answerCount: number): number[] {\n    // 점수 순으로 정렬\n    const sorted = Array.from(scores.entries())\n      .sort((a, b) => b[1] - a[1]);\n    \n    const finalGuess: number[] = [];\n    \n    // 높은 점수부터 선택\n    for (const [idx, score] of sorted) {\n      if (finalGuess.length >= answerCount) break;\n      finalGuess.push(idx);\n    }\n    \n    // 혹시 부족하면 (이런 일은 없어야 함)\n    if (finalGuess.length < answerCount) {\n      console.error('경고: 선택 가능한 키워드가 부족합니다!');\n    }\n    \n    return finalGuess;\n  }\n  \n  // 중복 추측 방지 메서드\n  private preventDuplicateGuess(\n    guess: number[], \n    gameState: GameStateForAI, \n    scores: Map<number, number>\n  ): number[] {\n    // 추측을 정렬하여 문자열로 변환 (순서 무관하게 비교)\n    const guessKey = [...guess].sort((a, b) => a - b).join(',');\n    \n    // 모든 이전 추측들을 수집 (모든 플레이어의 추측 + 내가 이미 시도한 것들)\n    const allPreviousGuesses = new Set<string>(this.previousExactGuesses);\n    gameState.previousGuesses.forEach(prevGuess => {\n      const prevKey = [...prevGuess.guess].sort((a, b) => a - b).join(',');\n      allPreviousGuesses.add(prevKey);\n    });\n    \n    // 디버깅: 중복 검사 상황 로그\n    console.log(`[중복 검사] 현재 추측: ${guessKey}`);\n    console.log(`[중복 검사] 이전 추측 수: ${allPreviousGuesses.size}`);\n    console.log(`[중복 검사] 내 이전 추측들:`, Array.from(this.previousExactGuesses));\n    console.log(`[중복 검사] 전체 이전 추측들:`, Array.from(allPreviousGuesses));\n    \n    // 현재 추측이 이전에 시도한 것인지 확인\n    if (allPreviousGuesses.has(guessKey)) {\n      console.log('경고: 동일한 조합 재시도 감지! 새로운 조합 생성 중...');\n      console.log(`[중복 발견] 추측 키워드: ${guess.map(i => gameState.keywords[i]).join(', ')}`);\n      \n      // 이전 추측에서 해당 조합 찾기\n      const previousGuess = gameState.previousGuesses.find(pg => {\n        const pgKey = [...pg.guess].sort((a, b) => a - b).join(',');\n        return pgKey === guessKey;\n      });\n      \n      if (previousGuess) {\n        console.log(`[중복 발견] 이전 결과: ${previousGuess.correctCount}/${gameState.answerCount} (플레이어 ${previousGuess.playerId})`);\n        \n        if (previousGuess.correctCount > 0 && previousGuess.correctCount < gameState.answerCount) {\n          // 부분 정답인 경우: 반드시 다른 조합 생성\n          console.log('[중복 해결] 부분 정답이므로 체계적 변형 시도');\n          return this.generateSystematicVariation(guess, previousGuess, gameState, scores, allPreviousGuesses);\n        } else {\n          // 완전 정답이거나 완전 오답인 경우\n          console.log('[중복 해결] 완전히 새로운 조합 생성');\n          return this.generateNewCombination(guess, gameState, scores, allPreviousGuesses);\n        }\n      }\n    }\n    \n    return guess;\n  }\n  \n  // 부분 정답일 때 체계적으로 변형\n  private generateSystematicVariation(\n    originalGuess: number[],\n    previousResult: GuessHistory,\n    gameState: GameStateForAI,\n    scores: Map<number, number>,\n    allPreviousGuesses: Set<string>\n  ): number[] {\n    console.log(`이전 결과: ${previousResult.correctCount}/${gameState.answerCount} 정답`);\n    console.log(`이전 추측: ${previousResult.guess.map(i => gameState.keywords[i]).join(', ')}`);\n    \n    // 공개된 정답은 무조건 포함\n    const mustInclude = gameState.revealedAnswers;\n    \n    // 점수가 가장 낮은 키워드부터 교체 시도 (공개된 정답 제외)\n    const sortedByScore = [...originalGuess]\n      .filter(idx => !mustInclude.includes(idx))\n      .sort((a, b) => (scores.get(a) || 0) - (scores.get(b) || 0));\n    \n    // 사용 가능한 대체 후보들 (점수 높은 순)\n    const availableCandidates = Array.from(scores.entries())\n      .filter(([idx]) => !originalGuess.includes(idx))\n      .sort((a, b) => b[1] - a[1])\n      .map(([idx]) => idx);\n    \n    console.log(`교체 가능 키워드: ${sortedByScore.length}개`);\n    console.log(`대체 후보: ${availableCandidates.length}개`);\n    \n    // 교체할 개수 결정: 틀린 개수만큼 교체\n    const wrongCount = gameState.answerCount - previousResult.correctCount;\n    const toReplace = Math.min(wrongCount, sortedByScore.length);\n    \n    console.log(`${toReplace}개 키워드 교체 시도`);\n    \n    // 여러 개를 한 번에 교체\n    for (let replaceCount = 1; replaceCount <= toReplace; replaceCount++) {\n      // 교체할 키워드 선택\n      const toReplaceIndices = sortedByScore.slice(0, replaceCount);\n      \n      // 가능한 모든 조합 시도\n      const newGuess = [...originalGuess];\n      for (let i = 0; i < toReplaceIndices.length && i < availableCandidates.length; i++) {\n        const indexToReplace = newGuess.indexOf(toReplaceIndices[i]);\n        if (indexToReplace !== -1) {\n          newGuess[indexToReplace] = availableCandidates[i];\n        }\n      }\n      \n      // 이 조합이 시도되지 않았다면 사용\n      const newKey = [...newGuess].sort((a, b) => a - b).join(',');\n      if (!allPreviousGuesses.has(newKey)) {\n        console.log(`체계적 변형 (${replaceCount}개 교체): ${toReplaceIndices.map(i => gameState.keywords[i]).join(', ')} → ${availableCandidates.slice(0, replaceCount).map(i => gameState.keywords[i]).join(', ')}`);\n        return newGuess;\n      }\n    }\n    \n    // 모든 체계적 교체가 실패하면 완전히 새로운 조합\n    return this.generateNewCombination(originalGuess, gameState, scores, allPreviousGuesses);\n  }\n  \n  // 완전히 새로운 조합 생성\n  private generateNewCombination(\n    originalGuess: number[],\n    gameState: GameStateForAI,\n    scores: Map<number, number>,\n    allPreviousGuesses: Set<string>\n  ): number[] {\n    // 확실한 정답은 유지\n    const mustInclude = originalGuess.filter(idx => \n      gameState.revealedAnswers.includes(idx)\n    );\n    \n    // 나머지는 점수 높은 순으로 새로 선택\n    const candidates = Array.from(scores.entries())\n      .filter(([idx]) => !mustInclude.includes(idx))\n      .sort((a, b) => b[1] - a[1]);\n    \n    const newGuess = [...mustInclude];\n    const needed = gameState.answerCount - newGuess.length;\n    \n    // 이전과 다른 조합이 나올 때까지 시도\n    let attempts = 0;\n    while (attempts < 10) {\n      const tempGuess = [...mustInclude];\n      \n      // 약간의 무작위성을 추가하여 선택\n      const shuffledCandidates = [...candidates.slice(0, needed * 2)]\n        .sort(() => Math.random() - 0.5);\n      \n      for (let i = 0; i < needed && i < shuffledCandidates.length; i++) {\n        tempGuess.push(shuffledCandidates[i][0]);\n      }\n      \n      const tempKey = [...tempGuess].sort((a, b) => a - b).join(',');\n      if (!allPreviousGuesses.has(tempKey)) {\n        console.log('새로운 조합 생성 성공');\n        console.log(`새 조합: ${tempGuess.map(i => gameState.keywords[i]).join(', ')}`);\n        return tempGuess;\n      }\n      \n      attempts++;\n    }\n    \n    // 최후의 수단: 완전 랜덤\n    console.log('경고: 새로운 조합 생성 실패, 최선의 선택 반환');\n    return originalGuess;\n  }\n\n  abstract getStrategyName(): string;\n  abstract getDescription(): string;\n}","import { BaseStrategy } from './BaseStrategy';\n\nexport class EasyStrategy extends BaseStrategy {\n  getStrategyName(): string {\n    return 'Easy AI';\n  }\n\n  getDescription(): string {\n    return '논리적 추론과 제약 조건 분석을 통해 정답을 찾습니다.';\n  }\n}\n","import { BaseStrategy } from './BaseStrategy';\n\nexport class MediumStrategy extends BaseStrategy {\n\n  getStrategyName(): string {\n    return 'Medium AI';\n  }\n\n  getDescription(): string {\n    return '논리적 추론과 제약 조건 분석을 통해 정답을 찾습니다.';\n  }\n}","import { BaseStrategy } from './BaseStrategy';\nimport { GameStateForAI, GuessHistory } from '../types/GameTypes';\n\nexport class HardStrategy extends BaseStrategy {\n  selectKeywords(gameState: GameStateForAI): number[] {\n    // 기본 전략 실행\n    const baseResult = super.selectKeywords(gameState);\n    \n    // Hard AI 전용: 고급 추론 모드\n    const optimizedResult = this.advancedReasoning(gameState, baseResult);\n    \n    return optimizedResult;\n  }\n  \n  private advancedReasoning(gameState: GameStateForAI, baseGuess: number[]): number[] {\n    const { keywords, answerCount, previousGuesses, revealedAnswers } = gameState;\n    \n    // 이미 충분한 정답을 알고 있으면 그대로 반환\n    if (revealedAnswers.length >= answerCount) {\n      return baseGuess;\n    }\n    \n    // 남은 정답 개수가 적을 때 특별 알고리즘 발동\n    const remainingAnswers = answerCount - revealedAnswers.length;\n    if (remainingAnswers <= 3) {\n      console.log(`[Hard AI] 마지막 ${remainingAnswers}개 정답 찾기 모드 활성화`);\n      \n      // 가능한 모든 조합을 시뮬레이션\n      const optimizedGuess = this.findOptimalCombination(gameState);\n      if (optimizedGuess.length > 0) {\n        console.log('[Hard AI] 최적 조합 발견!');\n        return optimizedGuess;\n      }\n    }\n    \n    // 추가 교집합/차집합 분석\n    const refinedGuess = this.refineWithSetAnalysis(gameState, baseGuess);\n    \n    return refinedGuess;\n  }\n  \n  private findOptimalCombination(gameState: GameStateForAI): number[] {\n    const { keywords, answerCount, previousGuesses, revealedAnswers, revealedWrongAnswers, myHints, revealedOtherHints } = gameState;\n    \n    // 확실한 오답 수집\n    const definiteWrongs = new Set<number>([\n      ...revealedWrongAnswers,\n      ...myHints\n    ]);\n    \n    // 공개된 다른 플레이어의 힌트도 오답\n    if (revealedOtherHints) {\n      revealedOtherHints.forEach(({ hints }) => {\n        hints.forEach(h => definiteWrongs.add(h));\n      });\n    }\n    \n    // 과거 추측에서 확실한 오답 추가\n    previousGuesses.forEach(guess => {\n      if (guess.correctCount === 0) {\n        guess.guess.forEach(idx => definiteWrongs.add(idx));\n      }\n    });\n    \n    // 가능한 후보들\n    const possibleIndices: number[] = [];\n    for (let i = 0; i < keywords.length; i++) {\n      if (!definiteWrongs.has(i) && !revealedAnswers.includes(i)) {\n        possibleIndices.push(i);\n      }\n    }\n    \n    // 가능한 조합이 적으면 모든 조합 검증\n    const remainingSlots = answerCount - revealedAnswers.length;\n    if (possibleIndices.length <= 15 && remainingSlots <= 3) {\n      console.log(`[Hard AI] ${possibleIndices.length}개 후보에서 ${remainingSlots}개 선택 조합 검증`);\n      \n      // 모든 조합 생성 및 검증\n      const validCombinations = this.findValidCombinations(\n        possibleIndices, \n        remainingSlots, \n        revealedAnswers,\n        previousGuesses\n      );\n      \n      if (validCombinations.length === 1) {\n        // 유일한 해를 찾음!\n        console.log('[Hard AI] 유일한 정답 조합 발견!');\n        return [...revealedAnswers, ...validCombinations[0]];\n      } else if (validCombinations.length > 1) {\n        // 여러 가능성이 있을 때 가장 확률 높은 것 선택\n        console.log(`[Hard AI] ${validCombinations.length}개의 가능한 조합 중 최적 선택`);\n        return [...revealedAnswers, ...validCombinations[0]];\n      }\n    }\n    \n    return [];\n  }\n  \n  private findValidCombinations(\n    candidates: number[], \n    slots: number, \n    knownAnswers: number[],\n    previousGuesses: GuessHistory[]\n  ): number[][] {\n    const validCombinations: number[][] = [];\n    \n    // 조합 생성 함수\n    const generateCombinations = (start: number, current: number[]): void => {\n      if (current.length === slots) {\n        // 이 조합이 모든 과거 추측과 일치하는지 검증\n        const testAnswer = [...knownAnswers, ...current];\n        if (this.isValidHypothesis(testAnswer, previousGuesses)) {\n          validCombinations.push([...current]);\n        }\n        return;\n      }\n      \n      for (let i = start; i < candidates.length; i++) {\n        current.push(candidates[i]);\n        generateCombinations(i + 1, current);\n        current.pop();\n      }\n    };\n    \n    generateCombinations(0, []);\n    return validCombinations;\n  }\n  \n  private isValidHypothesis(hypothesis: number[], guesses: GuessHistory[]): boolean {\n    const hypothesisSet = new Set(hypothesis);\n    \n    for (const guess of guesses) {\n      const correctInGuess = guess.guess.filter(g => hypothesisSet.has(g)).length;\n      if (correctInGuess !== guess.correctCount) {\n        return false;\n      }\n    }\n    \n    return true;\n  }\n  \n  private refineWithSetAnalysis(gameState: GameStateForAI, currentGuess: number[]): number[] {\n    const { previousGuesses, answerCount } = gameState;\n    \n    // 이전 추측들의 교집합/차집합 분석으로 확실한 정답 찾기\n    const confirmedAnswers = new Set<number>();\n    \n    // 높은 정답률을 가진 추측들의 교집합 분석\n    const highScoreGuesses = previousGuesses.filter(g => \n      g.correctCount >= answerCount * 0.6\n    );\n    \n    if (highScoreGuesses.length >= 2) {\n      // 교집합에서 공통으로 나타나는 키워드 찾기\n      const firstGuessSet = new Set(highScoreGuesses[0].guess);\n      let intersection = [...firstGuessSet];\n      \n      for (let i = 1; i < highScoreGuesses.length; i++) {\n        intersection = intersection.filter(idx => \n          highScoreGuesses[i].guess.includes(idx)\n        );\n      }\n      \n      // 교집합 크기가 적절하면 신뢰\n      if (intersection.length > 0 && intersection.length <= answerCount) {\n        intersection.forEach(idx => confirmedAnswers.add(idx));\n        console.log(`[Hard AI] 교집합 분석으로 ${intersection.length}개 정답 후보 발견`);\n      }\n    }\n    \n    // 확실한 정답을 우선 포함\n    const refinedGuess = [...confirmedAnswers];\n    \n    // 나머지는 기존 추측에서 채움\n    for (const idx of currentGuess) {\n      if (refinedGuess.length >= answerCount) break;\n      if (!refinedGuess.includes(idx)) {\n        refinedGuess.push(idx);\n      }\n    }\n    \n    return refinedGuess;\n  }\n\n  getStrategyName(): string {\n    return 'Hard AI';\n  }\n\n  getDescription(): string {\n    return '고급 추론과 완전 탐색을 통해 최적의 답을 찾습니다.';\n  }\n}\n","import { IPlayer } from './players/BasePlayer';\nimport { HumanPlayer } from './players/HumanPlayer';\nimport { BuiltInAIPlayer } from './players/BuiltInAIPlayer';\nimport { CustomAIPlayer } from './players/CustomAIPlayer';\nimport { PlayerInfo, PlayerType } from './types/PlayerTypes';\nimport { AIStrategy } from './strategies/AIStrategy';\nimport { EasyStrategy } from './strategies/EasyStrategy';\nimport { MediumStrategy } from './strategies/MediumStrategy';\nimport { HardStrategy } from './strategies/HardStrategy';\n\nexport class PlayerFactory {\n  static createPlayer(playerInfo: PlayerInfo): IPlayer {\n    switch (playerInfo.type) {\n      case 'human':\n        return new HumanPlayer(playerInfo);\n        \n      case 'built-in-ai':\n        const strategy = this.createStrategy(playerInfo.aiDifficulty || 'medium');\n        return new BuiltInAIPlayer(playerInfo, strategy);\n        \n      case 'custom-ai':\n        return new CustomAIPlayer(playerInfo);\n        \n      default:\n        throw new Error(`Unknown player type: ${playerInfo.type}`);\n    }\n  }\n\n  private static createStrategy(difficulty: 'easy' | 'medium' | 'hard'): AIStrategy {\n    // 각 플레이어마다 새로운 strategy 인스턴스 생성\n    switch (difficulty) {\n      case 'easy':\n        return new EasyStrategy();\n      case 'medium':\n        return new MediumStrategy();\n      case 'hard':\n        return new HardStrategy();\n      default:\n        return new MediumStrategy();\n    }\n  }\n\n  static createBuiltInAIOpponent(\n    id: number, \n    difficulty: 'easy' | 'medium' | 'hard' = 'medium'\n  ): IPlayer {\n    const playerInfo: PlayerInfo = {\n      id,\n      nickname: `AI (${difficulty === 'easy' ? '쉬움' : difficulty === 'medium' ? '보통' : '어려움'})`,\n      type: 'built-in-ai',\n      aiDifficulty: difficulty\n    };\n    \n    return this.createPlayer(playerInfo);\n  }\n\n  static isHumanPlayer(player: IPlayer): player is HumanPlayer {\n    return player instanceof HumanPlayer;\n  }\n\n  static isBuiltInAIPlayer(player: IPlayer): player is BuiltInAIPlayer {\n    return player instanceof BuiltInAIPlayer;\n  }\n\n  static isCustomAIPlayer(player: IPlayer): player is CustomAIPlayer {\n    return player instanceof CustomAIPlayer;\n  }\n}","import { IPlayer } from './players/BasePlayer';\nimport { HumanPlayer } from './players/HumanPlayer';\nimport { GameContext, GameStateForAI, TurnResult } from './types/GameTypes';\nimport { PlayerInfo } from './types/PlayerTypes';\nimport { PlayerFactory } from './PlayerFactory';\n\nexport interface GameManagerConfig {\n  keywordPoolSize: number;\n  answerCount: number;\n  hintCount: number;\n  timeLimit: number;\n  maxTurns?: number;\n}\n\nexport class GameManager {\n  private players: IPlayer[] = [];\n  private currentPlayerIndex: number = 0;\n  private gameContext: GameContext;\n  private config: GameManagerConfig;\n  private isGameRunning: boolean = false;\n  private turnTimer?: NodeJS.Timeout;\n  private turnStartTime: number = 0;\n  private revealedHintsPerPlayer: Map<number, { playerId: number; hints: number[] }[]> = new Map();\n  private lastHintRevealTurn: Map<number, number> = new Map(); // 각 플레이어의 마지막 힌트 공개 턴\n  \n  private onTurnStart?: (player: IPlayer) => void;\n  private onTurnEnd?: (result: TurnResult) => void;\n  private onGameEnd?: (winner?: IPlayer) => void;\n  private onTimerTick?: (remainingTime: number) => void;\n  private onAIThinking?: (thinking: boolean) => void;\n\n  constructor(config: GameManagerConfig) {\n    this.config = config;\n    this.gameContext = {\n      keywords: [],\n      answers: [],\n      playerHints: {},\n      currentTurn: 0,\n      turnHistory: [],\n      revealedAnswers: [],\n      revealedWrongAnswers: []\n    };\n  }\n\n  addPlayer(player: IPlayer): void {\n    if (this.isGameRunning) {\n      throw new Error('Cannot add players while game is running');\n    }\n    this.players.push(player);\n  }\n\n  setPlayers(players: IPlayer[]): void {\n    if (this.isGameRunning) {\n      throw new Error('Cannot set players while game is running');\n    }\n    this.players = players;\n  }\n\n  getCurrentPlayer(): IPlayer | null {\n    if (!this.isGameRunning || this.players.length === 0) return null;\n    return this.players[this.currentPlayerIndex];\n  }\n\n  getPlayers(): IPlayer[] {\n    return [...this.players];\n  }\n\n  getGameContext(): GameContext {\n    return { ...this.gameContext };\n  }\n\n  async startGame(keywords: string[], answers: number[], playerHints: { [playerId: number]: number[] }): Promise<void> {\n    if (this.players.length === 0) {\n      throw new Error('No players added to the game');\n    }\n\n    this.gameContext = {\n      keywords,\n      answers,\n      playerHints,\n      currentTurn: 1,\n      turnHistory: [],\n      revealedAnswers: [],\n      revealedWrongAnswers: []\n    };\n\n    this.currentPlayerIndex = 0;\n    this.isGameRunning = true;\n    this.revealedHintsPerPlayer.clear();\n    this.lastHintRevealTurn.clear();\n    \n    // 게임 시작 시 설정 정보 로그\n    console.log('=== 게임 설정 ===');\n    console.log(`키워드 풀: ${this.config.keywordPoolSize}개`);\n    console.log(`정답 개수: ${this.config.answerCount}개`);\n    console.log(`힌트 개수: ${this.config.hintCount}개`);\n    console.log(`플레이어 수: ${this.players.length}명`);\n    console.log(`게임 복잡도: ${this.calculateGameComplexity().toFixed(2)}`);\n    console.log(`예상 게임 길이: ${this.calculateExpectedTurns(this.calculateGameComplexity())}턴`);\n    console.log('================');\n\n    await this.startNextTurn();\n  }\n\n  private async startNextTurn(): Promise<void> {\n    if (!this.isGameRunning) return;\n\n    const currentPlayer = this.getCurrentPlayer();\n    if (!currentPlayer) return;\n\n    // 턴 시작 시간 기록\n    this.turnStartTime = Date.now();\n\n    if (this.onTurnStart) {\n      this.onTurnStart(currentPlayer);\n    }\n\n    currentPlayer.onTurnStart?.();\n\n    if (PlayerFactory.isHumanPlayer(currentPlayer)) {\n      this.startTurnTimer();\n      // 인간 플레이어의 경우에도 makeGuess를 호출하여 Promise를 생성\n      const gameStateForAI = this.createGameStateForAI(currentPlayer);\n      currentPlayer.makeGuess(gameStateForAI).then(guess => {\n        this.processTurn(guess);\n      });\n    } else {\n      // AI 플레이어의 경우에도 타이머 시작\n      this.startTurnTimer();\n      \n      // AI 플레이어의 경우, 사람처럼 보이도록 약간의 딜레이 추가\n      if (this.onAIThinking) {\n        this.onAIThinking(true);\n      }\n      \n      const thinkingTime = Math.random() * 2000 + 1500; // 1.5초 ~ 3.5초 사이의 랜덤 시간\n      \n      await new Promise(resolve => setTimeout(resolve, thinkingTime));\n      \n      const gameStateForAI = this.createGameStateForAI(currentPlayer);\n      const guess = await currentPlayer.makeGuess(gameStateForAI);\n      \n      if (this.onAIThinking) {\n        this.onAIThinking(false);\n      }\n      \n      await this.processTurn(guess);\n    }\n  }\n\n  private startTurnTimer(): void {\n    let remainingTime = this.config.timeLimit;\n    \n    if (this.onTimerTick) {\n      this.onTimerTick(remainingTime);\n    }\n\n    this.turnTimer = setInterval(() => {\n      remainingTime--;\n      \n      if (this.onTimerTick) {\n        this.onTimerTick(remainingTime);\n      }\n\n      if (remainingTime <= 0) {\n        this.handleTimeout();\n      }\n    }, 1000);\n  }\n\n  private stopTurnTimer(): void {\n    if (this.turnTimer) {\n      clearInterval(this.turnTimer);\n      this.turnTimer = undefined;\n    }\n  }\n\n  private handleTimeout(): void {\n    this.stopTurnTimer();\n    \n    const currentPlayer = this.getCurrentPlayer();\n    if (!currentPlayer) return;\n    \n    const availableIndices = Array.from(\n      { length: this.gameContext.keywords.length },\n      (_, i) => i\n    ).filter(idx => !this.gameContext.revealedWrongAnswers.includes(idx));\n    \n    const shuffled = [...availableIndices].sort(() => Math.random() - 0.5);\n    const autoGuess = shuffled.slice(0, this.config.answerCount);\n    \n    if (PlayerFactory.isHumanPlayer(currentPlayer)) {\n      // HumanPlayer의 경우 submitGuess를 통해 Promise를 resolve\n      currentPlayer.submitGuess(autoGuess);\n    } else {\n      this.processTurn(autoGuess);\n    }\n  }\n\n  async submitHumanGuess(indices: number[]): Promise<void> {\n    const currentPlayer = this.getCurrentPlayer();\n    \n    if (!currentPlayer || !PlayerFactory.isHumanPlayer(currentPlayer)) {\n      throw new Error('Current player is not a human player');\n    }\n\n    this.stopTurnTimer();\n    currentPlayer.submitGuess(indices);\n    // processTurn은 makeGuess Promise가 resolve될 때 자동으로 호출됨\n  }\n\n  private async processTurn(guess: number[]): Promise<void> {\n    const currentPlayer = this.getCurrentPlayer();\n    if (!currentPlayer) return;\n\n    // 타이머 중지 (중요: AI 플레이어도 타이머를 사용하므로)\n    this.stopTurnTimer();\n\n    const correctCount = guess.filter(idx => \n      this.gameContext.answers.includes(idx)\n    ).length;\n\n    const isWinner = correctCount === this.config.answerCount && \n                     guess.every(idx => this.gameContext.answers.includes(idx));\n\n    // 실제 사용 시간 계산\n    const actualTimeUsed = Math.round((Date.now() - this.turnStartTime) / 1000);\n    \n    const turnResult: TurnResult = {\n      playerId: currentPlayer.getInfo().id,\n      playerName: currentPlayer.getInfo().nickname,\n      guess: [...guess],\n      guessKeywords: guess.map(idx => this.gameContext.keywords[idx]),\n      correctCount,\n      turnNumber: this.gameContext.currentTurn,\n      timeUsed: actualTimeUsed\n    };\n\n    this.gameContext.turnHistory.push(turnResult);\n    \n    currentPlayer.onTurnEnd?.({\n      selectedIndices: guess,\n      timeUsed: turnResult.timeUsed,\n      timestamp: Date.now()\n    });\n\n    if (this.onTurnEnd) {\n      this.onTurnEnd(turnResult);\n    }\n\n    if (isWinner) {\n      this.endGame(currentPlayer);\n    } else if (this.config.maxTurns && this.gameContext.currentTurn >= this.config.maxTurns) {\n      this.endGame();\n    } else {\n      this.gameContext.currentTurn++;\n      this.currentPlayerIndex = (this.currentPlayerIndex + 1) % this.players.length;\n      await this.startNextTurn();\n    }\n  }\n\n  private createGameStateForAI(player: IPlayer): GameStateForAI {\n    const playerInfo = player.getInfo();\n    const myHints = this.gameContext.playerHints[playerInfo.id] || [];\n    \n    const previousGuesses = this.gameContext.turnHistory.map(turn => ({\n      playerId: turn.playerId,\n      guess: turn.guess,\n      correctCount: turn.correctCount\n    }));\n\n    // 난이도별 힌트 공개 주기 설정\n    const hintRevealSchedule = this.getHintRevealSchedule(playerInfo);\n    const revealedOtherHints = this.updateAndGetRevealedHints(playerInfo.id, hintRevealSchedule);\n\n    return {\n      keywords: [...this.gameContext.keywords],\n      myHints,\n      previousGuesses,\n      revealedAnswers: [...this.gameContext.revealedAnswers],\n      revealedWrongAnswers: [...this.gameContext.revealedWrongAnswers],\n      answerCount: this.config.answerCount,\n      currentTurn: this.gameContext.currentTurn,\n      maxTurns: this.config.maxTurns,\n      timeLimit: this.config.timeLimit,\n      revealedOtherHints\n    };\n  }\n\n  private getHintRevealSchedule(playerInfo: PlayerInfo): { startTurn: number; initialInterval: number; accelerationFactor: number } {\n    // AI 난이도에 따른 힌트 공개 스케줄을 동적으로 계산\n    if (playerInfo.type === 'built-in-ai') {\n      // 게임 복잡도 계산\n      const complexity = this.calculateGameComplexity();\n      const expectedTurns = this.calculateExpectedTurns(complexity);\n      \n      // 난이도별 AI 성장 구간 비율 정의 (Medium 강화)\n      const difficultyProfiles = {\n        easy: { \n          startRatio: 0.25,      // 25%에서 시작\n          initialInterval: 4,    // 초기 간격\n          accelerationFactor: 1.5 // 가속도 계수\n        },\n        medium: { \n          startRatio: 0.08,      // 8%에서 시작 (더 빠른 시작)\n          initialInterval: 2,    // 초기 간격 (더 짧게)\n          accelerationFactor: 3.0 // 가속도 계수 (더 빠른 성장)\n        },\n        hard: { \n          startRatio: 0.05,      // 5%에서 시작\n          initialInterval: 1,    // 초기 간격\n          accelerationFactor: 8.0 // 가속도 계수\n        }\n      };\n      \n      const profile = difficultyProfiles[playerInfo.aiDifficulty || 'medium'];\n      \n      // 시작 턴 계산\n      const startTurn = Math.max(1, Math.floor(expectedTurns * profile.startRatio));\n      \n      console.log(`[${playerInfo.aiDifficulty} AI] 예상 게임 길이: ${expectedTurns}턴, 시작: ${startTurn}턴, 초기 간격: ${profile.initialInterval}턴`);\n      \n      return { \n        startTurn, \n        initialInterval: profile.initialInterval,\n        accelerationFactor: profile.accelerationFactor\n      };\n    }\n    // 커스텀 AI나 휴먼 플레이어는 힌트 공개 없음\n    return { startTurn: Infinity, initialInterval: Infinity, accelerationFactor: 1 };\n  }\n  \n  private calculateGameComplexity(): number {\n    // 게임 복잡도 = (키워드 풀 크기 - 정답 개수) / 정답 개수\n    return (this.config.keywordPoolSize - this.config.answerCount) / this.config.answerCount;\n  }\n  \n  private calculateExpectedTurns(complexity: number): number {\n    // 복잡도 기반 예상 게임 길이 계산\n    // 기본 공식: 복잡도 * 난이도 계수 + 최소 턴 수\n    const baseTurns = Math.ceil(complexity * 1.5 + 10);\n    \n    // 최대 턴 수가 설정되어 있으면 그것도 고려\n    if (this.config.maxTurns) {\n      return Math.min(baseTurns, this.config.maxTurns * 0.8); // 최대 턴의 80%를 예상 길이로\n    }\n    \n    return baseTurns;\n  }\n\n  private updateAndGetRevealedHints(playerId: number, schedule: { startTurn: number; initialInterval: number; accelerationFactor: number }): { playerId: number; hints: number[] }[] {\n    const currentTurn = this.gameContext.currentTurn;\n    \n    // 아직 힌트 공개 시작 턴이 안 됐으면 빈 배열 반환\n    if (currentTurn < schedule.startTurn) {\n      return [];\n    }\n\n    // 마지막 힌트 공개 턴 가져오기\n    const lastRevealTurn = this.lastHintRevealTurn.get(playerId) || schedule.startTurn - 1;\n    const turnsPassedSinceStart = currentTurn - schedule.startTurn;\n    \n    // 가속도 기반 간격 계산: 간격 = 초기간격 / (경과턴 / 10 + 1)\n    const acceleratedInterval = Math.max(1, Math.floor(\n      schedule.initialInterval / (1 + turnsPassedSinceStart / (10 / schedule.accelerationFactor))\n    ));\n    \n    // 이번 턴에 공개할 힌트 수 계산: 난이도별로 다르게\n    let revealMultiplier = 0.3;\n    if (schedule.accelerationFactor >= 3.0 && schedule.accelerationFactor < 8.0) { // Medium\n      revealMultiplier = 0.5;\n    } else if (schedule.accelerationFactor >= 8.0) { // Hard\n      revealMultiplier = 1.5; // 더 많이 공개\n    }\n    const hintsToRevealThisTurn = Math.max(1, Math.floor(turnsPassedSinceStart * revealMultiplier));\n    \n    // 간격이 지났는지 확인\n    const shouldReveal = currentTurn >= lastRevealTurn + acceleratedInterval;\n    \n    // 이미 공개된 힌트 가져오기\n    let revealedHints = this.revealedHintsPerPlayer.get(playerId) || [];\n    \n    if (shouldReveal) {\n      // 다른 플레이어들의 힌트 중 아직 공개하지 않은 것들\n      const otherPlayers = this.players.filter(p => p.getInfo().id !== playerId);\n      const availableHints: { playerId: number; hints: number[] }[] = [];\n\n      for (const otherPlayer of otherPlayers) {\n        const otherPlayerId = otherPlayer.getInfo().id;\n        const otherHints = this.gameContext.playerHints[otherPlayerId] || [];\n        \n        // 이미 공개된 플레이어인지 확인\n        if (!revealedHints.find(rh => rh.playerId === otherPlayerId)) {\n          availableHints.push({ playerId: otherPlayerId, hints: otherHints });\n        }\n      }\n\n      // 이번 턴에 여러 힌트 공개\n      let revealedThisTurn = 0;\n      while (revealedThisTurn < hintsToRevealThisTurn && availableHints.length > 0) {\n        const randomIndex = Math.floor(Math.random() * availableHints.length);\n        const newHint = availableHints.splice(randomIndex, 1)[0];\n        revealedHints.push(newHint);\n        revealedThisTurn++;\n        \n        // 힌트 공개 로그\n        const playerInfo = this.players.find(p => p.getInfo().id === playerId)?.getInfo();\n        if (playerInfo) {\n          console.log(`[턴 ${currentTurn}] ${playerInfo.nickname}이(가) 플레이어 ${newHint.playerId}의 힌트 ${newHint.hints.length}개를 알게 되었습니다.`);\n        }\n      }\n      \n      // 난이도별 임계점: Medium은 40%, Hard는 즉시 전체 공개\n      let thresholdRatio = 0.5; // Easy\n      if (schedule.accelerationFactor >= 3.0 && schedule.accelerationFactor < 8.0) { // Medium\n        thresholdRatio = 0.4;\n      } else if (schedule.accelerationFactor >= 8.0) { // Hard\n        thresholdRatio = 0.1; // 10%만 되어도 모두 공개\n      }\n      \n      // Hard AI는 게임 후반(마지막 10%)에 모든 힌트 즉시 공개\n      const gameProgress = currentTurn / (this.config.maxTurns || 30);\n      const isHardAI = schedule.accelerationFactor >= 8.0;\n      const isEndgame = gameProgress >= 0.7; // 70% 진행 시점\n      \n      const totalAvailableHints = (this.players.length - 1);\n      if ((revealedHints.length >= totalAvailableHints * thresholdRatio || (isHardAI && isEndgame)) && availableHints.length > 0) {\n        console.log(`[턴 ${currentTurn}] ${isHardAI && isEndgame ? 'Hard AI 후반 모드 -' : '임계점 도달 -'} 나머지 모든 힌트 공개`);\n        for (const hint of availableHints) {\n          revealedHints.push(hint);\n          const playerInfo = this.players.find(p => p.getInfo().id === playerId)?.getInfo();\n          if (playerInfo) {\n            console.log(`[턴 ${currentTurn}] ${playerInfo.nickname}이(가) 플레이어 ${hint.playerId}의 힌트 ${hint.hints.length}개를 추가로 알게 되었습니다.`);\n          }\n        }\n      }\n      \n      // 마지막 공개 턴 업데이트\n      this.lastHintRevealTurn.set(playerId, currentTurn);\n      \n      // 다음 간격 로그\n      const nextInterval = Math.max(1, Math.floor(\n        schedule.initialInterval / (1 + (turnsPassedSinceStart + 1) / (10 / schedule.accelerationFactor))\n      ));\n      console.log(`[${this.players.find(p => p.getInfo().id === playerId)?.getInfo().nickname}] 다음 힌트 공개까지: ${nextInterval}턴`);\n    }\n\n    // 업데이트된 힌트 저장\n    this.revealedHintsPerPlayer.set(playerId, revealedHints);\n\n    return [...revealedHints];\n  }\n\n  revealAnswer(): boolean {\n    const unrevealedAnswers = this.gameContext.answers.filter(\n      ans => !this.gameContext.revealedAnswers.includes(ans)\n    );\n    \n    if (unrevealedAnswers.length === 0) return false;\n    \n    const randomAnswer = unrevealedAnswers[\n      Math.floor(Math.random() * unrevealedAnswers.length)\n    ];\n    \n    this.gameContext.revealedAnswers.push(randomAnswer);\n    return true;\n  }\n\n  revealWrongAnswer(): boolean {\n    const wrongAnswers = Array.from(\n      { length: this.gameContext.keywords.length },\n      (_, i) => i\n    ).filter(idx => \n      !this.gameContext.answers.includes(idx) && \n      !this.gameContext.revealedWrongAnswers.includes(idx)\n    );\n    \n    if (wrongAnswers.length === 0) return false;\n    \n    const randomWrong = wrongAnswers[\n      Math.floor(Math.random() * wrongAnswers.length)\n    ];\n    \n    this.gameContext.revealedWrongAnswers.push(randomWrong);\n    return true;\n  }\n\n  private endGame(winner?: IPlayer): void {\n    this.stopTurnTimer();\n    this.isGameRunning = false;\n    \n    if (this.onGameEnd) {\n      this.onGameEnd(winner);\n    }\n  }\n\n  stopGame(): void {\n    this.stopTurnTimer();\n    this.isGameRunning = false;\n    this.players.forEach(player => player.reset());\n    this.revealedHintsPerPlayer.clear();\n    this.lastHintRevealTurn.clear();\n  }\n\n  isRunning(): boolean {\n    return this.isGameRunning;\n  }\n\n  setEventHandlers(handlers: {\n    onTurnStart?: (player: IPlayer) => void;\n    onTurnEnd?: (result: TurnResult) => void;\n    onGameEnd?: (winner?: IPlayer) => void;\n    onTimerTick?: (remainingTime: number) => void;\n    onAIThinking?: (thinking: boolean) => void;\n  }): void {\n    this.onTurnStart = handlers.onTurnStart;\n    this.onTurnEnd = handlers.onTurnEnd;\n    this.onGameEnd = handlers.onGameEnd;\n    this.onTimerTick = handlers.onTimerTick;\n    this.onAIThinking = handlers.onAIThinking;\n  }\n}","import React, { useState, useEffect, useRef } from 'react';\nimport './DeductionGame.css';\nimport { GameManager } from './ai/GameManager';\nimport { PlayerFactory } from './ai/PlayerFactory';\nimport { IPlayer } from './ai/players/BasePlayer';\nimport { HumanPlayer } from './ai/players/HumanPlayer';\nimport { PlayerInfo, PlayerType } from './ai/types/PlayerTypes';\n\ntype GameScreen = 'mode-selection' | 'difficulty-selection' | 'player-setup' | 'game-config' | 'game-preparation' | 'game';\ntype GameMode = 'solo' | 'multi';\n\ninterface GameConfig {\n  keywordPoolSize: number;\n  answerCount: number;\n  hintCount: number;\n  timeLimit: number;\n  maxTurns?: number;\n  difficulty: 'beginner' | 'intermediate' | 'advanced' | 'custom';\n}\n\ninterface GameState {\n  keywords: string[];\n  answers: number[];\n  playerHints: { [playerId: number]: number[] };\n  isReady: boolean;\n  currentTurn: number;\n  turnHistory: TurnResult[];\n  gameStatus: 'playing' | 'finished';\n  winner?: number;\n  revealedAnswers: number[];\n  revealedWrongAnswers: number[];\n  hintsViewed: { [playerId: number]: boolean };\n}\n\ninterface TurnResult {\n  playerId: number;\n  playerName: string;\n  guess: number[];\n  guessKeywords: string[];\n  correctCount: number;\n  turnNumber: number;\n  timeUsed: number;\n}\n\ninterface PlayerConfig {\n  id: number;\n  nickname: string;\n  type: PlayerType;\n  aiCode?: string;\n  aiLanguage?: 'javascript' | 'typescript';\n  aiDifficulty?: 'easy' | 'medium' | 'hard';\n}\n\nconst DeductionGame: React.FC = () => {\n  const [guideSlideIndex, setGuideSlideIndex] = useState(0);\n  const [isGuideModalOpen, setIsGuideModalOpen] = useState(false);\n  const [currentScreen, setCurrentScreen] = useState<GameScreen>('mode-selection');\n  const [gameMode, setGameMode] = useState<GameMode>('solo');\n  const [playerCount, setPlayerCount] = useState(2);\n  const [players, setPlayers] = useState<PlayerConfig[]>([]);\n  const [gameConfig, setGameConfig] = useState<GameConfig>({\n    keywordPoolSize: 50,\n    answerCount: 5,\n    hintCount: 5,\n    timeLimit: 60,\n    maxTurns: 20,\n    difficulty: 'intermediate'\n  });\n  const [gameState, setGameState] = useState<GameState>({\n    keywords: [],\n    answers: [],\n    playerHints: {},\n    isReady: false,\n    currentTurn: 0,\n    turnHistory: [],\n    gameStatus: 'playing',\n    revealedAnswers: [],\n    revealedWrongAnswers: [],\n    hintsViewed: {}\n  });\n  const [preparationStep, setPreparationStep] = useState(0);\n  const [selectedKeywords, setSelectedKeywords] = useState<number[]>([]);\n  const [timeRemaining, setTimeRemaining] = useState(0);\n  const [isMyTurn, setIsMyTurn] = useState(false);\n  const [hintViewingPhase, setHintViewingPhase] = useState(false);\n  const [currentViewingPlayer, setCurrentViewingPlayer] = useState(0);\n  const [timerIntervalId, setTimerIntervalId] = useState<NodeJS.Timeout | null>(null);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [aiTimeoutId, setAiTimeoutId] = useState<NodeJS.Timeout | null>(null);\n  const [soloDifficulty, setSoloDifficulty] = useState<'easy' | 'medium' | 'hard'>('medium');\n  const [isAIThinking, setIsAIThinking] = useState(false);\n  const gameManagerRef = useRef<GameManager | null>(null);\n  const [turnStartTime, setTurnStartTime] = useState<number>(0);\n  const [codeEditorModal, setCodeEditorModal] = useState<{ isOpen: boolean; playerId: number | null }>({ \n    isOpen: false, \n    playerId: null \n  });\n\n  const handleModeSelect = (mode: GameMode) => {\n    setGameMode(mode);\n    if (mode === 'solo') {\n      // 솔로 모드는 난이도 선택 화면으로\n      setCurrentScreen('difficulty-selection');\n    } else {\n      // 멀티 모드는 플레이어 수 선택 후 설정\n      setPlayers([]);\n      setCurrentScreen('player-setup');\n    }\n  };\n\n  const handleDifficultySelect = (difficulty: 'easy' | 'medium' | 'hard') => {\n    setSoloDifficulty(difficulty);\n    setPlayerCount(2);\n    setPlayers([\n      { id: 1, nickname: '', type: 'human', aiLanguage: 'javascript' },\n      { id: 2, nickname: `AI (${difficulty === 'easy' ? '쉬움' : difficulty === 'medium' ? '보통' : '어려움'})`, type: 'built-in-ai', aiDifficulty: difficulty }\n    ]);\n    setCurrentScreen('player-setup');\n  };\n\n  const handlePlayerCountSelect = (count: number) => {\n    setPlayerCount(count);\n    const newPlayers: PlayerConfig[] = [];\n    for (let i = 1; i <= count; i++) {\n      newPlayers.push({\n        id: i,\n        nickname: '',\n        type: 'human',\n        aiLanguage: 'javascript'\n      });\n    }\n    setPlayers(newPlayers);\n  };\n\n  const updatePlayer = (id: number, updates: Partial<PlayerConfig>) => {\n    setPlayers(prev => prev.map(player => \n      player.id === id ? { ...player, ...updates } : player\n    ));\n  };\n\n  const canStartGame = () => {\n    return players.every(player => {\n      if (!player.nickname.trim()) return false;\n      if (player.type === 'custom-ai' && !player.aiCode?.trim()) return false;\n      return true;\n    });\n  };\n\n  const handleStartGame = () => {\n    console.log('Moving to game config with players:', players);\n    setCurrentScreen('game-config');\n  };\n\n  const handleConfigComplete = () => {\n    console.log('Game config complete:', gameConfig);\n    setPreparationStep(0);\n    setCurrentScreen('game-preparation');\n    initializeGame();\n  };\n\n  // 키워드 풀 (실제로는 더 많은 키워드가 필요)\n  const keywordCategories = {\n    animals: ['사자', '호랑이', '코끼리', '기린', '원숭이', '코알라', '판다', '펭귄', '독수리', '상어', '고래', '돌고래', '토끼', '고양이', '강아지', '말', '소', '돼지', '양', '염소'],\n    foods: ['피자', '햄버거', '스파게티', '초밥', '김치찌개', '불고기', '치킨', '라면', '떡볶이', '김밥', '샐러드', '스테이크', '카레', '우동', '냉면', '비빔밥', '갈비', '삼겹살', '회', '족발'],\n    objects: ['컴퓨터', '스마트폰', '자동차', '비행기', '기차', '자전거', '책', '연필', '가방', '시계', '안경', '모자', '신발', '옷', '침대', '의자', '책상', '냉장고', '세탁기', '텔레비전'],\n    places: ['학교', '병원', '은행', '카페', '식당', '공원', '해변', '산', '도서관', '박물관', '영화관', '쇼핑몰', '시장', '교회', '지하철역', '공항', '호텔', '집', '회사', '체육관'],\n    actions: ['걷기', '뛰기', '수영', '춤추기', '노래하기', '요리하기', '공부하기', '운전하기', '그림그리기', '글쓰기', '읽기', '잠자기', '먹기', '마시기', '웃기', '울기', '생각하기', '말하기', '듣기', '보기']\n  };\n\n  const generateKeywords = (size: number): string[] => {\n    const allKeywords = Object.values(keywordCategories).flat();\n    const shuffled = [...allKeywords].sort(() => Math.random() - 0.5);\n    return shuffled.slice(0, size);\n  };\n\n  const initializeGame = async () => {\n    // 1단계: 키워드 생성\n    setPreparationStep(1);\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    const keywords = generateKeywords(gameConfig.keywordPoolSize);\n    \n    // 2단계: 정답 선택\n    setPreparationStep(2);\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    const answerIndices: number[] = [];\n    const shuffledIndices = Array.from({length: keywords.length}, (_, i) => i).sort(() => Math.random() - 0.5);\n    for (let i = 0; i < gameConfig.answerCount; i++) {\n      answerIndices.push(shuffledIndices[i]);\n    }\n    \n    // 3단계: 힌트 배포\n    setPreparationStep(3);\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    const playerHints: { [playerId: number]: number[] } = {};\n    const nonAnswerIndices = shuffledIndices.filter(i => !answerIndices.includes(i));\n    \n    players.forEach(player => {\n      const hints: number[] = [];\n      const availableHints = [...nonAnswerIndices].sort(() => Math.random() - 0.5);\n      for (let i = 0; i < gameConfig.hintCount && i < availableHints.length; i++) {\n        hints.push(availableHints[i]);\n      }\n      playerHints[player.id] = hints;\n    });\n    \n    // 4단계: 준비 완료\n    setPreparationStep(4);\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    setGameState({\n      keywords,\n      answers: answerIndices,\n      playerHints,\n      isReady: true,\n      currentTurn: 0,  // GameManager가 관리하므로 0으로 시작\n      turnHistory: [],\n      gameStatus: 'playing',\n      revealedAnswers: [],\n      revealedWrongAnswers: [],\n      hintsViewed: {}\n    });\n    \n    setPreparationStep(5); // 완료 상태\n  };\n\n\n  const startActualGame = () => {\n    // GameManager 초기화\n    const manager = new GameManager({\n      keywordPoolSize: gameConfig.keywordPoolSize,\n      answerCount: gameConfig.answerCount,\n      hintCount: gameConfig.hintCount,\n      timeLimit: gameConfig.timeLimit,\n      maxTurns: gameConfig.maxTurns\n    });\n\n    // 플레이어 생성\n    const gamePlayers: IPlayer[] = players.map(config => {\n      const playerInfo: PlayerInfo = {\n        id: config.id,\n        nickname: config.nickname,\n        type: config.type,\n        aiDifficulty: config.aiDifficulty,\n        customCode: config.aiCode,\n        customLanguage: config.aiLanguage\n      };\n      return PlayerFactory.createPlayer(playerInfo);\n    });\n\n    manager.setPlayers(gamePlayers);\n\n    // 이벤트 핸들러 설정\n    manager.setEventHandlers({\n      onTurnStart: (player) => {\n        const playerInfo = player.getInfo();\n        setIsMyTurn(playerInfo.type === 'human');\n        // 턴 시작 시간 기록\n        setTurnStartTime(Date.now());\n        // GameManager의 currentTurn과 동기화\n        const context = manager.getGameContext();\n        setGameState(prev => ({\n          ...prev,\n          currentTurn: context.currentTurn\n        }));\n      },\n      onTurnEnd: (result) => {\n        setIsAIThinking(false);\n        setGameState(prev => ({\n          ...prev,\n          turnHistory: [...prev.turnHistory, result]\n        }));\n      },\n      onGameEnd: (winner) => {\n        if (winner) {\n          const winnerInfo = winner.getInfo();\n          setGameState(prev => ({\n            ...prev,\n            gameStatus: 'finished',\n            winner: winnerInfo.id\n          }));\n        } else {\n          setGameState(prev => ({\n            ...prev,\n            gameStatus: 'finished'\n          }));\n        }\n      },\n      onTimerTick: (remainingTime) => {\n        setTimeRemaining(remainingTime);\n      },\n      onAIThinking: (thinking) => {\n        setIsAIThinking(thinking);\n      }\n    });\n\n    gameManagerRef.current = manager;\n\n    setHintViewingPhase(true);\n    setCurrentViewingPlayer(1);\n    setCurrentScreen('game');\n  };\n\n  const startTimer = () => {\n    // GameManager를 사용하는 경우 타이머를 직접 관리하지 않음\n    if (gameManagerRef.current) {\n      return;\n    }\n    \n    // 기존 타이머가 있다면 먼저 정리\n    clearTimer();\n    \n    // 턴 시작 시간 기록\n    setTurnStartTime(Date.now());\n    setTimeRemaining(gameConfig.timeLimit);\n    \n    const intervalId = setInterval(() => {\n      setTimeRemaining(prev => {\n        if (prev <= 1) {\n          // 타이머를 먼저 정리하고 handleTimeUp 호출\n          clearInterval(intervalId);\n          setTimerIntervalId(null);\n          // setTimeout으로 다음 프레임에서 실행하여 상태 업데이트 충돌 방지\n          setTimeout(() => {\n            handleTimeUp();\n          }, 0);\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n    \n    setTimerIntervalId(intervalId);\n  };\n\n  const clearTimer = () => {\n    if (timerIntervalId) {\n      clearInterval(timerIntervalId);\n      setTimerIntervalId(null);\n    }\n  };\n\n  const handleTimeUp = () => {\n    // 시간 초과시 랜덤하게 키워드 선택하여 자동 제출\n    const availableKeywords = gameState.keywords\n      .map((_, index) => index)\n      .filter(index => !gameState.revealedWrongAnswers.includes(index));\n    \n    const shuffled = [...availableKeywords].sort(() => Math.random() - 0.5);\n    const autoSelection = shuffled.slice(0, gameConfig.answerCount);\n    \n    setSelectedKeywords(autoSelection);\n    \n    // 잠시 후 자동 제출\n    setTimeout(() => {\n      submitGuessWithSelection(autoSelection);\n    }, 500);\n  };\n\n  const exitGame = () => {\n    clearTimer();\n    // AI 타임아웃도 정리\n    if (aiTimeoutId) {\n      clearTimeout(aiTimeoutId);\n      setAiTimeoutId(null);\n    }\n    // GameManager 정리\n    if (gameManagerRef.current) {\n      gameManagerRef.current.stopGame();\n      gameManagerRef.current = null;\n    }\n    setCurrentScreen('mode-selection');\n    // 게임 상태 초기화\n    setGameState({\n      keywords: [],\n      answers: [],\n      playerHints: {},\n      isReady: false,\n      currentTurn: 0,\n      turnHistory: [],\n      gameStatus: 'playing',\n      revealedAnswers: [],\n      revealedWrongAnswers: [],\n      hintsViewed: {}\n    });\n    setSelectedKeywords([]);\n    setTimeRemaining(0);\n    setIsMyTurn(false);\n    setIsAIThinking(false);\n    setHintViewingPhase(false);\n    setCurrentViewingPlayer(0);\n    setIsSubmitting(false);\n  };\n\n\n  const revealAnswerHint = () => {\n    if (gameManagerRef.current) {\n      const success = gameManagerRef.current.revealAnswer();\n      if (success) {\n        const context = gameManagerRef.current.getGameContext();\n        setGameState(prev => ({\n          ...prev,\n          revealedAnswers: context.revealedAnswers\n        }));\n      }\n    } else {\n      const unrevealedAnswers = gameState.answers.filter(ans => !gameState.revealedAnswers.includes(ans));\n      if (unrevealedAnswers.length > 0) {\n        const randomAnswer = unrevealedAnswers[Math.floor(Math.random() * unrevealedAnswers.length)];\n        setGameState(prev => ({\n          ...prev,\n          revealedAnswers: [...prev.revealedAnswers, randomAnswer]\n        }));\n      }\n    }\n  };\n\n  const revealWrongHint = () => {\n    if (gameManagerRef.current) {\n      const success = gameManagerRef.current.revealWrongAnswer();\n      if (success) {\n        const context = gameManagerRef.current.getGameContext();\n        setGameState(prev => ({\n          ...prev,\n          revealedWrongAnswers: context.revealedWrongAnswers\n        }));\n      }\n    } else {\n      const wrongAnswers = gameState.keywords\n        .map((_, index) => index)\n        .filter(index => !gameState.answers.includes(index) && !gameState.revealedWrongAnswers.includes(index));\n      \n      if (wrongAnswers.length > 0) {\n        const randomWrong = wrongAnswers[Math.floor(Math.random() * wrongAnswers.length)];\n        setGameState(prev => ({\n          ...prev,\n          revealedWrongAnswers: [...prev.revealedWrongAnswers, randomWrong]\n        }));\n      }\n    }\n  };\n\n  const toggleKeywordSelection = (keywordIndex: number) => {\n    setSelectedKeywords(prev => {\n      if (prev.includes(keywordIndex)) {\n        return prev.filter(index => index !== keywordIndex);\n      } else if (prev.length < gameConfig.answerCount) {\n        return [...prev, keywordIndex];\n      }\n      return prev;\n    });\n  };\n\n  const submitGuess = async () => {\n    if (selectedKeywords.length !== gameConfig.answerCount || isSubmitting) return;\n    \n    if (gameManagerRef.current) {\n      setIsSubmitting(true);\n      try {\n        await gameManagerRef.current.submitHumanGuess(selectedKeywords);\n        setSelectedKeywords([]);\n      } catch (error) {\n        console.error('Failed to submit guess:', error);\n      } finally {\n        setIsSubmitting(false);\n      }\n    } else {\n      submitGuessWithSelection(selectedKeywords);\n    }\n  };\n\n  const submitGuessWithSelection = (selection: number[]) => {\n    // GameManager를 사용하는 경우 이 함수를 사용하지 않음\n    if (gameManagerRef.current) return;\n    \n    if (isSubmitting) return;\n    \n    setIsSubmitting(true);\n    \n    // 타이머 정리 (새로운 타이머 시작 전에)\n    clearTimer();\n\n    const correctCount = selection.filter(index => \n      gameState.answers.includes(index)\n    ).length;\n\n    const isWinner = correctCount === gameConfig.answerCount && \n                     selection.every(index => gameState.answers.includes(index));\n\n    const currentPlayerId = ((gameState.currentTurn - 1) % players.length) + 1;\n    const currentPlayer = players.find(p => p.id === currentPlayerId);\n\n    // 실제 사용 시간 계산\n    const actualTimeUsed = turnStartTime ? Math.round((Date.now() - turnStartTime) / 1000) : gameConfig.timeLimit - timeRemaining;\n    \n    const turnResult: TurnResult = {\n      playerId: currentPlayerId,\n      playerName: currentPlayer?.nickname || `플레이어 ${currentPlayerId}`,\n      guess: [...selection],\n      guessKeywords: selection.map(index => gameState.keywords[index]),\n      correctCount,\n      turnNumber: gameState.currentTurn,\n      timeUsed: actualTimeUsed\n    };\n\n    // 최대 턴 수 확인\n    const isMaxTurnsReached = gameConfig.maxTurns && gameState.currentTurn >= gameConfig.maxTurns;\n    \n    setGameState(prev => ({\n      ...prev,\n      turnHistory: [...prev.turnHistory, turnResult],\n      currentTurn: prev.currentTurn + 1,\n      gameStatus: isWinner ? 'finished' : (isMaxTurnsReached ? 'finished' : 'playing'),\n      winner: isWinner ? currentPlayerId : undefined\n    }));\n\n    setSelectedKeywords([]);\n    \n    if (!isWinner && !isMaxTurnsReached) {\n      // 다음 턴을 위해 타이머 재시작\n      setTimeout(() => {\n        startTimer();\n      }, 100);\n    }\n    \n    // 제출 상태 리셋\n    setTimeout(() => {\n      setIsSubmitting(false);\n    }, 500);\n  };\n\n  const getCurrentPlayer = () => {\n    if (gameManagerRef.current) {\n      const currentPlayer = gameManagerRef.current.getCurrentPlayer();\n      if (currentPlayer) {\n        const playerInfo = currentPlayer.getInfo();\n        return players.find(p => p.id === playerInfo.id);\n      }\n    }\n    const currentPlayerId = ((gameState.currentTurn - 1) % players.length) + 1;\n    return players.find(p => p.id === currentPlayerId);\n  };\n\n  const isGameOver = () => {\n    return gameState.gameStatus === 'finished' || \n           (gameConfig.maxTurns && gameState.currentTurn > gameConfig.maxTurns);\n  };\n\n  const difficultyPresets = {\n    beginner: { keywordPoolSize: 30, answerCount: 3, hintCount: 5, timeLimit: 90, maxTurns: 15 },\n    intermediate: { keywordPoolSize: 50, answerCount: 5, hintCount: 5, timeLimit: 60, maxTurns: 20 },\n    advanced: { keywordPoolSize: 80, answerCount: 7, hintCount: 4, timeLimit: 45, maxTurns: 25 }\n  };\n\n  const applyPreset = (difficulty: 'beginner' | 'intermediate' | 'advanced') => {\n    const preset = difficultyPresets[difficulty];\n    setGameConfig({ ...preset, difficulty });\n  };\n\n  const updateGameConfig = (updates: Partial<GameConfig>) => {\n    setGameConfig(prev => ({ ...prev, ...updates, difficulty: 'custom' }));\n  };\n\n  // 컴포넌트 언마운트 시 타이머 정리\n  useEffect(() => {\n    return () => {\n      clearTimer();\n      if (aiTimeoutId) {\n        clearTimeout(aiTimeoutId);\n      }\n    };\n  }, []);\n\n  const renderCodeEditorModal = () => {\n    if (!codeEditorModal.isOpen || !codeEditorModal.playerId) return null;\n    \n    const player = players.find(p => p.id === codeEditorModal.playerId);\n    if (!player) return null;\n\n    return (\n      <div className=\"modal-overlay\" onClick={() => setCodeEditorModal({ isOpen: false, playerId: null })}>\n        <div className=\"modal-content code-editor-modal\" onClick={(e) => e.stopPropagation()}>\n          <div className=\"modal-header\">\n            <h3>{player.nickname} AI 코드 에디터</h3>\n            <button \n              className=\"modal-close\"\n              onClick={() => setCodeEditorModal({ isOpen: false, playerId: null })}\n            >\n              ×\n            </button>\n          </div>\n          \n          <div className=\"code-editor-container\">\n            <div className=\"editor-toolbar\">\n              <div className=\"editor-left\">\n                <span className=\"editor-info\">코드 작성</span>\n                <div className=\"language-selector\">\n                  <button\n                    className={`lang-btn ${player.aiLanguage === 'javascript' ? 'active' : ''}`}\n                    onClick={() => updatePlayer(player.id, { aiLanguage: 'javascript' })}\n                  >\n                    JavaScript\n                  </button>\n                  <button\n                    className={`lang-btn ${player.aiLanguage === 'typescript' ? 'active' : ''}`}\n                    onClick={() => updatePlayer(player.id, { aiLanguage: 'typescript' })}\n                  >\n                    TypeScript\n                  </button>\n                </div>\n              </div>\n              <div className=\"editor-actions\">\n                <button \n                  className=\"btn btn-small\"\n                  onClick={() => updatePlayer(player.id, { aiCode: '' })}\n                >\n                  초기화\n                </button>\n                <button \n                  className=\"btn btn-small\"\n                  onClick={() => {\n                    const exampleCode = player.aiLanguage === 'typescript' \n                      ? `// AI 전략 함수 (TypeScript)\ninterface GameState {\n  keywords: string[];\n  myHints: number[];\n  previousGuesses: number[][];\n  revealedAnswers: number[];\n  revealedWrongs: number[];\n  answerCount: number;\n}\n\nfunction makeGuess(gameState: GameState): number[] {\n  const { keywords, myHints, previousGuesses, revealedAnswers, revealedWrongs, answerCount } = gameState;\n  \n  // 가능한 키워드 인덱스 목록\n  const availableIndices: number[] = keywords\n    .map((_, index) => index)\n    .filter(idx => !revealedWrongs.includes(idx));\n  \n  // 이미 공개된 정답 우선 선택\n  const selectedIndices: number[] = [...revealedAnswers];\n  \n  // 나머지는 랜덤 선택\n  while (selectedIndices.length < answerCount) {\n    const remaining = availableIndices.filter(idx => !selectedIndices.includes(idx));\n    if (remaining.length === 0) break;\n    \n    const randomIdx = remaining[Math.floor(Math.random() * remaining.length)];\n    selectedIndices.push(randomIdx);\n  }\n  \n  return selectedIndices;\n}`\n                      : `// AI 전략 함수 (JavaScript)\nfunction makeGuess(gameState) {\n  const { keywords, myHints, previousGuesses, revealedAnswers, revealedWrongs, answerCount } = gameState;\n  \n  // 가능한 키워드 인덱스 목록\n  const availableIndices = keywords\n    .map((_, index) => index)\n    .filter(idx => !revealedWrongs.includes(idx));\n  \n  // 이미 공개된 정답 우선 선택\n  const selectedIndices = [...revealedAnswers];\n  \n  // 나머지는 랜덤 선택\n  while (selectedIndices.length < answerCount) {\n    const remaining = availableIndices.filter(idx => !selectedIndices.includes(idx));\n    if (remaining.length === 0) break;\n    \n    const randomIdx = remaining[Math.floor(Math.random() * remaining.length)];\n    selectedIndices.push(randomIdx);\n  }\n  \n  return selectedIndices;\n}`;\n                    updatePlayer(player.id, { aiCode: exampleCode });\n                  }}\n                >\n                  예제 코드\n                </button>\n              </div>\n            </div>\n            \n            <div className=\"editor-wrapper\">\n              <div className=\"line-numbers\" onScroll={(e) => {\n                const textarea = e.currentTarget.nextElementSibling as HTMLTextAreaElement;\n                if (textarea) textarea.scrollTop = e.currentTarget.scrollTop;\n              }}>\n                {((player.aiCode || '') + '\\n').split('\\n').map((_, index) => (\n                  <div key={index} className=\"line-number\">{index + 1}</div>\n                ))}\n              </div>\n              <textarea\n                className=\"code-editor\"\n                value={player.aiCode || ''}\n                onChange={(e) => updatePlayer(player.id, { aiCode: e.target.value })}\n                onScroll={(e) => {\n                  const lineNumbers = e.currentTarget.previousElementSibling as HTMLDivElement;\n                  if (lineNumbers) lineNumbers.scrollTop = e.currentTarget.scrollTop;\n                }}\n                placeholder={player.aiLanguage === 'typescript' \n                  ? \"// TypeScript AI 전략 코드를 작성하세요\\n// 타입 정의와 함께 작성해주세요\"\n                  : \"// JavaScript AI 전략 코드를 작성하세요\\n// function makeGuess(gameState) { ... }\"\n                }\n                spellCheck={false}\n              />\n            </div>\n            \n            <div className=\"editor-footer\">\n              <div className=\"code-stats\">\n                <span>줄: {(player.aiCode || '').split('\\n').length}</span>\n                <span>문자: {(player.aiCode || '').length}</span>\n              </div>\n              <button \n                className=\"btn-large btn-primary\"\n                onClick={() => setCodeEditorModal({ isOpen: false, playerId: null })}\n\n\n              >\n                저장\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const renderModeSelection = () => (\n    <div className=\"game-screen mode-selection\">\n      <div className=\"guide-link-container\">\n        <button onClick={() => setIsGuideModalOpen(true)} className=\"guide-link\">?<span>게임 방법</span></button>\n      </div>\n      <h2 style={{ marginTop: '60px' }}>게임 모드를 선택하세요</h2>\n      <div className=\"mode-cards\">\n        <div className=\"mode-card\" onClick={() => handleModeSelect('solo')}>\n          <h3>개인전</h3>\n          <p>AI와 1:1 대결하는 모드입니다.<br/>난이도를 선택할 수 있어요.</p>\n        </div>\n        <div className=\"mode-card\" onClick={() => handleModeSelect('multi')}>\n          <h3>멀티플레이</h3>\n          <p>2~6명이 함께 플레이하는 모드입니다.<br/>친구들과 함께 즐겨보세요.</p>\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderDifficultySelection = () => (\n    <div className=\"game-screen difficulty-selection\">\n      <div className=\"back-button-container\">\n        <button \n          className=\"btn-large btn-secondary\" \n          onClick={() => setCurrentScreen('mode-selection')}\n        >\n          ← 뒤로가기\n        </button>\n      </div>\n      \n      <h2>AI 난이도를 선택하세요</h2>\n      <div className=\"difficulty-cards\">\n        <div className=\"difficulty-card\" onClick={() => handleDifficultySelect('easy')}>\n          <h3>🌱 쉬움</h3>\n          <p>AI가 무작위로 키워드를 선택합니다.<br/>편안하게 게임을 즐기세요.</p>\n        </div>\n        <div className=\"difficulty-card\" onClick={() => handleDifficultySelect('medium')}>\n          <h3>🌿 보통</h3>\n          <p>AI가 공개된 정답을 활용합니다.<br/>적당한 도전을 원한다면 선택하세요.</p>\n        </div>\n        <div className=\"difficulty-card\" onClick={() => handleDifficultySelect('hard')}>\n          <h3>🌳 어려움</h3>\n          <p>AI가 이전 추측을 분석합니다.<br/>진정한 실력을 시험해보세요.</p>\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderPlayerSetup = () => (\n    <div className=\"game-screen\">\n      <div className=\"back-button-container\">\n        <button \n          className=\"btn-large btn-secondary\" \n          onClick={() => setCurrentScreen(gameMode === 'solo' ? 'difficulty-selection' : 'mode-selection')}\n        >\n          ← 뒤로가기\n        </button>\n      </div>\n\n      {gameMode === 'multi' && players.length === 0 && (\n        <div className=\"form-section\" style={{ marginTop: '60px' }}>\n          <h2 style={{ textAlign: 'center' }}>플레이어 수를 선택하세요</h2>\n          <div className=\"btn-group\" style={{ justifyContent: 'center', marginTop: '40px' }}>\n            {[2, 3, 4, 5, 6].map(num => (\n              <button\n                key={num}\n                className=\"btn-large btn-secondary\"\n                onClick={() => handlePlayerCountSelect(num)}\n              >\n                {num}명\n              </button>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {players.length > 0 && (\n        <>\n          <h2 style={{ textAlign: 'center', marginTop: '60px' }}>{gameMode === 'solo' ? '플레이어 설정' : `${playerCount}명 플레이어 설정`}</h2>\n          <div className=\"players-grid\">\n            {players.filter(player => gameMode === 'solo' ? player.id === 1 : true).map((player) => (\n              <div key={player.id} className=\"player-setup\">\n                <h4>{gameMode === 'solo' ? '플레이어' : `플레이어 ${player.id}`}</h4>\n                \n                <div className=\"form-section\">\n                  <input\n                    type=\"text\"\n                    className=\"input-field\"\n                    placeholder=\"닉네임을 입력하세요\"\n                    value={player.nickname}\n                    onChange={(e) => updatePlayer(player.id, { nickname: e.target.value })}\n                    maxLength={20}\n                  />\n                </div>\n\n                {(gameMode === 'multi' || (gameMode === 'solo' && player.id === 1)) && (\n                  <div className=\"form-section\">\n                    <div className=\"radio-group\">\n                      <div className=\"radio-option\">\n                        <input\n                          type=\"radio\"\n                          id={`human-${player.id}`}\n                          name={`playerType-${player.id}`}\n                          value=\"human\"\n                          checked={player.type === 'human'}\n                          onChange={() => updatePlayer(player.id, { type: 'human', aiCode: '' })}\n                        />\n                        <label htmlFor={`human-${player.id}`}>인간</label>\n                      </div>\n                      <div className=\"radio-option\">\n                        <input\n                          type=\"radio\"\n                          id={`ai-${player.id}`}\n                          name={`playerType-${player.id}`}\n                          value=\"custom-ai\"\n                          checked={player.type === 'custom-ai'}\n                          onChange={() => {\n                            updatePlayer(player.id, { type: 'custom-ai' });\n                            setCodeEditorModal({ isOpen: true, playerId: player.id });\n                          }}\n                        />\n                        <label htmlFor={`ai-${player.id}`}>{gameMode === 'solo' ? '커스텀 AI' : 'AI'}</label>\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                {player.type === 'custom-ai' && (\n                  <div className=\"form-section\">\n                    <button\n                      className=\"btn-large btn-ai-code\"\n                      onClick={() => setCodeEditorModal({ isOpen: true, playerId: player.id })}\n                      style={{ width: '100%' }}\n                    >\n                      <span className=\"btn-ai-icon\">&lt;/&gt;</span>\n                      <span>{player.aiCode ? 'AI 코드 수정' : 'AI 코드 작성'}</span>\n                    </button>\n                    {player.aiCode && (\n                      <div className=\"code-preview\">\n                        <small>코드가 작성되었습니다 ({player.aiCode.split('\\n').length}줄)</small>\n                      </div>\n                    )}\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n\n          <div className=\"setup-actions\">\n            <button\n              className=\"btn-large btn-primary\"\n              onClick={handleStartGame}\n              disabled={!canStartGame()}\n            >\n              게임 시작\n            </button>\n          </div>\n        </>\n      )}\n    </div>\n  );\n\n  const renderGameConfig = () => (\n    <div className=\"game-screen\">\n      <div className=\"back-button-container\">\n        <button \n          className=\"btn-large btn-secondary\" \n          onClick={() => setCurrentScreen('player-setup')}\n        >\n          ← 뒤로가기\n        </button>\n      </div>\n\n      <h2 style={{ textAlign: 'center' }}>게임 설정</h2>\n      \n      {/* 난이도 프리셋 */}\n      <div className=\"form-section\">\n        <h3 style={{ textAlign: 'center' }}>난이도 프리셋</h3>\n        <div className=\"btn-group\" style={{ justifyContent: 'center', flexWrap: 'wrap' }}>\n          <button\n            className={`btn-large ${gameConfig.difficulty === 'beginner' ? 'btn-primary' : 'btn-secondary'}`}\n            onClick={() => applyPreset('beginner')}\n          >\n            초급\n          </button>\n          <button\n            className={`btn-large ${gameConfig.difficulty === 'intermediate' ? 'btn-primary' : 'btn-secondary'}`}\n            onClick={() => applyPreset('intermediate')}\n          >\n            중급\n          </button>\n          <button\n            className={`btn-large ${gameConfig.difficulty === 'advanced' ? 'btn-primary' : 'btn-secondary'}`}\n            onClick={() => applyPreset('advanced')}\n          >\n            고급\n          </button>\n        </div>\n      </div>\n\n      {/* 상세 설정 */}\n      <div className=\"config-grid\">\n        <div className=\"config-item\">\n          <h4>키워드 풀 크기</h4>\n          <p>전체 키워드 개수</p>\n          <div className=\"number-input-group\">\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ keywordPoolSize: Math.max(20, gameConfig.keywordPoolSize - 10) })}\n            >\n              -\n            </button>\n            <span className=\"number-display\">{gameConfig.keywordPoolSize}개</span>\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ keywordPoolSize: Math.min(100, gameConfig.keywordPoolSize + 10) })}\n            >\n              +\n            </button>\n          </div>\n        </div>\n\n        <div className=\"config-item\">\n          <h4>정답 개수</h4>\n          <p>찾아야 할 정답 수</p>\n          <div className=\"number-input-group\">\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ answerCount: Math.max(2, gameConfig.answerCount - 1) })}\n            >\n              -\n            </button>\n            <span className=\"number-display\">{gameConfig.answerCount}개</span>\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ answerCount: Math.min(15, gameConfig.answerCount + 1) })}\n            >\n              +\n            </button>\n          </div>\n        </div>\n\n        <div className=\"config-item\">\n          <h4>힌트 개수</h4>\n          <p>각 플레이어별 오답 힌트</p>\n          <div className=\"number-input-group\">\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ hintCount: Math.max(2, gameConfig.hintCount - 1) })}\n            >\n              -\n            </button>\n            <span className=\"number-display\">{gameConfig.hintCount}개</span>\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ hintCount: Math.min(20, gameConfig.hintCount + 1) })}\n            >\n              +\n            </button>\n          </div>\n        </div>\n\n        <div className=\"config-item\">\n          <h4>턴 제한시간</h4>\n          <p>각 턴당 시간</p>\n          <div className=\"number-input-group\">\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ timeLimit: Math.max(15, gameConfig.timeLimit - 15) })}\n            >\n              -\n            </button>\n            <span className=\"number-display\">{gameConfig.timeLimit}초</span>\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ timeLimit: Math.min(180, gameConfig.timeLimit + 15) })}\n            >\n              +\n            </button>\n          </div>\n        </div>\n\n        <div className=\"config-item\">\n          <h4>최대 턴 수</h4>\n          <p>게임 종료 조건</p>\n          <div className=\"number-input-group\">\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ maxTurns: gameConfig.maxTurns ? Math.max(5, gameConfig.maxTurns - 5) : 15 })}\n            >\n              -\n            </button>\n            <span className=\"number-display\">{gameConfig.maxTurns ? `${gameConfig.maxTurns}턴` : '무제한'}</span>\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ maxTurns: gameConfig.maxTurns ? Math.min(50, gameConfig.maxTurns + 5) : 20 })}\n            >\n              +\n            </button>\n          </div>\n          <button \n            className=\"btn btn-small\" \n            onClick={() => updateGameConfig({ maxTurns: gameConfig.maxTurns ? undefined : 20 })}\n            style={{ marginTop: '10px' }}\n          >\n            {gameConfig.maxTurns ? '무제한으로 변경' : '제한 설정'}\n          </button>\n        </div>\n      </div>\n\n      {/* 현재 난이도 표시 */}\n      <div className=\"difficulty-indicator\">\n        <span>현재 난이도: <strong>{\n          gameConfig.difficulty === 'beginner' ? '초급' :\n          gameConfig.difficulty === 'intermediate' ? '중급' :\n          gameConfig.difficulty === 'advanced' ? '고급' : '커스텀'\n        }</strong></span>\n      </div>\n\n      <div className=\"setup-actions\">\n        <button\n          className=\"btn-large btn-primary\"\n          onClick={handleConfigComplete}\n        >\n          설정 완료\n        </button>\n      </div>\n    </div>\n  );\n\n  const renderGamePreparation = () => {\n    const preparationSteps = [\n      { title: '게임 초기화', description: '게임 환경을 설정하고 있습니다.' },\n      { title: '키워드 생성', description: `${gameConfig.keywordPoolSize}개의 키워드를 생성하고 있습니다.` },\n      { title: '정답 선택', description: `${gameConfig.answerCount}개의 정답을 무작위로 선택하고 있습니다.` },\n      { title: '힌트 배포', description: '각 플레이어에게 오답 힌트를 배포하고 있습니다.' },\n      { title: '최종 확인', description: '게임 준비를 완료하고 있습니다.' }\n    ];\n\n    return (\n      <div className=\"game-screen\">\n        {preparationStep < 5 ? (\n          <>\n            <h2>게임 준비 중...</h2>\n            <div className=\"preparation-progress\">\n              <div className=\"progress-steps\">\n                {preparationSteps.map((step, index) => (\n                  <div \n                    key={index} \n                    className={`progress-step ${index < preparationStep ? 'completed' : index === preparationStep ? 'active' : 'pending'}`}\n                  >\n                    <div className=\"step-circle\">\n                      {index < preparationStep ? '✓' : index + 1}\n                    </div>\n                    <div className=\"step-content\">\n                      <h4>{step.title}</h4>\n                      <p>{step.description}</p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n              \n              <div className=\"progress-bar-container\">\n                <div \n                  className=\"progress-bar-fill\" \n                  style={{ width: `${(preparationStep / 5) * 100}%` }}\n                />\n              </div>\n            </div>\n          </>\n        ) : (\n          <>\n            <h2>게임 준비 완료!</h2>\n            <div className=\"game-summary\">\n              <div className=\"summary-grid\">\n                <div className=\"summary-item\">\n                  <h4>참가자</h4>\n                  <div className=\"player-chips\">\n                    {players.map(player => (\n                      <span key={player.id} className=\"player-chip\">\n                        {player.nickname} ({player.type === 'built-in-ai' ? 'AI' : player.type === 'custom-ai' ? 'Custom AI' : '인간'})\n                      </span>\n                    ))}\n                  </div>\n                </div>\n                \n                <div className=\"summary-item\">\n                  <h4>게임 정보</h4>\n                  <div className=\"game-info-grid\">\n                    <div>키워드 풀: <strong>{gameConfig.keywordPoolSize}개</strong></div>\n                    <div>정답 개수: <strong>{gameConfig.answerCount}개</strong></div>\n                    <div>힌트 개수: <strong>{gameConfig.hintCount}개</strong></div>\n                    <div>턴 시간: <strong>{gameConfig.timeLimit}초</strong></div>\n                    <div>최대 턴: <strong>{gameConfig.maxTurns || '무제한'}</strong></div>\n                  </div>\n                </div>\n\n              </div>\n              \n              <div className=\"game-start-section\">\n                <div className=\"countdown-info\">\n                  <h3>모든 준비가 완료되었습니다!</h3>\n                  <p>게임을 시작하시겠습니까?</p>\n                </div>\n                \n                <div className=\"setup-actions\" style={{ justifyContent: 'flex-start' }}>\n                  <button \n                    className=\"btn-large btn-secondary\" \n                    onClick={() => setCurrentScreen('game-config')}\n                  >\n                    ← 설정 변경\n                  </button>\n                  <button \n                    className=\"btn-large btn-primary\" \n                    onClick={startActualGame}\n                  >\n                    게임 시작! 🎮\n                  </button>\n                </div>\n              </div>\n            </div>\n          </>\n        )}\n      </div>\n    );\n  };\n\n  const renderGameScreen = () => {\n    const currentPlayer = getCurrentPlayer();\n    const isGameFinished = isGameOver();\n\n    // 힌트 보기 단계\n    if (hintViewingPhase) {\n      const viewingPlayer = players.find(p => p.id === currentViewingPlayer);\n      const hasViewedHints = gameState.hintsViewed[currentViewingPlayer];\n      \n      // AI 플레이어는 건너뛰기\n      if (viewingPlayer?.type === 'built-in-ai') {\n        const nextPlayer = currentViewingPlayer + 1;\n        if (nextPlayer <= players.length) {\n          setTimeout(() => setCurrentViewingPlayer(nextPlayer), 0);\n        } else {\n          setHintViewingPhase(false);\n          if (gameManagerRef.current) {\n            gameManagerRef.current.startGame(\n              gameState.keywords,\n              gameState.answers,\n              gameState.playerHints\n            );\n          } else {\n            // GameManager 없이 게임 시작 시 타이머 시작\n            setTimeout(() => {\n              setGameState(prev => ({\n                ...prev,\n                currentTurn: 1\n              }));\n              startTimer();\n            }, 100);\n          }\n        }\n        return null;\n      }\n\n      return (\n        <div className=\"game-screen\">\n          <div className=\"hint-viewing-phase\">\n            <div className=\"exit-button-container\">\n              <button \n                className=\"btn btn-exit-small\"\n                onClick={exitGame}\n              >\n                게임 종료\n              </button>\n            </div>\n            <h2>힌트 확인 단계</h2>\n            <div className=\"viewing-instructions\">\n              <h3>{viewingPlayer?.nickname}님의 차례입니다</h3>\n              <p>다른 플레이어는 화면을 보지 마세요!</p>\n              \n              {!hasViewedHints ? (\n                <div className=\"hint-reveal\">\n                  <p>아래 버튼을 눌러 본인만의 힌트를 확인하세요.</p>\n                  <button \n                    className=\"btn-large btn-primary\"\n                    onClick={() => setGameState(prev => ({\n                      ...prev,\n                      hintsViewed: { ...prev.hintsViewed, [currentViewingPlayer]: true }\n                    }))}\n                  >\n                    내 힌트 보기\n                  </button>\n                </div>\n              ) : (\n                <div className=\"hint-display\">\n                  <h4>내 힌트 (이 키워드들은 정답이 아닙니다)</h4>\n                  <div className=\"hint-chips\">\n                    {gameState.playerHints[currentViewingPlayer]?.map(hintIndex => (\n                      <span key={hintIndex} className=\"hint-chip\">\n                        {gameState.keywords[hintIndex]}\n                      </span>\n                    ))}\n                  </div>\n                  <p>힌트를 기억하고 다음 버튼을 눌러주세요.</p>\n                  <button \n                    className=\"btn-large btn-secondary\"\n                    onClick={() => {\n                      const nextPlayer = currentViewingPlayer + 1;\n                      if (nextPlayer <= players.length) {\n                        setCurrentViewingPlayer(nextPlayer);\n                      } else {\n                        setHintViewingPhase(false);\n                        // GameManager로 게임 시작\n                        if (gameManagerRef.current) {\n                          gameManagerRef.current.startGame(\n                            gameState.keywords,\n                            gameState.answers,\n                            gameState.playerHints\n                          );\n                        } else {\n                          // GameManager 없이 게임 시작 시 타이머 시작\n                          setTimeout(() => {\n                            setGameState(prev => ({\n                              ...prev,\n                              currentTurn: 1\n                            }));\n                            startTimer();\n                          }, 100);\n                        }\n                      }\n                    }}\n                  >\n                    확인 완료\n                  </button>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    if (isGameFinished) {\n      return (\n        <div className=\"game-screen\">\n          <div className=\"game-over\">\n            <h2>🎉 게임 종료!</h2>\n            {gameState.winner ? (\n              <div className=\"winner-announcement\">\n                <h3>{players.find(p => p.id === gameState.winner)?.nickname}님이 승리했습니다!</h3>\n                <p>축하합니다! 정답을 모두 맞추셨습니다.</p>\n              </div>\n            ) : (\n              <div className=\"draw-announcement\">\n                <h3>무승부</h3>\n                <p>최대 턴 수에 도달했습니다.</p>\n              </div>\n            )}\n            \n            <div className=\"final-answers\">\n              <h4>정답은:</h4>\n              <div className=\"answer-list\">\n                {gameState.answers.map(answerIndex => (\n                  <span key={answerIndex} className=\"answer-chip\">\n                    {gameState.keywords[answerIndex]}\n                  </span>\n                ))}\n              </div>\n            </div>\n\n            <div className=\"game-history\">\n              <h4>게임 기록</h4>\n              <div className=\"history-list\">\n                {gameState.turnHistory.map((turn, index) => (\n                  <div key={index} className=\"history-item\">\n                    <div className=\"turn-info\">\n                      <strong>턴 {turn.turnNumber}</strong> - {turn.playerName}\n                    </div>\n                    <div className=\"turn-keywords\">\n                      선택: {turn.guessKeywords.join(', ')}\n                    </div>\n                    <div className=\"turn-result\">\n                      {turn.correctCount}/{gameConfig.answerCount} 정답 ({turn.timeUsed}초 소요)\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            <div className=\"setup-actions\">\n              <button \n                className=\"btn-large btn-secondary\" \n                onClick={() => setCurrentScreen('mode-selection')}\n              >\n                새 게임\n              </button>\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"game-screen game-playing\">\n        {/* 게임 상태 헤더 */}\n        <div className=\"game-header-info\">\n          <div className=\"turn-info\">\n            <h3>턴 {gameState.currentTurn}{gameConfig.maxTurns && ` / ${gameConfig.maxTurns}`}</h3>\n            <p>\n              {currentPlayer?.nickname}의 차례\n              {isAIThinking && <span className=\"ai-thinking\"> (생각하는 중...)</span>}\n            </p>\n          </div>\n          <div className=\"header-controls\">\n            <div className=\"timer\">\n              <div className={`time-display ${timeRemaining <= 10 ? 'warning' : ''}`}>\n                {timeRemaining}초\n              </div>\n              <div className=\"timer-bar\">\n                <div \n                  className=\"timer-fill\" \n                  style={{ \n                    width: `${(timeRemaining / gameConfig.timeLimit) * 100}%`,\n                    backgroundColor: timeRemaining <= 10 ? '#FF5722' : \n                                   timeRemaining <= 30 ? '#FFC107' : '#4CAF50'\n                  }}\n                />\n              </div>\n            </div>\n            <button \n              className=\"btn btn-exit\"\n              onClick={exitGame}\n              title=\"게임 종료\"\n            >\n              나가기\n            </button>\n          </div>\n        </div>\n\n        <div className=\"game-layout\">\n          {/* 왼쪽: 키워드 그리드 */}\n          <div className=\"game-main\">\n            <div className=\"keyword-selection\">\n              <h4>키워드를 선택하세요 ({selectedKeywords.length}/{gameConfig.answerCount})</h4>\n              <div className=\"keywords-grid\">\n                {gameState.keywords.map((keyword, index) => {\n                  const isSelected = selectedKeywords.includes(index);\n                  const isRevealedAnswer = gameState.revealedAnswers.includes(index);\n                  const isRevealedWrong = gameState.revealedWrongAnswers.includes(index);\n                  \n                  return (\n                    <button\n                      key={index}\n                      className={`keyword-btn ${isSelected ? 'selected' : ''} ${isRevealedAnswer ? 'revealed-answer' : ''} ${isRevealedWrong ? 'revealed-wrong' : ''}`}\n                      onClick={() => toggleKeywordSelection(index)}\n                      disabled={isSubmitting || isAIThinking || !isMyTurn}\n                    >\n                      {keyword}\n                      {isRevealedAnswer && <span className=\"reveal-indicator\">✓</span>}\n                      {isRevealedWrong && <span className=\"reveal-indicator\">❌</span>}\n                    </button>\n                  );\n                })}\n              </div>\n            </div>\n\n            <div className=\"guess-controls\">\n              <div className=\"selected-display\">\n                <h5>선택된 키워드:</h5>\n                <div className=\"selected-keywords\">\n                  {selectedKeywords.map(index => (\n                    <span key={index} className=\"selected-chip\">\n                      {gameState.keywords[index]}\n                    </span>\n                  ))}\n                </div>\n              </div>\n              \n              <div className=\"control-buttons\">\n                <button \n                  className=\"btn-large btn-secondary\"\n                  onClick={() => setSelectedKeywords([])}\n                  disabled={selectedKeywords.length === 0}\n                >\n                  선택 초기화\n                </button>\n                <button \n                  className=\"btn-large btn-primary\"\n                  onClick={submitGuess}\n                  disabled={selectedKeywords.length !== gameConfig.answerCount || isSubmitting}\n                >\n                  추측 제출\n                </button>\n              </div>\n            </div>\n          </div>\n\n          {/* 오른쪽: 게임 정보 */}\n          <div className=\"game-sidebar\">\n            <div className=\"global-hints\">\n              <h4>게임 힌트</h4>\n              <div className=\"hint-buttons\">\n                <button \n                  className=\"btn btn-hint\"\n                  onClick={revealAnswerHint}\n                  disabled={gameState.answers.length === gameState.revealedAnswers.length}\n                >\n                  정답 1개 공개\n                </button>\n                <button \n                  className=\"btn btn-hint\"\n                  onClick={revealWrongHint}\n                >\n                  오답 1개 공개\n                </button>\n              </div>\n              <div className=\"revealed-info\">\n                {gameState.revealedAnswers.length > 0 && (\n                  <div>\n                    <small>공개된 정답: {gameState.revealedAnswers.length}개</small>\n                  </div>\n                )}\n                {gameState.revealedWrongAnswers.length > 0 && (\n                  <div>\n                    <small>공개된 오답: {gameState.revealedWrongAnswers.length}개</small>\n                  </div>\n                )}\n              </div>\n            </div>\n\n            <div className=\"players-status\">\n              <h4>플레이어 현황</h4>\n              <div className=\"players-list\">\n                {players.map(player => (\n                  <div \n                    key={player.id} \n                    className={`player-status ${currentPlayer?.id === player.id ? 'current' : ''}`}\n                  >\n                    <span className=\"player-name\">{player.nickname}</span>\n                    <span className=\"player-type\">({player.type === 'built-in-ai' ? 'AI' : player.type === 'custom-ai' ? 'Custom AI' : '인간'})</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            <div className=\"turn-history\">\n              <h4>턴 기록</h4>\n              <div className=\"history-scroll\">\n                {gameState.turnHistory.slice(-5).map((turn, index) => (\n                  <div key={index} className=\"history-entry\">\n                    <div className=\"history-header\">\n                      <span>턴 {turn.turnNumber}: {turn.playerName}</span>\n                    </div>\n                    <div className=\"history-keywords\">\n                      {turn.guessKeywords.join(', ')}\n                    </div>\n                    <div className=\"history-result\">\n                      {turn.correctCount}/{gameConfig.answerCount} 정답\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const renderGuideModal = () => {\n    if (!isGuideModalOpen) return null;\n\n    const guideSlides = [\n      {\n        title: \"게임 목표: 숨겨진 키워드를 찾아라!\",\n        content: \"수많은 키워드 풀에서 정답으로 지정된 몇 개의 키워드를 가장 먼저 찾아내는 플레이어가 승리합니다.\"\n      },\n      {\n        title: \"핵심 규칙: 단서와 추론\",\n        content: \"각 플레이어는 자신만 아는 '힌트(정답이 아닌 키워드)'를 받습니다. 매 턴, 정답이라 생각하는 키워드들을 추측하면, 그중에 진짜 정답이 '몇 개'인지 결과만 알려줍니다.\"\n      },\n      {\n        title: \"승리 조건: 완벽한 추리\",\n        content: \"모든 정답 키워드를 정확히 맞추는 추측을 가장 먼저 한 플레이어가 게임의 승자가 됩니다. 제한 시간이 있으니 신속하고 정확한 추리가 필요합니다!\"\n      }\n    ];\n\n    const goToNextSlide = () => {\n      setGuideSlideIndex(prev => (prev + 1) % guideSlides.length);\n    };\n\n    const goToPrevSlide = () => {\n      setGuideSlideIndex(prev => (prev - 1 + guideSlides.length) % guideSlides.length);\n    };\n\n    return (\n      <div className=\"modal-overlay\" onClick={() => setIsGuideModalOpen(false)}>\n        <div className=\"modal-content guide-modal\" onClick={(e) => e.stopPropagation()}>\n          <div className=\"modal-header\">\n            <h3>게임 가이드</h3>\n            <button className=\"modal-close\" onClick={() => setIsGuideModalOpen(false)}>×</button>\n          </div>\n          <div className=\"guide-slides-container\">\n            <div className=\"guide-slide\">\n              <h4>{guideSlides[guideSlideIndex].title}</h4>\n              <p>{guideSlides[guideSlideIndex].content}</p>\n            </div>\n          </div>\n          <div className=\"guide-controls\">\n            <button onClick={goToPrevSlide}>이전</button>\n            <div className=\"slide-indicators\">\n              {guideSlides.map((_, index) => (\n                <span key={index} className={`indicator ${guideSlideIndex === index ? 'active' : ''}`}></span>\n              ))}\n            </div>\n            <button onClick={goToNextSlide}>다음</button>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"deduction-game\">\n      <div className=\"game-content\">\n        <div className=\"game-wrapper\">\n          <div className=\"game-header\">\n            <h1>Exclusive Deduction Game</h1>\n            <p>서로 다른 단서로 정답을 추론하는 게임</p>\n          </div>\n          \n          {currentScreen === 'mode-selection' && renderModeSelection()}\n          {currentScreen === 'difficulty-selection' && renderDifficultySelection()}\n          {currentScreen === 'player-setup' && renderPlayerSetup()}\n          {currentScreen === 'game-config' && renderGameConfig()}\n          {currentScreen === 'game-preparation' && renderGamePreparation()}\n          {currentScreen === 'game' && renderGameScreen()}\n        </div>\n        \n        {renderCodeEditorModal()}\n        {renderGuideModal()}\n      </div>\n    </div>\n  );\n};\n\nexport default DeductionGame;","import { useParams } from \"react-router-dom\";\nimport './LabPage.css';\n\nimport { Tetris, DeductionGame } from \"../components/lab/playground\";\n\n\nconst LabDetailPage = () => {\n    const { subject } = useParams()\n    console.log(subject)\n\n\n    const renderContetns = () => {\n        switch (subject) {\n            case \"tetris\":\n                return <Tetris />\n            case \"deduction-game\":\n                return <DeductionGame />\n            default:\n                return (\n                    <h1 className=\"lab-title\">준비중...</h1>\n                )\n        }\n    }\n\n    return (\n        <div className=\"lab-page\">\n             <main className=\"lab-content\">\n                {renderContetns()}\n             </main>\n        </div>\n    )\n}\n\nexport default LabDetailPage;"],"names":["AICodeValidator","validate","code","errors","warnings","length","this","MAX_CODE_LENGTH","push","concat","lines","split","MAX_LINES","pattern","message","FORBIDDEN_PATTERNS","test","Function","e","includes","loopPatterns","complexity","analyzeComplexity","suspiciousPatterns","isValid","undefined","loops","match","functions","preprocessCode","processed","replace","trim","MAX_LOOP_DEPTH","MAX_FUNCTION_DEPTH","Tetris","_jsxs","className","children","_jsx","src","process","title","allow","allowFullScreen","BasePlayer","constructor","playerInfo","ready","getInfo","isReady","onTurnStart","onTurnEnd","move","reset","HumanPlayer","super","resolveGuess","makeGuess","gameState","Promise","resolve","submitGuess","indices","isWaitingForInput","BuiltInAIPlayer","strategy","thinkingTime","startTime","Date","now","selectedIndices","selectKeywords","elapsedTime","remainingTime","Math","max","setTimeout","setThinkingTime","milliseconds","getStrategy","setStrategy","AICodeExecutor","executionCounter","MAX_EXECUTION_TIME","getInstance","instance","executeUserAI","playerId","performance","logs","validation","success","error","join","executionTime","map","w","processedCode","secureGameState","createSecureGameState","result","executeInWorker","deepFreeze","obj","Object","freeze","getOwnPropertyNames","forEach","prop","isFrozen","keywords","myHints","answerCount","previousGuesses","g","guess","correctCount","revealedAnswers","revealedWrongAnswers","currentTurn","timeLimit","reject","executionId","workerPath","publicUrl","window","location","pathname","startsWith","worker","Worker","timeoutId","terminate","Error","onmessage","event","type","msgId","data","clearTimeout","logMessage","arg","JSON","stringify","String","onerror","errorMessage","console","postMessage","validateGuess","Array","isArray","keywordCount","i","idx","Number","isInteger","Set","size","PerformanceMonitor","metricsHistory","MAX_HISTORY_SIZE","measureExecution","executor","metadata","startMemory","getMemoryUsage","endTime","endMemory","metrics","memoryUsage","recordMetrics","_objectSpread","timestamp","errorType","name","measureSync","memory","usedJSHeapSize","slice","getPlayerStats","playerMetrics","filter","m","totalExecutions","successRate","averageExecutionTime","maxExecutionTime","recentErrors","successful","totalTime","reduce","sum","maxTime","getGlobalStats","averageSuccessRate","peakExecutionTime","activePlayerCount","peakTime","uniquePlayers","clearHistory","AIExecutionHandler","monitor","executeWithFallback","userCode","playerName","executionResult","log","_error$error","fallbackGuess","generateFallbackGuess","errorDetails","available","randomIndex","floor","random","selected","splice","validateCode","valid","testAICode","sampleGameState","testGameState","createSampleGameState","CustomAIPlayer","aiCode","aiLanguage","executionHandler","customCode","customLanguage","id","nickname","fallbackStrategy","availableIndices","from","_","remaining","randomIdx","validateCodeAsync","updateCode","language","getCode","getLanguage","BaseStrategy","previousExactGuesses","definiteAnswers","definiteWrongs","hint","add","wrong","revealedOtherHints","_ref","hints","hintIdx","analyzeAllGuesses","possibleKeywords","has","scores","calculateScores","finalGuess","buildFinalGuess","preventDuplicateGuess","guessKey","sort","a","b","j","compareGuesses","checkConstraints","guess1","guess2","onlyIn1","x","onlyIn2","idx1","idx2","knownAnswers","unknownIndices","knownWrongs","Map","set","score","calculateKeywordScore","sorted","entries","_ref2","toFixed","keywordIdx","totalAppearances","weightedCorrect","unknownCount","remainingCorrect","allPreviousGuesses","prevGuess","prevKey","previousGuess","find","pg","generateSystematicVariation","generateNewCombination","originalGuess","previousResult","mustInclude","sortedByScore","get","availableCandidates","_ref3","_ref4","wrongCount","toReplace","min","replaceCount","toReplaceIndices","newGuess","indexToReplace","indexOf","newKey","candidates","_ref5","needed","attempts","tempGuess","shuffledCandidates","tempKey","EasyStrategy","getStrategyName","getDescription","MediumStrategy","HardStrategy","baseResult","advancedReasoning","baseGuess","remainingAnswers","optimizedGuess","findOptimalCombination","refineWithSetAnalysis","h","possibleIndices","remainingSlots","validCombinations","findValidCombinations","slots","generateCombinations","start","current","pop","testAnswer","isValidHypothesis","hypothesis","guesses","hypothesisSet","currentGuess","confirmedAnswers","highScoreGuesses","intersection","refinedGuess","PlayerFactory","createPlayer","createStrategy","aiDifficulty","difficulty","createBuiltInAIOpponent","arguments","isHumanPlayer","player","isBuiltInAIPlayer","isCustomAIPlayer","GameManager","config","players","currentPlayerIndex","gameContext","isGameRunning","turnTimer","turnStartTime","revealedHintsPerPlayer","lastHintRevealTurn","onGameEnd","onTimerTick","onAIThinking","answers","playerHints","turnHistory","addPlayer","setPlayers","getCurrentPlayer","getPlayers","getGameContext","startGame","clear","keywordPoolSize","hintCount","calculateGameComplexity","calculateExpectedTurns","startNextTurn","_currentPlayer$onTurn","currentPlayer","call","startTurnTimer","gameStateForAI","createGameStateForAI","then","processTurn","setInterval","handleTimeout","stopTurnTimer","clearInterval","autoGuess","submitHumanGuess","_currentPlayer$onTurn2","isWinner","every","actualTimeUsed","round","turnResult","guessKeywords","turnNumber","timeUsed","endGame","maxTurns","turn","hintRevealSchedule","getHintRevealSchedule","updateAndGetRevealedHints","expectedTurns","profile","easy","startRatio","initialInterval","accelerationFactor","medium","hard","startTurn","Infinity","baseTurns","ceil","schedule","lastRevealTurn","turnsPassedSinceStart","acceleratedInterval","revealMultiplier","hintsToRevealThisTurn","shouldReveal","revealedHints","_this$players$find3","otherPlayers","p","availableHints","otherPlayer","otherPlayerId","otherHints","rh","revealedThisTurn","_this$players$find","newHint","thresholdRatio","gameProgress","isHardAI","isEndgame","totalAvailableHints","_this$players$find2","nextInterval","revealAnswer","unrevealedAnswers","ans","randomAnswer","revealWrongAnswer","wrongAnswers","randomWrong","winner","stopGame","isRunning","setEventHandlers","handlers","DeductionGame","guideSlideIndex","setGuideSlideIndex","useState","isGuideModalOpen","setIsGuideModalOpen","currentScreen","setCurrentScreen","gameMode","setGameMode","playerCount","setPlayerCount","gameConfig","setGameConfig","setGameState","gameStatus","hintsViewed","preparationStep","setPreparationStep","selectedKeywords","setSelectedKeywords","timeRemaining","setTimeRemaining","isMyTurn","setIsMyTurn","hintViewingPhase","setHintViewingPhase","currentViewingPlayer","setCurrentViewingPlayer","timerIntervalId","setTimerIntervalId","isSubmitting","setIsSubmitting","aiTimeoutId","setAiTimeoutId","soloDifficulty","setSoloDifficulty","isAIThinking","setIsAIThinking","gameManagerRef","useRef","setTurnStartTime","codeEditorModal","setCodeEditorModal","isOpen","handleModeSelect","mode","handleDifficultySelect","updatePlayer","updates","prev","handleStartGame","handleConfigComplete","initializeGame","keywordCategories","animals","foods","objects","places","actions","async","values","flat","answerIndices","shuffledIndices","nonAnswerIndices","startActualGame","manager","gamePlayers","context","winnerInfo","thinking","startTimer","clearTimer","intervalId","handleTimeUp","autoSelection","index","submitGuessWithSelection","exitGame","revealAnswerHint","revealWrongHint","selection","currentPlayerId","isMaxTurnsReached","difficultyPresets","beginner","intermediate","advanced","applyPreset","preset","updateGameConfig","useEffect","onClick","style","marginTop","textAlign","justifyContent","num","count","newPlayers","handlePlayerCountSelect","_Fragment","placeholder","value","onChange","target","maxLength","checked","htmlFor","width","disabled","_player$aiCode","flexWrap","renderGamePreparation","preparationSteps","description","step","renderGameScreen","isGameFinished","_gameState$playerHint","viewingPlayer","hasViewedHints","nextPlayer","hintIndex","_players$find","answerIndex","backgroundColor","keyword","isSelected","isRevealedAnswer","isRevealedWrong","toggleKeywordSelection","keywordIndex","renderCodeEditorModal","stopPropagation","exampleCode","onScroll","textarea","currentTarget","nextElementSibling","scrollTop","lineNumbers","previousElementSibling","spellCheck","renderGuideModal","guideSlides","content","goToPrevSlide","goToNextSlide","LabDetailPage","subject","useParams","renderContetns"],"sourceRoot":""}