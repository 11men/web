{"version":3,"file":"static/js/555.82c0adbb.chunk.js","mappings":"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","sources":["components/lab/subject/Tetris.tsx","components/lab/subject/DeductionGame/DeductionGame.tsx","pages/LabDetailPage.tsx"],"sourcesContent":["import './Tetris.css';\n\nconst Tetris = () => {\n    \n    return (\n        <div className=\"tetris-container\">\n            <div className=\"tetris-header\">\n                <h1>AI 테트리스</h1>\n                <p className=\"tetris-description\">\n                    AI로 시작한 테트리스 게임 만들기 프로젝트입니다.\n                    현재 버전에서는 기본적인 테트리스 게임플레이를 구현했습니다.\n                </p>\n            </div>\n\n            <div className=\"tetris-content\">\n                <iframe\n                    src={process.env.PUBLIC_URL + \"/lab/html/tetris.html\"}\n                    title=\"AI Tetris Game\"\n                    className=\"tetris-frame\"\n                    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                    allowFullScreen\n                />\n            </div>\n\n            <div className=\"tetris-info\">\n                <h2>프로젝트 정보</h2>\n                <div className=\"info-grid\">\n                    <div className=\"info-item\">\n                        <h3>개발 기간</h3>\n                        <p>2024.06.11 ~ 현재</p>\n                    </div>\n                    <div className=\"info-item\">\n                        <h3>사용 기술</h3>\n                        <p>HTML, CSS, JavaScript</p>\n                    </div>\n                    <div className=\"info-item\">\n                        <h3>주요 기능</h3>\n                        <ul>\n                            <li>기본 테트리스 게임플레이</li>\n                            <li>점수 시스템</li>\n                            <li>레벨 시스템</li>\n                        </ul>\n                    </div>\n                    <div className=\"info-item\">\n                        <h3>향후 계획</h3>\n                        <ul>\n                            <li>AI 학습 모델 통합</li>\n                            <li>멀티플레이어 지원</li>\n                            <li>커스텀 테마</li>\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\nexport default Tetris;\n","import React, { useState, useEffect } from 'react';\nimport './DeductionGame.css';\n\ntype GameScreen = 'mode-selection' | 'player-setup' | 'game-config' | 'game-preparation' | 'game';\ntype GameMode = 'solo' | 'multi';\n\ninterface GameConfig {\n  keywordPoolSize: number;\n  answerCount: number;\n  hintCount: number;\n  timeLimit: number;\n  maxTurns?: number;\n  difficulty: 'beginner' | 'intermediate' | 'advanced' | 'custom';\n}\n\ninterface GameState {\n  keywords: string[];\n  answers: number[];\n  playerHints: { [playerId: number]: number[] };\n  isReady: boolean;\n  currentTurn: number;\n  turnHistory: TurnResult[];\n  gameStatus: 'playing' | 'finished';\n  winner?: number;\n  revealedAnswers: number[];\n  revealedWrongAnswers: number[];\n  hintsViewed: { [playerId: number]: boolean };\n}\n\ninterface TurnResult {\n  playerId: number;\n  playerName: string;\n  guess: number[];\n  guessKeywords: string[];\n  correctCount: number;\n  turnNumber: number;\n  timeUsed: number;\n}\n\ninterface PlayerConfig {\n  id: number;\n  nickname: string;\n  type: 'human' | 'ai';\n  aiCode?: string;\n  aiLanguage?: 'javascript' | 'typescript';\n}\n\nconst DeductionGame: React.FC = () => {\n  const [currentScreen, setCurrentScreen] = useState<GameScreen>('mode-selection');\n  const [gameMode, setGameMode] = useState<GameMode>('solo');\n  const [playerCount, setPlayerCount] = useState(2);\n  const [players, setPlayers] = useState<PlayerConfig[]>([]);\n  const [gameConfig, setGameConfig] = useState<GameConfig>({\n    keywordPoolSize: 50,\n    answerCount: 5,\n    hintCount: 5,\n    timeLimit: 60,\n    maxTurns: 20,\n    difficulty: 'intermediate'\n  });\n  const [gameState, setGameState] = useState<GameState>({\n    keywords: [],\n    answers: [],\n    playerHints: {},\n    isReady: false,\n    currentTurn: 0,\n    turnHistory: [],\n    gameStatus: 'playing',\n    revealedAnswers: [],\n    revealedWrongAnswers: [],\n    hintsViewed: {}\n  });\n  const [preparationStep, setPreparationStep] = useState(0);\n  const [selectedKeywords, setSelectedKeywords] = useState<number[]>([]);\n  const [timeRemaining, setTimeRemaining] = useState(0);\n  const [isMyTurn, setIsMyTurn] = useState(false);\n  const [hintViewingPhase, setHintViewingPhase] = useState(false);\n  const [currentViewingPlayer, setCurrentViewingPlayer] = useState(0);\n  const [timerIntervalId, setTimerIntervalId] = useState<NodeJS.Timeout | null>(null);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [aiTimeoutId, setAiTimeoutId] = useState<NodeJS.Timeout | null>(null);\n  const [codeEditorModal, setCodeEditorModal] = useState<{ isOpen: boolean; playerId: number | null }>({ \n    isOpen: false, \n    playerId: null \n  });\n\n  const handleModeSelect = (mode: GameMode) => {\n    setGameMode(mode);\n    if (mode === 'solo') {\n      // 솔로 모드는 플레이어 vs 운영진 AI들\n      setPlayerCount(1);\n      setPlayers([\n        { id: 1, nickname: '', type: 'human', aiLanguage: 'javascript' }\n      ]);\n    } else {\n      // 멀티 모드는 플레이어 수 선택 후 설정\n      setPlayers([]);\n    }\n    setCurrentScreen('player-setup');\n  };\n\n  const handlePlayerCountSelect = (count: number) => {\n    setPlayerCount(count);\n    const newPlayers: PlayerConfig[] = [];\n    for (let i = 1; i <= count; i++) {\n      newPlayers.push({\n        id: i,\n        nickname: '',\n        type: 'human',\n        aiLanguage: 'javascript'\n      });\n    }\n    setPlayers(newPlayers);\n  };\n\n  const updatePlayer = (id: number, updates: Partial<PlayerConfig>) => {\n    setPlayers(prev => prev.map(player => \n      player.id === id ? { ...player, ...updates } : player\n    ));\n  };\n\n  const canStartGame = () => {\n    return players.every(player => {\n      if (!player.nickname.trim()) return false;\n      if (player.type === 'ai' && !player.aiCode?.trim()) return false;\n      return true;\n    });\n  };\n\n  const handleStartGame = () => {\n    console.log('Moving to game config with players:', players);\n    setCurrentScreen('game-config');\n  };\n\n  const handleConfigComplete = () => {\n    console.log('Game config complete:', gameConfig);\n    setPreparationStep(0);\n    setCurrentScreen('game-preparation');\n    initializeGame();\n  };\n\n  // 키워드 풀 (실제로는 더 많은 키워드가 필요)\n  const keywordCategories = {\n    animals: ['사자', '호랑이', '코끼리', '기린', '원숭이', '코알라', '판다', '펭귄', '독수리', '상어', '고래', '돌고래', '토끼', '고양이', '강아지', '말', '소', '돼지', '양', '염소'],\n    foods: ['피자', '햄버거', '스파게티', '초밥', '김치찌개', '불고기', '치킨', '라면', '떡볶이', '김밥', '샐러드', '스테이크', '카레', '우동', '냉면', '비빔밥', '갈비', '삼겹살', '회', '족발'],\n    objects: ['컴퓨터', '스마트폰', '자동차', '비행기', '기차', '자전거', '책', '연필', '가방', '시계', '안경', '모자', '신발', '옷', '침대', '의자', '책상', '냉장고', '세탁기', '텔레비전'],\n    places: ['학교', '병원', '은행', '카페', '식당', '공원', '해변', '산', '도서관', '박물관', '영화관', '쇼핑몰', '시장', '교회', '지하철역', '공항', '호텔', '집', '회사', '체육관'],\n    actions: ['걷기', '뛰기', '수영', '춤추기', '노래하기', '요리하기', '공부하기', '운전하기', '그림그리기', '글쓰기', '읽기', '잠자기', '먹기', '마시기', '웃기', '울기', '생각하기', '말하기', '듣기', '보기']\n  };\n\n  const generateKeywords = (size: number): string[] => {\n    const allKeywords = Object.values(keywordCategories).flat();\n    const shuffled = [...allKeywords].sort(() => Math.random() - 0.5);\n    return shuffled.slice(0, size);\n  };\n\n  const initializeGame = async () => {\n    // 1단계: 키워드 생성\n    setPreparationStep(1);\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    const keywords = generateKeywords(gameConfig.keywordPoolSize);\n    \n    // 2단계: 정답 선택\n    setPreparationStep(2);\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    const answerIndices: number[] = [];\n    const shuffledIndices = Array.from({length: keywords.length}, (_, i) => i).sort(() => Math.random() - 0.5);\n    for (let i = 0; i < gameConfig.answerCount; i++) {\n      answerIndices.push(shuffledIndices[i]);\n    }\n    \n    // 3단계: 힌트 배포\n    setPreparationStep(3);\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    const playerHints: { [playerId: number]: number[] } = {};\n    const nonAnswerIndices = shuffledIndices.filter(i => !answerIndices.includes(i));\n    \n    players.forEach(player => {\n      const hints: number[] = [];\n      const availableHints = [...nonAnswerIndices].sort(() => Math.random() - 0.5);\n      for (let i = 0; i < gameConfig.hintCount && i < availableHints.length; i++) {\n        hints.push(availableHints[i]);\n      }\n      playerHints[player.id] = hints;\n    });\n    \n    // 4단계: 준비 완료\n    setPreparationStep(4);\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    setGameState({\n      keywords,\n      answers: answerIndices,\n      playerHints,\n      isReady: true,\n      currentTurn: 1,\n      turnHistory: [],\n      gameStatus: 'playing',\n      revealedAnswers: [],\n      revealedWrongAnswers: [],\n      hintsViewed: {}\n    });\n    \n    setPreparationStep(5); // 완료 상태\n  };\n\n  const handleAITurn = (aiPlayerId: number) => {\n    // AI의 추측 로직 - 단순히 랜덤 선택\n    const availableKeywords = gameState.keywords\n      .map((_, index) => index)\n      .filter(index => !gameState.revealedWrongAnswers.includes(index));\n    \n    // 공개된 정답이 있으면 우선 선택\n    const knownAnswers = gameState.revealedAnswers.filter(ans => \n      availableKeywords.includes(ans)\n    );\n    \n    let aiSelection: number[] = [];\n    \n    // 공개된 정답을 먼저 선택\n    aiSelection = [...knownAnswers];\n    \n    // 나머지는 랜덤 선택\n    const remainingCount = gameConfig.answerCount - aiSelection.length;\n    const otherKeywords = availableKeywords.filter(idx => !knownAnswers.includes(idx));\n    const shuffled = [...otherKeywords].sort(() => Math.random() - 0.5);\n    aiSelection.push(...shuffled.slice(0, remainingCount));\n    \n    // AI 추측 제출\n    submitGuessWithSelection(aiSelection);\n  };\n\n  const startActualGame = () => {\n    setHintViewingPhase(true);\n    setCurrentViewingPlayer(1);\n    setCurrentScreen('game');\n  };\n\n  const startTimer = () => {\n    // 기존 타이머가 있다면 먼저 정리\n    clearTimer();\n    \n    setTimeRemaining(gameConfig.timeLimit);\n    \n    const intervalId = setInterval(() => {\n      setTimeRemaining(prev => {\n        if (prev <= 1) {\n          // 타이머를 먼저 정리하고 handleTimeUp 호출\n          clearInterval(intervalId);\n          setTimerIntervalId(null);\n          // setTimeout으로 다음 프레임에서 실행하여 상태 업데이트 충돌 방지\n          setTimeout(() => {\n            handleTimeUp();\n          }, 0);\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n    \n    setTimerIntervalId(intervalId);\n  };\n\n  const clearTimer = () => {\n    if (timerIntervalId) {\n      clearInterval(timerIntervalId);\n      setTimerIntervalId(null);\n    }\n  };\n\n  const handleTimeUp = () => {\n    // 시간 초과시 랜덤하게 키워드 선택하여 자동 제출\n    const availableKeywords = gameState.keywords\n      .map((_, index) => index)\n      .filter(index => !gameState.revealedWrongAnswers.includes(index));\n    \n    const shuffled = [...availableKeywords].sort(() => Math.random() - 0.5);\n    const autoSelection = shuffled.slice(0, gameConfig.answerCount);\n    \n    setSelectedKeywords(autoSelection);\n    \n    // 잠시 후 자동 제출\n    setTimeout(() => {\n      submitGuessWithSelection(autoSelection);\n    }, 500);\n  };\n\n  const exitGame = () => {\n    clearTimer();\n    // AI 타임아웃도 정리\n    if (aiTimeoutId) {\n      clearTimeout(aiTimeoutId);\n      setAiTimeoutId(null);\n    }\n    setCurrentScreen('mode-selection');\n    // 게임 상태 초기화\n    setGameState({\n      keywords: [],\n      answers: [],\n      playerHints: {},\n      isReady: false,\n      currentTurn: 0,\n      turnHistory: [],\n      gameStatus: 'playing',\n      revealedAnswers: [],\n      revealedWrongAnswers: [],\n      hintsViewed: {}\n    });\n    setSelectedKeywords([]);\n    setTimeRemaining(0);\n    setIsMyTurn(false);\n    setHintViewingPhase(false);\n    setCurrentViewingPlayer(0);\n    setIsSubmitting(false);\n  };\n\n\n  const revealAnswerHint = () => {\n    const unrevealedAnswers = gameState.answers.filter(ans => !gameState.revealedAnswers.includes(ans));\n    if (unrevealedAnswers.length > 0) {\n      const randomAnswer = unrevealedAnswers[Math.floor(Math.random() * unrevealedAnswers.length)];\n      setGameState(prev => ({\n        ...prev,\n        revealedAnswers: [...prev.revealedAnswers, randomAnswer]\n      }));\n    }\n  };\n\n  const revealWrongHint = () => {\n    const wrongAnswers = gameState.keywords\n      .map((_, index) => index)\n      .filter(index => !gameState.answers.includes(index) && !gameState.revealedWrongAnswers.includes(index));\n    \n    if (wrongAnswers.length > 0) {\n      const randomWrong = wrongAnswers[Math.floor(Math.random() * wrongAnswers.length)];\n      setGameState(prev => ({\n        ...prev,\n        revealedWrongAnswers: [...prev.revealedWrongAnswers, randomWrong]\n      }));\n    }\n  };\n\n  const toggleKeywordSelection = (keywordIndex: number) => {\n    setSelectedKeywords(prev => {\n      if (prev.includes(keywordIndex)) {\n        return prev.filter(index => index !== keywordIndex);\n      } else if (prev.length < gameConfig.answerCount) {\n        return [...prev, keywordIndex];\n      }\n      return prev;\n    });\n  };\n\n  const submitGuess = () => {\n    if (selectedKeywords.length !== gameConfig.answerCount || isSubmitting) return;\n    submitGuessWithSelection(selectedKeywords);\n  };\n\n  const submitGuessWithSelection = (selection: number[]) => {\n    if (isSubmitting) return;\n    \n    setIsSubmitting(true);\n    \n    // 타이머 정리 (새로운 타이머 시작 전에)\n    clearTimer();\n\n    const correctCount = selection.filter(index => \n      gameState.answers.includes(index)\n    ).length;\n\n    const isWinner = correctCount === gameConfig.answerCount && \n                     selection.every(index => gameState.answers.includes(index));\n\n    const currentPlayerId = ((gameState.currentTurn - 1) % players.length) + 1;\n    const currentPlayer = players.find(p => p.id === currentPlayerId);\n\n    const turnResult: TurnResult = {\n      playerId: currentPlayerId,\n      playerName: currentPlayer?.nickname || `플레이어 ${currentPlayerId}`,\n      guess: [...selection],\n      guessKeywords: selection.map(index => gameState.keywords[index]),\n      correctCount,\n      turnNumber: gameState.currentTurn,\n      timeUsed: gameConfig.timeLimit - timeRemaining\n    };\n\n    // 최대 턴 수 확인\n    const isMaxTurnsReached = gameConfig.maxTurns && gameState.currentTurn >= gameConfig.maxTurns;\n    \n    setGameState(prev => ({\n      ...prev,\n      turnHistory: [...prev.turnHistory, turnResult],\n      currentTurn: prev.currentTurn + 1,\n      gameStatus: isWinner ? 'finished' : (isMaxTurnsReached ? 'finished' : 'playing'),\n      winner: isWinner ? currentPlayerId : undefined\n    }));\n\n    setSelectedKeywords([]);\n    \n    if (!isWinner && !isMaxTurnsReached) {\n      // 다음 턴을 위해 타이머 재시작\n      setTimeout(() => {\n        startTimer();\n      }, 100);\n    }\n    \n    // 제출 상태 리셋\n    setTimeout(() => {\n      setIsSubmitting(false);\n    }, 500);\n  };\n\n  const getCurrentPlayer = () => {\n    const currentPlayerId = ((gameState.currentTurn - 1) % players.length) + 1;\n    return players.find(p => p.id === currentPlayerId);\n  };\n\n  const isGameOver = () => {\n    return gameState.gameStatus === 'finished' || \n           (gameConfig.maxTurns && gameState.currentTurn > gameConfig.maxTurns);\n  };\n\n  const difficultyPresets = {\n    beginner: { keywordPoolSize: 30, answerCount: 3, hintCount: 5, timeLimit: 90, maxTurns: 15 },\n    intermediate: { keywordPoolSize: 50, answerCount: 5, hintCount: 5, timeLimit: 60, maxTurns: 20 },\n    advanced: { keywordPoolSize: 80, answerCount: 7, hintCount: 4, timeLimit: 45, maxTurns: 25 }\n  };\n\n  const applyPreset = (difficulty: 'beginner' | 'intermediate' | 'advanced') => {\n    const preset = difficultyPresets[difficulty];\n    setGameConfig({ ...preset, difficulty });\n  };\n\n  const updateGameConfig = (updates: Partial<GameConfig>) => {\n    setGameConfig(prev => ({ ...prev, ...updates, difficulty: 'custom' }));\n  };\n\n  // 컴포넌트 언마운트 시 타이머 정리\n  useEffect(() => {\n    return () => {\n      clearTimer();\n      if (aiTimeoutId) {\n        clearTimeout(aiTimeoutId);\n      }\n    };\n  }, []);\n\n  const renderCodeEditorModal = () => {\n    if (!codeEditorModal.isOpen || !codeEditorModal.playerId) return null;\n    \n    const player = players.find(p => p.id === codeEditorModal.playerId);\n    if (!player) return null;\n\n    return (\n      <div className=\"modal-overlay\" onClick={() => setCodeEditorModal({ isOpen: false, playerId: null })}>\n        <div className=\"modal-content code-editor-modal\" onClick={(e) => e.stopPropagation()}>\n          <div className=\"modal-header\">\n            <h3>{player.nickname} AI 코드 에디터</h3>\n            <button \n              className=\"modal-close\"\n              onClick={() => setCodeEditorModal({ isOpen: false, playerId: null })}\n            >\n              ×\n            </button>\n          </div>\n          \n          <div className=\"code-editor-container\">\n            <div className=\"editor-toolbar\">\n              <div className=\"editor-left\">\n                <span className=\"editor-info\">코드 작성</span>\n                <div className=\"language-selector\">\n                  <button\n                    className={`lang-btn ${player.aiLanguage === 'javascript' ? 'active' : ''}`}\n                    onClick={() => updatePlayer(player.id, { aiLanguage: 'javascript' })}\n                  >\n                    JavaScript\n                  </button>\n                  <button\n                    className={`lang-btn ${player.aiLanguage === 'typescript' ? 'active' : ''}`}\n                    onClick={() => updatePlayer(player.id, { aiLanguage: 'typescript' })}\n                  >\n                    TypeScript\n                  </button>\n                </div>\n              </div>\n              <div className=\"editor-actions\">\n                <button \n                  className=\"btn btn-small\"\n                  onClick={() => updatePlayer(player.id, { aiCode: '' })}\n                >\n                  초기화\n                </button>\n                <button \n                  className=\"btn btn-small\"\n                  onClick={() => {\n                    const exampleCode = player.aiLanguage === 'typescript' \n                      ? `// AI 전략 함수 (TypeScript)\ninterface GameState {\n  keywords: string[];\n  myHints: number[];\n  previousGuesses: number[][];\n  revealedAnswers: number[];\n  revealedWrongs: number[];\n  answerCount: number;\n}\n\nfunction makeGuess(gameState: GameState): number[] {\n  const { keywords, myHints, previousGuesses, revealedAnswers, revealedWrongs, answerCount } = gameState;\n  \n  // 가능한 키워드 인덱스 목록\n  const availableIndices: number[] = keywords\n    .map((_, index) => index)\n    .filter(idx => !revealedWrongs.includes(idx));\n  \n  // 이미 공개된 정답 우선 선택\n  const selectedIndices: number[] = [...revealedAnswers];\n  \n  // 나머지는 랜덤 선택\n  while (selectedIndices.length < answerCount) {\n    const remaining = availableIndices.filter(idx => !selectedIndices.includes(idx));\n    if (remaining.length === 0) break;\n    \n    const randomIdx = remaining[Math.floor(Math.random() * remaining.length)];\n    selectedIndices.push(randomIdx);\n  }\n  \n  return selectedIndices;\n}`\n                      : `// AI 전략 함수 (JavaScript)\nfunction makeGuess(gameState) {\n  const { keywords, myHints, previousGuesses, revealedAnswers, revealedWrongs, answerCount } = gameState;\n  \n  // 가능한 키워드 인덱스 목록\n  const availableIndices = keywords\n    .map((_, index) => index)\n    .filter(idx => !revealedWrongs.includes(idx));\n  \n  // 이미 공개된 정답 우선 선택\n  const selectedIndices = [...revealedAnswers];\n  \n  // 나머지는 랜덤 선택\n  while (selectedIndices.length < answerCount) {\n    const remaining = availableIndices.filter(idx => !selectedIndices.includes(idx));\n    if (remaining.length === 0) break;\n    \n    const randomIdx = remaining[Math.floor(Math.random() * remaining.length)];\n    selectedIndices.push(randomIdx);\n  }\n  \n  return selectedIndices;\n}`;\n                    updatePlayer(player.id, { aiCode: exampleCode });\n                  }}\n                >\n                  예제 코드\n                </button>\n              </div>\n            </div>\n            \n            <div className=\"editor-wrapper\">\n              <div className=\"line-numbers\">\n                {((player.aiCode || '') + '\\n').split('\\n').map((_, index) => (\n                  <div key={index} className=\"line-number\">{index + 1}</div>\n                ))}\n              </div>\n              <textarea\n                className=\"code-editor\"\n                value={player.aiCode || ''}\n                onChange={(e) => updatePlayer(player.id, { aiCode: e.target.value })}\n                placeholder={player.aiLanguage === 'typescript' \n                  ? \"// TypeScript AI 전략 코드를 작성하세요\\n// 타입 정의와 함께 작성해주세요\"\n                  : \"// JavaScript AI 전략 코드를 작성하세요\\n// function makeGuess(gameState) { ... }\"\n                }\n                spellCheck={false}\n              />\n            </div>\n            \n            <div className=\"editor-footer\">\n              <div className=\"code-stats\">\n                <span>줄: {(player.aiCode || '').split('\\n').length}</span>\n                <span>문자: {(player.aiCode || '').length}</span>\n              </div>\n              <button \n                className=\"btn-large btn-primary\"\n                onClick={() => setCodeEditorModal({ isOpen: false, playerId: null })}\n\n\n              >\n                저장\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const renderModeSelection = () => (\n    <div className=\"game-screen mode-selection\">\n      <h2>게임 모드를 선택하세요</h2>\n      <div className=\"mode-cards\">\n        <div className=\"mode-card\" onClick={() => handleModeSelect('solo')}>\n          <h3>개인전</h3>\n          <p>운영진이 준비한 AI들과 대결하는 모드입니다.<br/>빠르게 게임을 시작할 수 있어요.</p>\n        </div>\n        <div className=\"mode-card\" onClick={() => handleModeSelect('multi')}>\n          <h3>멀티플레이</h3>\n          <p>2~6명이 함께 플레이하는 모드입니다.<br/>친구들과 함께 즐겨보세요.</p>\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderPlayerSetup = () => (\n    <div className=\"game-screen\">\n      <div className=\"setup-actions\">\n        <button \n          className=\"btn-large btn-secondary\" \n          onClick={() => setCurrentScreen('mode-selection')}\n        >\n          ← 뒤로가기\n        </button>\n      </div>\n\n      {gameMode === 'multi' && players.length === 0 && (\n        <div className=\"form-section\">\n          <h2>플레이어 수를 선택하세요</h2>\n          <div className=\"btn-group\" style={{ justifyContent: 'center', marginTop: '20px' }}>\n            {[2, 3, 4, 5, 6].map(num => (\n              <button\n                key={num}\n                className=\"btn-large btn-secondary\"\n                onClick={() => handlePlayerCountSelect(num)}\n              >\n                {num}명\n              </button>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {players.length > 0 && (\n        <>\n          <h2>{gameMode === 'solo' ? '플레이어 설정' : `${playerCount}명 플레이어 설정`}</h2>\n          <div className=\"players-grid\">\n            {players.map((player) => (\n              <div key={player.id} className=\"player-setup\">\n                <h4>플레이어 {player.id}</h4>\n                \n                <div className=\"form-section\">\n                  <input\n                    type=\"text\"\n                    className=\"input-field\"\n                    placeholder=\"닉네임을 입력하세요\"\n                    value={player.nickname}\n                    onChange={(e) => updatePlayer(player.id, { nickname: e.target.value })}\n                    maxLength={20}\n                  />\n                </div>\n\n                <div className=\"form-section\">\n                  <div className=\"radio-group\">\n                    <div className=\"radio-option\">\n                      <input\n                        type=\"radio\"\n                        id={`human-${player.id}`}\n                        name={`playerType-${player.id}`}\n                        value=\"human\"\n                        checked={player.type === 'human'}\n                        onChange={() => updatePlayer(player.id, { type: 'human', aiCode: '' })}\n                      />\n                      <label htmlFor={`human-${player.id}`}>인간</label>\n                    </div>\n                    <div className=\"radio-option\">\n                      <input\n                        type=\"radio\"\n                        id={`ai-${player.id}`}\n                        name={`playerType-${player.id}`}\n                        value=\"ai\"\n                        checked={player.type === 'ai'}\n                        onChange={() => updatePlayer(player.id, { type: 'ai' })}\n                      />\n                      <label htmlFor={`ai-${player.id}`}>AI</label>\n                    </div>\n                  </div>\n                </div>\n\n                {player.type === 'ai' && (\n                  <div className=\"form-section\">\n                    <button\n                      className=\"btn-large btn-secondary\"\n                      onClick={() => setCodeEditorModal({ isOpen: true, playerId: player.id })}\n                      style={{ width: '100%' }}\n                    >\n                      {player.aiCode ? 'AI 코드 수정' : 'AI 코드 작성'}\n                    </button>\n                    {player.aiCode && (\n                      <div className=\"code-preview\">\n                        <small>코드가 작성되었습니다 ({player.aiCode.split('\\n').length}줄)</small>\n                      </div>\n                    )}\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n\n          <div className=\"setup-actions\">\n            <button\n              className=\"btn-large btn-primary\"\n              onClick={handleStartGame}\n              disabled={!canStartGame()}\n            >\n              게임 시작\n            </button>\n          </div>\n        </>\n      )}\n    </div>\n  );\n\n  const renderGameConfig = () => (\n    <div className=\"game-screen\">\n      <div className=\"setup-actions\" style={{ justifyContent: 'flex-start', marginBottom: '30px' }}>\n        <button \n          className=\"btn-large btn-secondary\" \n          onClick={() => setCurrentScreen('player-setup')}\n        >\n          ← 뒤로가기\n        </button>\n      </div>\n\n      <h2>게임 설정</h2>\n      \n      {/* 난이도 프리셋 */}\n      <div className=\"form-section\">\n        <h3>난이도 프리셋</h3>\n        <div className=\"btn-group\" style={{ justifyContent: 'center', flexWrap: 'wrap' }}>\n          <button\n            className={`btn-large ${gameConfig.difficulty === 'beginner' ? 'btn-primary' : 'btn-secondary'}`}\n            onClick={() => applyPreset('beginner')}\n          >\n            초급\n          </button>\n          <button\n            className={`btn-large ${gameConfig.difficulty === 'intermediate' ? 'btn-primary' : 'btn-secondary'}`}\n            onClick={() => applyPreset('intermediate')}\n          >\n            중급\n          </button>\n          <button\n            className={`btn-large ${gameConfig.difficulty === 'advanced' ? 'btn-primary' : 'btn-secondary'}`}\n            onClick={() => applyPreset('advanced')}\n          >\n            고급\n          </button>\n        </div>\n      </div>\n\n      {/* 상세 설정 */}\n      <div className=\"config-grid\">\n        <div className=\"config-item\">\n          <h4>키워드 풀 크기</h4>\n          <p>전체 키워드 개수</p>\n          <div className=\"number-input-group\">\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ keywordPoolSize: Math.max(20, gameConfig.keywordPoolSize - 10) })}\n            >\n              -\n            </button>\n            <span className=\"number-display\">{gameConfig.keywordPoolSize}개</span>\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ keywordPoolSize: Math.min(100, gameConfig.keywordPoolSize + 10) })}\n            >\n              +\n            </button>\n          </div>\n        </div>\n\n        <div className=\"config-item\">\n          <h4>정답 개수</h4>\n          <p>찾아야 할 정답 수</p>\n          <div className=\"number-input-group\">\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ answerCount: Math.max(2, gameConfig.answerCount - 1) })}\n            >\n              -\n            </button>\n            <span className=\"number-display\">{gameConfig.answerCount}개</span>\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ answerCount: Math.min(15, gameConfig.answerCount + 1) })}\n            >\n              +\n            </button>\n          </div>\n        </div>\n\n        <div className=\"config-item\">\n          <h4>힌트 개수</h4>\n          <p>각 플레이어별 오답 힌트</p>\n          <div className=\"number-input-group\">\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ hintCount: Math.max(2, gameConfig.hintCount - 1) })}\n            >\n              -\n            </button>\n            <span className=\"number-display\">{gameConfig.hintCount}개</span>\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ hintCount: Math.min(20, gameConfig.hintCount + 1) })}\n            >\n              +\n            </button>\n          </div>\n        </div>\n\n        <div className=\"config-item\">\n          <h4>턴 제한시간</h4>\n          <p>각 턴당 시간</p>\n          <div className=\"number-input-group\">\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ timeLimit: Math.max(15, gameConfig.timeLimit - 15) })}\n            >\n              -\n            </button>\n            <span className=\"number-display\">{gameConfig.timeLimit}초</span>\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ timeLimit: Math.min(180, gameConfig.timeLimit + 15) })}\n            >\n              +\n            </button>\n          </div>\n        </div>\n\n        <div className=\"config-item\">\n          <h4>최대 턴 수</h4>\n          <p>게임 종료 조건</p>\n          <div className=\"number-input-group\">\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ maxTurns: gameConfig.maxTurns ? Math.max(5, gameConfig.maxTurns - 5) : 15 })}\n            >\n              -\n            </button>\n            <span className=\"number-display\">{gameConfig.maxTurns ? `${gameConfig.maxTurns}턴` : '무제한'}</span>\n            <button \n              className=\"btn btn-small\" \n              onClick={() => updateGameConfig({ maxTurns: gameConfig.maxTurns ? Math.min(50, gameConfig.maxTurns + 5) : 20 })}\n            >\n              +\n            </button>\n          </div>\n          <button \n            className=\"btn btn-small\" \n            onClick={() => updateGameConfig({ maxTurns: gameConfig.maxTurns ? undefined : 20 })}\n            style={{ marginTop: '10px' }}\n          >\n            {gameConfig.maxTurns ? '무제한으로 변경' : '제한 설정'}\n          </button>\n        </div>\n      </div>\n\n      {/* 현재 난이도 표시 */}\n      <div className=\"difficulty-indicator\">\n        <span>현재 난이도: <strong>{\n          gameConfig.difficulty === 'beginner' ? '초급' :\n          gameConfig.difficulty === 'intermediate' ? '중급' :\n          gameConfig.difficulty === 'advanced' ? '고급' : '커스텀'\n        }</strong></span>\n      </div>\n\n      <div className=\"setup-actions\">\n        <button\n          className=\"btn-large btn-primary\"\n          onClick={handleConfigComplete}\n        >\n          설정 완료\n        </button>\n      </div>\n    </div>\n  );\n\n  const renderGamePreparation = () => {\n    const preparationSteps = [\n      { title: '게임 초기화', description: '게임 환경을 설정하고 있습니다.' },\n      { title: '키워드 생성', description: `${gameConfig.keywordPoolSize}개의 키워드를 생성하고 있습니다.` },\n      { title: '정답 선택', description: `${gameConfig.answerCount}개의 정답을 무작위로 선택하고 있습니다.` },\n      { title: '힌트 배포', description: '각 플레이어에게 오답 힌트를 배포하고 있습니다.' },\n      { title: '최종 확인', description: '게임 준비를 완료하고 있습니다.' }\n    ];\n\n    return (\n      <div className=\"game-screen\">\n        {preparationStep < 5 ? (\n          <>\n            <h2>게임 준비 중...</h2>\n            <div className=\"preparation-progress\">\n              <div className=\"progress-steps\">\n                {preparationSteps.map((step, index) => (\n                  <div \n                    key={index} \n                    className={`progress-step ${index < preparationStep ? 'completed' : index === preparationStep ? 'active' : 'pending'}`}\n                  >\n                    <div className=\"step-circle\">\n                      {index < preparationStep ? '✓' : index + 1}\n                    </div>\n                    <div className=\"step-content\">\n                      <h4>{step.title}</h4>\n                      <p>{step.description}</p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n              \n              <div className=\"progress-bar-container\">\n                <div \n                  className=\"progress-bar-fill\" \n                  style={{ width: `${(preparationStep / 5) * 100}%` }}\n                />\n              </div>\n            </div>\n          </>\n        ) : (\n          <>\n            <h2>게임 준비 완료!</h2>\n            <div className=\"game-summary\">\n              <div className=\"summary-grid\">\n                <div className=\"summary-item\">\n                  <h4>참가자</h4>\n                  <div className=\"player-chips\">\n                    {players.map(player => (\n                      <span key={player.id} className=\"player-chip\">\n                        {player.nickname} ({player.type === 'ai' ? 'AI' : '인간'})\n                      </span>\n                    ))}\n                  </div>\n                </div>\n                \n                <div className=\"summary-item\">\n                  <h4>게임 정보</h4>\n                  <div className=\"game-info-grid\">\n                    <div>키워드 풀: <strong>{gameConfig.keywordPoolSize}개</strong></div>\n                    <div>정답 개수: <strong>{gameConfig.answerCount}개</strong></div>\n                    <div>힌트 개수: <strong>{gameConfig.hintCount}개</strong></div>\n                    <div>턴 시간: <strong>{gameConfig.timeLimit}초</strong></div>\n                    <div>최대 턴: <strong>{gameConfig.maxTurns || '무제한'}</strong></div>\n                  </div>\n                </div>\n\n              </div>\n              \n              <div className=\"game-start-section\">\n                <div className=\"countdown-info\">\n                  <h3>모든 준비가 완료되었습니다!</h3>\n                  <p>게임을 시작하시겠습니까?</p>\n                </div>\n                \n                <div className=\"setup-actions\">\n                  <button \n                    className=\"btn-large btn-secondary\" \n                    onClick={() => setCurrentScreen('game-config')}\n                  >\n                    ← 설정 변경\n                  </button>\n                  <button \n                    className=\"btn-large btn-primary\" \n                    onClick={startActualGame}\n                  >\n                    게임 시작! 🎮\n                  </button>\n                </div>\n              </div>\n            </div>\n          </>\n        )}\n      </div>\n    );\n  };\n\n  const renderGameScreen = () => {\n    const currentPlayer = getCurrentPlayer();\n    const isGameFinished = isGameOver();\n\n    // 힌트 보기 단계\n    if (hintViewingPhase) {\n      const viewingPlayer = players.find(p => p.id === currentViewingPlayer);\n      const hasViewedHints = gameState.hintsViewed[currentViewingPlayer];\n\n      return (\n        <div className=\"game-screen\">\n          <div className=\"hint-viewing-phase\">\n            <div className=\"exit-button-container\">\n              <button \n                className=\"btn btn-exit-small\"\n                onClick={exitGame}\n              >\n                게임 종료\n              </button>\n            </div>\n            <h2>힌트 확인 단계</h2>\n            <div className=\"viewing-instructions\">\n              <h3>{viewingPlayer?.nickname}님의 차례입니다</h3>\n              <p>다른 플레이어는 화면을 보지 마세요!</p>\n              \n              {!hasViewedHints ? (\n                <div className=\"hint-reveal\">\n                  <p>아래 버튼을 눌러 본인만의 힌트를 확인하세요.</p>\n                  <button \n                    className=\"btn-large btn-primary\"\n                    onClick={() => setGameState(prev => ({\n                      ...prev,\n                      hintsViewed: { ...prev.hintsViewed, [currentViewingPlayer]: true }\n                    }))}\n                  >\n                    내 힌트 보기\n                  </button>\n                </div>\n              ) : (\n                <div className=\"hint-display\">\n                  <h4>내 힌트 (이 키워드들은 정답이 아닙니다)</h4>\n                  <div className=\"hint-chips\">\n                    {gameState.playerHints[currentViewingPlayer]?.map(hintIndex => (\n                      <span key={hintIndex} className=\"hint-chip\">\n                        {gameState.keywords[hintIndex]}\n                      </span>\n                    ))}\n                  </div>\n                  <p>힌트를 기억하고 다음 버튼을 눌러주세요.</p>\n                  <button \n                    className=\"btn-large btn-secondary\"\n                    onClick={() => {\n                      const nextPlayer = currentViewingPlayer + 1;\n                      if (nextPlayer <= players.length) {\n                        setCurrentViewingPlayer(nextPlayer);\n                      } else {\n                        setHintViewingPhase(false);\n                        startTimer(); // 게임 시작시 타이머 시작\n                      }\n                    }}\n                  >\n                    확인 완료\n                  </button>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    if (isGameFinished) {\n      return (\n        <div className=\"game-screen\">\n          <div className=\"game-over\">\n            <h2>🎉 게임 종료!</h2>\n            {gameState.winner ? (\n              <div className=\"winner-announcement\">\n                <h3>{players.find(p => p.id === gameState.winner)?.nickname}님이 승리했습니다!</h3>\n                <p>축하합니다! 정답을 모두 맞추셨습니다.</p>\n              </div>\n            ) : (\n              <div className=\"draw-announcement\">\n                <h3>무승부</h3>\n                <p>최대 턴 수에 도달했습니다.</p>\n              </div>\n            )}\n            \n            <div className=\"final-answers\">\n              <h4>정답은:</h4>\n              <div className=\"answer-list\">\n                {gameState.answers.map(answerIndex => (\n                  <span key={answerIndex} className=\"answer-chip\">\n                    {gameState.keywords[answerIndex]}\n                  </span>\n                ))}\n              </div>\n            </div>\n\n            <div className=\"game-history\">\n              <h4>게임 기록</h4>\n              <div className=\"history-list\">\n                {gameState.turnHistory.map((turn, index) => (\n                  <div key={index} className=\"history-item\">\n                    <div className=\"turn-info\">\n                      <strong>턴 {turn.turnNumber}</strong> - {turn.playerName}\n                    </div>\n                    <div className=\"turn-keywords\">\n                      선택: {turn.guessKeywords.join(', ')}\n                    </div>\n                    <div className=\"turn-result\">\n                      {turn.correctCount}/{gameConfig.answerCount} 정답 ({turn.timeUsed}초 소요)\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            <div className=\"setup-actions\">\n              <button \n                className=\"btn-large btn-secondary\" \n                onClick={() => setCurrentScreen('mode-selection')}\n              >\n                새 게임\n              </button>\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"game-screen game-playing\">\n        {/* 게임 상태 헤더 */}\n        <div className=\"game-header-info\">\n          <div className=\"turn-info\">\n            <h3>턴 {gameState.currentTurn}{gameConfig.maxTurns && ` / ${gameConfig.maxTurns}`}</h3>\n            <p>{currentPlayer?.nickname}의 차례</p>\n          </div>\n          <div className=\"header-controls\">\n            <div className=\"timer\">\n              <div className={`time-display ${timeRemaining <= 10 ? 'warning' : ''}`}>\n                {timeRemaining}초\n              </div>\n              <div className=\"timer-bar\">\n                <div \n                  className=\"timer-fill\" \n                  style={{ \n                    width: `${(timeRemaining / gameConfig.timeLimit) * 100}%`,\n                    backgroundColor: timeRemaining <= 10 ? '#FF5722' : \n                                   timeRemaining <= 30 ? '#FFC107' : '#4CAF50'\n                  }}\n                />\n              </div>\n            </div>\n            <button \n              className=\"btn btn-exit\"\n              onClick={exitGame}\n              title=\"게임 종료\"\n            >\n              나가기\n            </button>\n          </div>\n        </div>\n\n        <div className=\"game-layout\">\n          {/* 왼쪽: 키워드 그리드 */}\n          <div className=\"game-main\">\n            <div className=\"keyword-selection\">\n              <h4>키워드를 선택하세요 ({selectedKeywords.length}/{gameConfig.answerCount})</h4>\n              <div className=\"keywords-grid\">\n                {gameState.keywords.map((keyword, index) => {\n                  const isSelected = selectedKeywords.includes(index);\n                  const isRevealedAnswer = gameState.revealedAnswers.includes(index);\n                  const isRevealedWrong = gameState.revealedWrongAnswers.includes(index);\n                  \n                  return (\n                    <button\n                      key={index}\n                      className={`keyword-btn ${isSelected ? 'selected' : ''} ${isRevealedAnswer ? 'revealed-answer' : ''} ${isRevealedWrong ? 'revealed-wrong' : ''}`}\n                      onClick={() => toggleKeywordSelection(index)}\n                      disabled={isSubmitting}\n                    >\n                      {keyword}\n                      {isRevealedAnswer && <span className=\"reveal-indicator\">✓</span>}\n                      {isRevealedWrong && <span className=\"reveal-indicator\">❌</span>}\n                    </button>\n                  );\n                })}\n              </div>\n            </div>\n\n            <div className=\"guess-controls\">\n              <div className=\"selected-display\">\n                <h5>선택된 키워드:</h5>\n                <div className=\"selected-keywords\">\n                  {selectedKeywords.map(index => (\n                    <span key={index} className=\"selected-chip\">\n                      {gameState.keywords[index]}\n                    </span>\n                  ))}\n                </div>\n              </div>\n              \n              <div className=\"control-buttons\">\n                <button \n                  className=\"btn-large btn-secondary\"\n                  onClick={() => setSelectedKeywords([])}\n                  disabled={selectedKeywords.length === 0}\n                >\n                  선택 초기화\n                </button>\n                <button \n                  className=\"btn-large btn-primary\"\n                  onClick={submitGuess}\n                  disabled={selectedKeywords.length !== gameConfig.answerCount || isSubmitting}\n                >\n                  추측 제출\n                </button>\n              </div>\n            </div>\n          </div>\n\n          {/* 오른쪽: 게임 정보 */}\n          <div className=\"game-sidebar\">\n            <div className=\"global-hints\">\n              <h4>게임 힌트</h4>\n              <div className=\"hint-buttons\">\n                <button \n                  className=\"btn btn-hint\"\n                  onClick={revealAnswerHint}\n                  disabled={gameState.answers.length === gameState.revealedAnswers.length}\n                >\n                  정답 1개 공개\n                </button>\n                <button \n                  className=\"btn btn-hint\"\n                  onClick={revealWrongHint}\n                >\n                  오답 1개 공개\n                </button>\n              </div>\n              <div className=\"revealed-info\">\n                {gameState.revealedAnswers.length > 0 && (\n                  <div>\n                    <small>공개된 정답: {gameState.revealedAnswers.length}개</small>\n                  </div>\n                )}\n                {gameState.revealedWrongAnswers.length > 0 && (\n                  <div>\n                    <small>공개된 오답: {gameState.revealedWrongAnswers.length}개</small>\n                  </div>\n                )}\n              </div>\n            </div>\n\n            <div className=\"players-status\">\n              <h4>플레이어 현황</h4>\n              <div className=\"players-list\">\n                {players.map(player => (\n                  <div \n                    key={player.id} \n                    className={`player-status ${currentPlayer?.id === player.id ? 'current' : ''}`}\n                  >\n                    <span className=\"player-name\">{player.nickname}</span>\n                    <span className=\"player-type\">({player.type === 'ai' ? 'AI' : '인간'})</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            <div className=\"turn-history\">\n              <h4>턴 기록</h4>\n              <div className=\"history-scroll\">\n                {gameState.turnHistory.slice(-5).map((turn, index) => (\n                  <div key={index} className=\"history-entry\">\n                    <div className=\"history-header\">\n                      <span>턴 {turn.turnNumber}: {turn.playerName}</span>\n                    </div>\n                    <div className=\"history-keywords\">\n                      {turn.guessKeywords.join(', ')}\n                    </div>\n                    <div className=\"history-result\">\n                      {turn.correctCount}/{gameConfig.answerCount} 정답\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"deduction-game\">\n      <div className=\"game-content\">\n        <div className=\"game-wrapper\">\n          <div className=\"game-header\">\n            <h1>Exclusive Deduction Game</h1>\n            <p>서로 다른 단서로 정답을 추론하는 게임</p>\n          </div>\n          \n          {currentScreen === 'mode-selection' && renderModeSelection()}\n          {currentScreen === 'player-setup' && renderPlayerSetup()}\n          {currentScreen === 'game-config' && renderGameConfig()}\n          {currentScreen === 'game-preparation' && renderGamePreparation()}\n          {currentScreen === 'game' && renderGameScreen()}\n        </div>\n        \n        {renderCodeEditorModal()}\n      </div>\n    </div>\n  );\n};\n\nexport default DeductionGame;","import { useParams } from \"react-router-dom\";\nimport './LabPage.css';\n\nimport { Tetris, DeductionGame } from \"../components/lab/subject\";\n\n\nconst LabDetailPage = () => {\n    const { subject } = useParams()\n    console.log(subject)\n\n\n    const renderContetns = () => {\n        switch (subject) {\n            case \"tetris\":\n                return <Tetris />\n            case \"deduction-game\":\n                return <DeductionGame />\n            default:\n                return (\n                    <h1 className=\"lab-title\">준비중...</h1>\n                )\n        }\n    }\n\n    return (\n        <div className=\"lab-page\">\n             <main className=\"lab-content\">\n                {renderContetns()}\n             </main>\n        </div>\n    )\n}\n\nexport default LabDetailPage;"],"names":["Tetris","_jsxs","className","children","_jsx","src","process","title","allow","allowFullScreen","DeductionGame","currentScreen","setCurrentScreen","useState","gameMode","setGameMode","playerCount","setPlayerCount","players","setPlayers","gameConfig","setGameConfig","keywordPoolSize","answerCount","hintCount","timeLimit","maxTurns","difficulty","gameState","setGameState","keywords","answers","playerHints","isReady","currentTurn","turnHistory","gameStatus","revealedAnswers","revealedWrongAnswers","hintsViewed","preparationStep","setPreparationStep","selectedKeywords","setSelectedKeywords","timeRemaining","setTimeRemaining","isMyTurn","setIsMyTurn","hintViewingPhase","setHintViewingPhase","currentViewingPlayer","setCurrentViewingPlayer","timerIntervalId","setTimerIntervalId","isSubmitting","setIsSubmitting","aiTimeoutId","setAiTimeoutId","codeEditorModal","setCodeEditorModal","isOpen","playerId","handleModeSelect","mode","id","nickname","type","aiLanguage","updatePlayer","updates","prev","map","player","_objectSpread","handleStartGame","console","log","handleConfigComplete","initializeGame","keywordCategories","animals","foods","objects","places","actions","async","Promise","resolve","setTimeout","size","Object","values","flat","sort","Math","random","slice","answerIndices","shuffledIndices","Array","from","length","_","i","push","nonAnswerIndices","filter","includes","forEach","hints","availableHints","startActualGame","startTimer","clearTimer","intervalId","setInterval","clearInterval","handleTimeUp","autoSelection","index","submitGuessWithSelection","exitGame","clearTimeout","revealAnswerHint","unrevealedAnswers","ans","randomAnswer","floor","revealWrongHint","wrongAnswers","randomWrong","submitGuess","selection","correctCount","isWinner","every","currentPlayerId","currentPlayer","find","p","turnResult","playerName","concat","guess","guessKeywords","turnNumber","timeUsed","isMaxTurnsReached","winner","undefined","difficultyPresets","beginner","intermediate","advanced","applyPreset","preset","updateGameConfig","useEffect","onClick","style","justifyContent","marginTop","num","count","newPlayers","handlePlayerCountSelect","_Fragment","placeholder","value","onChange","e","target","maxLength","name","checked","aiCode","htmlFor","width","split","disabled","_player$aiCode","trim","marginBottom","flexWrap","max","min","renderGamePreparation","preparationSteps","description","step","renderGameScreen","getCurrentPlayer","isGameFinished","_gameState$playerHint","viewingPlayer","hasViewedHints","hintIndex","nextPlayer","_players$find","answerIndex","turn","join","backgroundColor","keyword","isSelected","isRevealedAnswer","isRevealedWrong","toggleKeywordSelection","keywordIndex","renderCodeEditorModal","stopPropagation","exampleCode","spellCheck","LabDetailPage","subject","useParams","renderContetns"],"sourceRoot":""}